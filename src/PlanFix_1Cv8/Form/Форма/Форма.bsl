///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, Планфикс
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВнешняяОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СлужебныеДанные = ВнешняяОбработкаОбъект.ПолучитьСлужебныеДанные();
	СтруктуруМетаданныхДляОбмена = ВнешняяОбработкаОбъект.ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	Объект.ВерсияМодуля = СлужебныеДанные.ВерсияВнешнейОбработки;
	
	Если СтруктуруМетаданныхДляОбмена.Количество() = 0 Тогда
		Сообщить("Ошибка. Данная конфигурация не поддерживается", СтатусСообщения.ОченьВажное); 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = "Модуль интеграции 1С8 и Планфикс, версия " + Объект.ВерсияМодуля;
	
	ПрочитатьНастройки();
	ЗаполнитьСлужебнуюИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ЗасписатьНастройки(); 
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	РезультатВыполнения = ВыполнитьОбменНаСервере();
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияОбмена", ЭтотОбъект, ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
КонецПроцедуры

&НаСервере
Функция ВыполнитьОбменНаСервере()
	ВнешняяОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ВнешняяОбработкаОбъект.ВыполнитьОбменДаннымиСПланфикс(JSON);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеВыполненияОбмена(Результат, ДополнительныеПараметры) Экспорт
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РезультатВыгрузки")
		И Результат.Свойство("РезультатЗагрузки") Тогда
		
		Если Результат.РезультатВыгрузки Тогда
			ТекстСообщения = НСтр("ru='Выгрузка данных выполнена';
									|en = 'Data upload completed'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибкиВыгрузки);
		КонецЕсли;	
		
		Если Результат.РезультатЗагрузки Тогда 
			ТекстСообщения = НСтр("ru='Загрузка данных выполнена';
									|en = 'Data loading completed'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибкиЗагрузки);
		КонецЕсли;	
		
		Если Не Результат.РезультатВыгрузки ИЛИ Не Результат.РезультатЗагрузки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки);
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройки()
	КлючОбъекта = "НастройкаОбменаСПланфикс";
	КлючНастроек = "НастройкиПодключения";
	ИмяПользователяНастроек = "planfix-1c.ru";
	НастройкиПодключения = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователяНастроек);
	
	Если НастройкиПодключения <> Неопределено Тогда
		Объект.КлючAPI = НастройкиПодключения.КлючAPI;	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗасписатьНастройки()
	НастройкиПодключения = Новый Структура();
	НастройкиПодключения.Вставить("КлючAPI", Объект.КлючAPI);
	
	КлючОбъекта = "НастройкаОбменаСПланфикс";
	КлючНастроек = "НастройкиПодключения";
	ИмяПользователяНастроек = "planfix-1c.ru";
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиПодключения, , ИмяПользователяНастроек);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСлужебнуюИнформацию()
	
	СлужебнаяИнформация = "";
	СлужебнаяИнформация = "Версия внешней обработки:" + СлужебныеДанные.ВерсияВнешнейОбработки + Символы.ПС;
	СлужебнаяИнформация = СлужебнаяИнформация + "Идентификатор информационной базы:" + СлужебныеДанные.ИдентификаторИБ + Символы.ПС;
	СлужебнаяИнформация = СлужебнаяИнформация + "Название конфигурации:" + СлужебныеДанные.НазваниеКонфигурации + Символы.ПС;
	СлужебнаяИнформация = СлужебнаяИнформация + "Версия конфигурации:" + СлужебныеДанные.ВерсияКонфигурации + Символы.ПС;
	СлужебнаяИнформация = СлужебнаяИнформация + "Версия платформы:" + СлужебныеДанные.ВерсияПлатформы;
	
КонецПроцедуры
 
#КонецОбласти

#Область ОтладкаИТестирование

&НаКлиенте
Процедура ПолучитьДанные(Команда)
	ПолучитьДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеНаСервере()
	
	РезультатЗапроса.Очистить();
	ВнешняяОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Для каждого СтруктураОбъекта Из СтруктуруМетаданныхДляОбмена Цикл
		РезультатВыполненияЗапроса = ВнешняяОбработкаОбъект.ПолучитьДанныеДляОбмена(СтруктураОбъекта.Значение);
		
		Построитель = Новый ПостроительОтчета;
		Построитель.ИсточникДанных  = Новый ОписаниеИсточникаДанных(РезультатВыполненияЗапроса);
		Построитель.Вывести(РезультатЗапроса);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьJSON(Команда)
	СформироватьJSONНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьJSONНаСервере()
	ВнешняяОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	JSON = "";
	ТекстJSON = "";
	Для каждого  СтруктураОбъекта Из СтруктуруМетаданныхДляОбмена Цикл
		РезультатВыполненияЗапроса = ВнешняяОбработкаОбъект.ПолучитьДанныеДляОбмена(СтруктураОбъекта.Значение);
		ТекстJSON = ТекстJSON + Символы.ПС + ВнешняяОбработкаОбъект.СофрмироватьJSON(РезультатВыполненияЗапроса.Выгрузить(), СтруктураОбъекта.Ключ, СлужебныеДанные.ИдентификаторИБ); 
	КонецЦикла;
	JSON = ТекстJSON;
КонецПроцедуры

#КонецОбласти