///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ПланФикс
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбъявлениеПеременных
   перем СлужебныеДанные;
   перем СтруктураМетаданных;
#КонецОбласти

#Область СведенияОВнешнейОбработке 

// Функция заполняет структуру РегистрационныеДанные, которая имеет следующиме элементы (параметры):
//	• Наименование – краткое наименование обработки
//	• Версия - информация о версии обработки
//	• Безопасный режим – отвечает за то, должна ли обработка выполняться учитывая права пользователя.
//	• Вид – вид обработки или отчета. Возможные значения:
//		- ДополнительнаяОбработка
//		- ДополнительныйОтчет
//		- ЗаполнениеОбъекта
// 		- Отчет
//		- ПечатанаяФорма
//		- СозданиеСвязанныхОбъектов
//	• Команды – таблица значений, в которой перечисляются используемые команды. Колонки таблицы значений:
//		○ Идентификатор – любая строка (индефикатор команды)
//		○ Представление – описание команды
//		○ Модификатор -  строка (используется для дополнительных печатных форм)
//		○ ПоказыватьОповещение – окно оповещение будет появляться перед началом и после окончание выполнения (для команд клиентских и серверных без формы)
//		○ Использование – режим запуска обработки:
//			 ОткрытиеФормы – откроется форма обработки
//			 ВызовКлиентскогоМетода – вызов клиентского экспортного метода  форма
//			 ВызовСерверногоМетода – вызов экспортной  метода из модуля обработки
//	• Назначение
//		- "Документ.*" - все документы
Функция СведенияОВнешнейОбработке() Экспорт
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Модуль интеграции ПланФикс");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "0.0.1");

	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	
	РегистрационныеДанные.Вставить("Информация", "Модуль обеспечивающий обмен данными между информационной базой 1С и системой ПланФикс");
	
	#Область Команды
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Идентификатор");
	Команды.Колонки.Добавить("Представление");
	Команды.Колонки.Добавить("Модификатор");
	Команды.Колонки.Добавить("ПоказыватьОповещение");
	Команды.Колонки.Добавить("Использование");
	
	Команда = Команды.Добавить();
	Команда.Идентификатор = "Запустить";
	Команда.Представление = "Запутсить";
	Команда.ПоказыватьОповещение = Истина;
	Команда.Использование = "ВызовСерверногоМетода";
	
	РегистрационныеДанные.Вставить("Команды", Команды);
	#КонецОбласти
	
	#Область Назначение
	Назначение = Новый Массив;
	Назначение.Добавить(""); 
	
	РегистрационныеДанные.Вставить("Назначение", Назначение);
	#КонецОбласти	
	
	Возврат РегистрационныеДанные;
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	Если ИдентификаторКоманды = "" Тогда

	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти

#Область Служебные

Функция ПолучитьСлужебныеДанные() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	СлужебныеДанные = Новый Структура;
	СлужебныеДанные.Вставить("ВерсияПлатформы1С"			, СистемнаяИнформация.ВерсияПриложения);
	СлужебныеДанные.Вставить("НазваниеКонфигурации"			, Метаданные.Синоним);
	СлужебныеДанные.Вставить("ИмяКонфигурации"				, Метаданные.Имя);
	СлужебныеДанные.Вставить("ВерсияКонфигурации"			, Метаданные.Версия);
	
	Возврат СлужебныеДанные;
	
КонецФункции

Функция ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные) Экспорт
	
	СтруктураМетаданных = Новый Структура();
	
	Если СлужебныеДанные.ИмяКонфигурации = "УправлениеТорговлей" ИЛИ СлужебныеДанные.ИмяКонфигурации = "УправлениеПредприятием" Тогда
		СтруктураМетаданных.Вставить(Метаданные.Справочники.Партнеры.Имя, "Справочник." + Метаданные.Справочники.Партнеры.Имя); 
	КонецЕсли;
	
	Возврат СтруктураМетаданных;
	
КонецФункции

Функция ПолучитьДанныеДляОбмена(ИмяТаблицыМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	"+ИмяТаблицыМетаданных+" КАК ТаблицаОбъекта
		|ГДЕ
		|	НЕ ТаблицаОбъекта.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СофрмироватьJSON(ВыгрузкаРезультатаЗапроса, ИмяОбъектаМетаданных) Экспорт
	
	 ЗаписьJSON = Новый ЗаписьJSON;
	 ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	 ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	 
	 СоотвествиеИменПолей = ПолучитьСоотвествиеПолейПланФикс();
	 
	 ЗаписьJSON.ЗаписатьНачалоОбъекта();
		 ЗаписьJSON.ЗаписатьИмяСвойства(ИмяОбъектаМетаданных);
		 ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого СтрокаТЗ Из ВыгрузкаРезультатаЗапроса Цикл
			 ЗаписьJSON.ЗаписатьНачалоОбъекта();
			 Для каждого КолонкаТЗ Из ВыгрузкаРезультатаЗапроса.Колонки Цикл
			 	 ИмяСвойства = ?(СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) <> Неопределено, СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя), КолонкаТЗ.Имя);
				 
				 //некоторые общие свойства определяем и заполняем явно
				 ОпределитьИЗаполнитьОбщиеСвойства(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ);
				 
				 Если КолонкаТЗ.Имя = "Пол" Тогда
					 ЗаписьJSON.ЗаписатьИмяСвойства("sex");
					 Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Мужской Тогда 
						 ЗаписьJSON.ЗаписатьЗначение("1");
					 ИначеЕсли	 СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Женский Тогда
						 ЗаписьJSON.ЗаписатьЗначение("0");
					 Иначе 
						 ЗаписьJSON.ЗаписатьЗначение("-1");
					 КонецЕсли; 
					 Продолжить;
				 КонецЕсли;
				 
				 //пропускаем все поля для которых нет в соотвествии
				 Если  СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) = Неопределено Тогда
				 	 Продолжить;
				 КонецЕсли;
				 
				 //заполняем рекурсивно вложенные таблицы значений
				 Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
					 ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя],КолонкаТЗ.Имя);
					 Продолжить;	  
				 КонецЕсли;
				 				 				 
				 ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
				 ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
			 КонецЦикла; 
			 ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЦикла; 
		ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть(); 
	 
КонецФункции

Процедура ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, ТаблицаЗначений, ИмяТаблицы)
	
	СоотвествиеИменПолей = ПолучитьСоотвествиеПолейПланФикс();
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТаблицы);
	ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого СтрокаТЗ Из ТаблицаЗначений Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			Для каждого КолонкаТЗ Из ТаблицаЗначений.Колонки Цикл
				ИмяСвойства = ?(СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) <> Неопределено, СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя), КолонкаТЗ.Имя);
				
				//некоторые общие свойства определяем и заполняем явно
				ОпределитьИЗаполнитьОбщиеСвойства(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ);
					 
				Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
					ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя], КолонкаТЗ.Имя);
				Продолжить;	
				КонецЕсли;
			
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
				ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
				
			КонецЦикла; 
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла; 
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ОпределитьИЗаполнитьОбщиеСвойства(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ)
	
	Если КолонкаТЗ.Имя = "Ссылка" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("extID");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя].УникальныйИдентификатор()))	
	КонецЕсли;
	Если КолонкаТЗ.Имя = "НаименованиеПолное" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> ""  Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;
	Если КолонкаТЗ.Имя = "КонтактнаяИнформация" И ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений")  Тогда
		КонтактнаяИнформация = СтрокаТЗ[КолонкаТЗ.Имя];
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("address");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("workPhone");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("email");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("site");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Skype));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("skype");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСоотвествиеПолейПланФикс
//
// Описание: Возвращает соотвествие имен полей в ПланФикс и метаданных 1С
//
Функция ПолучитьСоотвествиеПолейПланФикс()
	СоотвествиеИменПолей = Новый Соответствие();
	СоотвествиеИменПолей.Вставить("Имя", "name"); //String  
	СоотвествиеИменПолей.Вставить("Фамилия", "lastname"); //String
	СоотвествиеИменПолей.Вставить("Отчество", "midname"); //String
	СоотвествиеИменПолей.Вставить("Пол", "sex"); //Integer
	//СоотвествиеИменПолей.Вставить("Телефон", "workPhone"); //String
	//СоотвествиеИменПолей.Вставить("", "mobilePhone"); //String
	//СоотвествиеИменПолей.Вставить("", "homePhone"); //String
	//СоотвествиеИменПолей.Вставить("Адрес", "address"); //String
	//СоотвествиеИменПолей.Вставить("", "site"); //String
	//СоотвествиеИменПолей.Вставить("АдресЭлектроннойПочты", "email"); //String
	//СоотвествиеИменПолей.Вставить("", "skype"); //String
	//СоотвествиеИменПолей.Вставить("", "icq"); //String
	//СоотвествиеИменПолей.Вставить("", "isCompany"); //Boolean
	//СоотвествиеИменПолей.Вставить("", "companies"); //String
	//СоотвествиеИменПолей.Вставить("", "companyContacts"); //String
	СоотвествиеИменПолей.Вставить("ДополнительнаяИнформация", "description"); //String
	СоотвествиеИменПолей.Вставить("ДатаРождения", "birthDate"); //LocalDate
	
	Возврат СоотвествиеИменПолей;
	
КонецФункции 

#КонецОбласти