///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, Planfix
// Дополнительная обработка, свободна для распространения и модификации исходного кода.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбъявлениеПеременных
Перем СлужебныеДанные;
Перем СтруктураМетаданных;
#КонецОбласти

#Область СведенияОВнешнейОбработке 

Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("1.0.1.7");

	РегистрационныеДанные.Вставить("Наименование", "Модуль интеграции 1С:Предприятие 8 и Planfix");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.7");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Модуль обеспечивающий обмен данными между информационной базой 1С и системой Planfix");
	
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Открыть форму настроек обмена с Planfix", "ОктрытьФорму", "ОткрытиеФормы");
	ДобавитьКоманду(ТаблицаКоманд, "Выполнить обмен данными с Planfix", "ВыполнитьОбмен", "ВызовСерверногоМетода",  Истина);
	ДобавитьКоманду(ТаблицаКоманд, "Отправить данные в Planfix", "ОтправитьДанныеВPlanfix", "ВызовСерверногоМетода",  Истина);
	ДобавитьКоманду(ТаблицаКоманд, "Получить данные из Planfix", "ПолучитьДанныеИзPlanfix", "ВызовСерверногоМетода",  Истина);
	РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
	
	Назначение = Новый Массив;
	Назначение.Добавить("Справочники.*"); 
	РегистрационныеДанные.Вставить("Назначение", Назначение);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("Использование"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение" 	, ТипБулево);
	ТаблицаКоманд.Колонки.Добавить("Модификатор"		  	, ТипСтрока);
	
	Возврат ТаблицаКоманд;
	
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление			= Представление;
	НоваяКоманда.Идентификатор			= Идентификатор;
	НоваяКоманда.Использование			= Использование;
	НоваяКоманда.ПоказыватьОповещение	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор			= Модификатор;
	
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	Если ИдентификаторКоманды = "ВыполнитьОбмен" Тогда
		ВыполнитьОбменДаннымиВФоне();
	ИначеЕсли  ИдентификаторКоманды = "ОтправитьДанныеВPlanfix" Тогда 
		ОтправитьДанныеВPlanfixВФоне();
	ИначеЕсли ИдентификаторКоманды = "ПолучитьДанныеИзPlanfix" Тогда 
		ПолучитьДанныеИзPlanfixВФоне();
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ОбменДанными

Функция ВыполнитьОбменДаннымиВФоне()Экспорт
	СтруктураРезультатовВыгрузки = Новый Структура("Результат, КоличествоЗаписей", Ложь, 0);
	СтруктураРезультатовЗагрузки = Новый Структура("Результат, КоличествоЗаписей", Ложь, 0);
	СтруктураРезультатовЗагрузки.Вставить("КоличествоЗаписейСмещение", 0);

	РезультатВыполнения = Новый Структура("РезультатВыгрузки, РезультатЗагрузки, ОписаниеОшибкиВыгрузки, ОписаниеОшибкиЗагрузки, ОписаниеОшибки",
	СтруктураРезультатовВыгрузки,
	СтруктураРезультатовЗагрузки,
	"",
	"",
	"");

	Попытка 
		ВыполнитьОбменДанными(РезультатВыполнения);
		ЗаписатьСобытиеВЖурналРегистрации( ,НСтр("ru = 'Результат обмена данными. " + ПолучитьТекстСообщенияРезультатаВыполнения(РезультатВыполнения)+ "'"),
			УровеньЖурналаРегистрации.Информация);
	Исключение
		ЗаписатьСобытиеВЖурналРегистрации( ,НСтр("ru = 'Во время выполнения действия произошла неизвестная ошибка.'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки; 
	
	Возврат РезультатВыполнения;
КонецФункции

Процедура ВыполнитьОбменДанными(РезультатВыполнения) 
		
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Если СтруктураМетаданных.Количество() = 0 Тогда
		РезультатВыполнения.ОписаниеОшибки(НСтр("ru='Ошибка. Данная конфигурация не поддерживается'"));
		Возврат;
	КонецЕсли; 
	
	ДопПараметрыЗапроса = "&sourceId="+СлужебныеДанные.ИдентификаторИБ;
	
		
	// Выгружаем данные по каждому объекту метаданных учавствующему в обмене
	Для каждого  СтруктураОбъектаМетаданных Из СтруктураМетаданных Цикл
		МенеджерОбъекта = Новый (СтруктураОбъектаМетаданных.Значение.ИмяМенеджераОбъекта);
		
		ПоследняяСсылка = МенеджерОбъекта.ПустаяСсылка();
		НастройкаСопоставленияДанных = ПолучитьНастройкуСопоставленияДанных(СтруктураОбъектаМетаданных.Ключ);
		
		// Для оптимизации работы с большими таблицами данных, выгрузку производим порциями рекурсивно
		ВыполнитьВыгрузкуДанныхРекурсивно(СтруктураОбъектаМетаданных, ПоследняяСсылка, РезультатВыполнения, НастройкаСопоставленияДанных);
		
		// Загружать данные будем также порциями и рекурсивно
		// Для контактов получаем данные в два захода сначала контакты, потом компании
		Если СтруктураОбъектаМетаданных.Ключ = "contacts" Тогда
			
			// При обмене загружаем только измененные данные 
			ДопПараметрыЗапроса = ДопПараметрыЗапроса + "&onlyChanged=true"; 
			
			ИмяМетода = "contact/list";
			ВыполнитьЗагрузкуДанныхРекурсивно(РезультатВыполнения, 0, ИмяМетода, ДопПараметрыЗапроса);
			
			ДопПараметрыЗапроса = ДопПараметрыЗапроса + "&isCompany=true";
			ВыполнитьЗагрузкуДанныхРекурсивно(РезультатВыполнения, 0, ИмяМетода, ДопПараметрыЗапроса);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция ОтправитьДанныеВPlanfixВФоне()Экспорт
	
	СтруктураРезультатовВыгрузки = Новый Структура("Результат, КоличествоЗаписей", Ложь, 0);
	РезультатВыполнения = Новый Структура("РезультатВыгрузки, ОписаниеОшибкиВыгрузки, ОписаниеОшибки",
	СтруктураРезультатовВыгрузки,
	"",
	"");

	Попытка 
		ОтправитьДанныеВPlanfix(РезультатВыполнения);
		ЗаписатьСобытиеВЖурналРегистрации(НСтр("ru = 'Интеграция с Planfix. Выгрузка данных'"), 
			НСтр("ru = 'Результат выгрузки данных " + ПолучитьТекстСообщенияРезультатаВыполнения(РезультатВыполнения)+ "'"),
			УровеньЖурналаРегистрации.Информация);
	Исключение
		ЗаписатьСобытиеВЖурналРегистрации(НСтр("ru = 'Интеграция с Planfix. Выгрузка данных'"), 
			НСтр("ru = 'Во время выполнения действия произошла неизвестная ошибка.'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;  
	
	Возврат РезультатВыполнения;
КонецФункции
 
Процедура ОтправитьДанныеВPlanfix(РезультатВыполнения)
	
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Если СтруктураМетаданных.Количество() = 0 Тогда
		РезультатВыполнения.ОписаниеОшибки(НСтр("ru='Ошибка. Данная конфигурация не поддерживается'"));
		Возврат;
	КонецЕсли; 
	
	ДопПараметрыЗапроса = "&sourceId="+СлужебныеДанные.ИдентификаторИБ;
	
	// Выгружаем данные по каждому объекту метаданных учавствующему в обмене
	Для каждого  СтруктураОбъектаМетаданных Из СтруктураМетаданных Цикл
		МенеджерОбъекта = Новый (СтруктураОбъектаМетаданных.Значение.ИмяМенеджераОбъекта);
		
		ПоследняяСсылка = МенеджерОбъекта.ПустаяСсылка();
		НастройкаСопоставленияДанных = ПолучитьНастройкуСопоставленияДанных(СтруктураОбъектаМетаданных.Ключ);
		
		// Для оптимизации работы с большими таблицами данных, выгрузку производим порциями рекурсивно
		ВыполнитьВыгрузкуДанныхРекурсивно(СтруктураОбъектаМетаданных, ПоследняяСсылка, РезультатВыполнения, НастройкаСопоставленияДанных);
	КонецЦикла; 
КонецПроцедуры

Функция ПолучитьДанныеИзPlanfixВФоне(ТолькоИзмененные = Истина)Экспорт
	
	СтруктураРезультатовЗагрузки = Новый Структура("Результат, КоличествоЗаписей", Ложь, 0);
	СтруктураРезультатовЗагрузки.Вставить("КоличествоЗаписейСмещение", 0);
	РезультатВыполнения = Новый Структура("РезультатЗагрузки, ОписаниеОшибкиЗагрузки, ОписаниеОшибки",
	СтруктураРезультатовЗагрузки,
	"",
	"");
	МетодПолученияДанных = ?(ТолькоИзмененные, "(только измененные)", "(все данные)");
	Попытка 
		ПолучитьДанныеИзPlanfix(ТолькоИзмененные, РезультатВыполнения);
		ЗаписатьСобытиеВЖурналРегистрации(НСтр("ru = 'Интеграция с Planfix. Загрузка данных " + МетодПолученияДанных + "'"), 
			НСтр("ru = 'Результат загрузки данных. " + ПолучитьТекстСообщенияРезультатаВыполнения(РезультатВыполнения) + "'"),
			УровеньЖурналаРегистрации.Информация);
	Исключение
		ЗаписатьСобытиеВЖурналРегистрации(НСтр("ru = 'Интеграция с Planfix. Загрузка данных " + МетодПолученияДанных + "'"), 
			НСтр("ru = 'Во время выполнения действия произошла неизвестная ошибка.'") + Символы.ПС +
		    ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	Возврат РезультатВыполнения;
КонецФункции

Процедура ПолучитьДанныеИзPlanfix(ТолькоИзмененные, РезультатВыполнения)
	
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Если СтруктураМетаданных.Количество() = 0 Тогда
		РезультатВыполнения.ОписаниеОшибки(НСтр("ru='Ошибка. Данная конфигурация не поддерживается'"));
		ЗаписатьСобытиеВЖурналРегистрации( ,РезультатВыполнения.ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка);		
		Возврат;
	КонецЕсли; 
	
	ДопПараметрыЗапроса = "&sourceId=" + СлужебныеДанные.ИдентификаторИБ;
	
	Если ТолькоИзмененные Тогда
		ДопПараметрыЗапроса = ДопПараметрыЗапроса + "&onlyChanged=true" 
	КонецЕсли; 
	
	Для каждого  СтруктураОбъектаМетаданных Из СтруктураМетаданных Цикл
		
		// Загружать данные будем также порциями и рекурсивно
		// Для контактов получаем данные в два захода сначала контакты, потом компании
		Если СтруктураОбъектаМетаданных.Ключ = "contacts" Тогда
			ИмяМетода = "contact/list";
			ВыполнитьЗагрузкуДанныхРекурсивно(РезультатВыполнения,0, ИмяМетода, ДопПараметрыЗапроса);
			
			ДопПараметрыЗапроса = ДопПараметрыЗапроса + "&isCompany=true";
			ВыполнитьЗагрузкуДанныхРекурсивно(РезультатВыполнения,0, ИмяМетода, ДопПараметрыЗапроса);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

#Область ВыгрузкаДанных

Функция ВыполнитьВыгрузкуДанныхРекурсивно(СтруктураОбъектаМетаданных, ПоследняяСсылка, РезультатВыполнения, НастройкаСопоставленияДанных)
	
	Если (СтруктураОбъектаМетаданных.Значение.ИмяТаблицыБд = "Справочник.КонтактныеЛица" ИЛИ СтруктураОбъектаМетаданных.Значение.ИмяТаблицыБд = "Справочник.КонтактныеЛицаПартнеров" )
			И Не НастройкаСопоставленияДанных.ВыгружатьКонтактныеЛицаКомпаний Тогда
		Возврат РезультатВыполнения;	
	КонецЕсли; 
	
	РезультатВыполненияЗапроса = ПолучитьПорциюДанныхДляОбмена(СтруктураОбъектаМетаданных.Значение, СлужебныеДанные.РазмерПорции, ПоследняяСсылка, НастройкаСопоставленияДанных);
	
	Если РезультатВыполненияЗапроса.Пустой() Тогда
		Возврат РезультатВыполнения;	
	КонецЕсли;
	
	ТаблицаВыгружаемыхДанных = РезультатВыполненияЗапроса.Выгрузить();
	ТекстJSON = СофрмироватьJSON(СлужебныеДанные.ИдентификаторИБ, ТаблицаВыгружаемыхДанных, СтруктураОбъектаМетаданных.Ключ, НастройкаСопоставленияДанных); 
	РезультатВыполнения.РезультатВыгрузки.КоличествоЗаписей = РезультатВыполнения.РезультатВыгрузки.КоличествоЗаписей + ТаблицаВыгружаемыхДанных.Количество();
	ПоследняяСсылка = ТаблицаВыгружаемыхДанных[ТаблицаВыгружаемыхДанных.Количество() - 1].Ссылка;
	РезультатВыполнения = ОтправитьДанные(ТекстJSON, РезультатВыполнения);	
	
	ВыполнитьВыгрузкуДанныхРекурсивно(СтруктураОбъектаМетаданных, ПоследняяСсылка, РезультатВыполнения, НастройкаСопоставленияДанных);
	
КонецФункции

Функция СофрмироватьJSON(ИдентификаторИБ, ТаблицаВыгружаемыхДанных, ИмяОбъектаPlanfix, НастройкаСопоставленияДанных) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СоотвествиеИменПолей = ПолучитьСоотвествиеСистемныхПолейPlanfix();
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("sourceId");
	ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ИдентификаторИБ));
	
	// Заполняем свойства массива по типу объекта 
	Если ИмяОбъектаPlanfix = "contacts" ИЛИ ИмяОбъектаPlanfix = "contact_persons" Тогда
		КонтактыЗаполнитьСвойстваМассиваJSON(НастройкаСопоставленияДанных, ЗаписьJSON);
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяОбъектаPlanfix);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для каждого СтрокаТЗ Из ТаблицаВыгружаемыхДанных Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого КолонкаТЗ Из ТаблицаВыгружаемыхДанных.Колонки Цикл
			
			// Некоторые общие свойства определяем и заполняем явно
			Если ИмяОбъектаPlanfix = "contacts" ИЛИ ИмяОбъектаPlanfix = "contact_persons" Тогда
				КонтактыОпределитьИЗаполнитьОбщиеСвойстваОбъектаJSON(СлужебныеДанные,ЗаписьJSON, СтрокаТЗ, КолонкаТЗ, НастройкаСопоставленияДанных);
			КонецЕсли;
			
			// Пропускаем все поля для которых нет соотвествия или не заполнены явно
			Если СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Заполняем рекурсивно вложенные таблицы значений
			Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
				ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ИмяОбъектаPlanfix,ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя],КолонкаТЗ.Имя,НастройкаСопоставленияДанных);
				Продолжить;	  
			КонецЕсли;
		КонецЦикла;
		
		// Заполняем свойства для сущностей 
		Если ИмяОбъектаPlanfix = "contacts" ИЛИ ИмяОбъектаPlanfix = "contact_persons" Тогда
			КонтактыЗаполнитьСвойстваОбъектаJSON(СтрокаТЗ, ТаблицаВыгружаемыхДанных, НастройкаСопоставленияДанных, ЗаписьJSON);
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	// Дополняем массив данными объектов с таким же типом данных в Planfix 
	Если ИмяОбъектаPlanfix = "contacts" Тогда
		КонтактныеЛицаДозаполнитьJSON(НастройкаСопоставленияДанных, ЗаписьJSON);
	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Процедура ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ИмяОбъектаPlanfix, ЗаписьJSON, ТаблицаЗначений, ИмяТаблицы, НастройкаСопоставленияДанных)
	
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СоотвествиеИменПолей = ПолучитьСоотвествиеСистемныхПолейPlanfix();
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТаблицы);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого КолонкаТЗ Из ТаблицаЗначений.Колонки Цикл
			
			// Некоторые общие свойства определяем и заполняем явно
			Если ИмяОбъектаPlanfix = "contacts" ИЛИ ИмяОбъектаPlanfix = "contact_persons" Тогда
				КонтактыОпределитьИЗаполнитьОбщиеСвойстваОбъектаJSON(СлужебныеДанные, ЗаписьJSON, СтрокаТЗ, КолонкаТЗ, НастройкаСопоставленияДанных);
			КонецЕсли; 
			
			// Пропускаем все поля для которых нет соотвествия или не заполнены явно
			Если СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
				ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ИмяОбъектаPlanfix, ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя], КолонкаТЗ.Имя, НастройкаСопоставленияДанных);
				Продолжить;	
			КонецЕсли;
		КонецЦикла; 
		
		// Заполняем свойства для сущностей 
		Если ИмяОбъектаPlanfix = "contacts" ИЛИ ИмяОбъектаPlanfix = "contact_persons" Тогда
			 КонтактыЗаполнитьСвойстваОбъектаJSON(СтрокаТЗ, ТаблицаЗначений, НастройкаСопоставленияДанных, ЗаписьJSON);
		КонецЕсли; 

		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла; 
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

#Область Контакты

Процедура КонтактыЗаполнитьСвойстваМассиваJSON(НастройкаСопоставленияДанных, ЗаписьJSON)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("contactTemplateId");
	ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ШаблонКонтактаВPlanfix);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("companyTemplateId");
	ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ШаблонКомпанииВPlanfix);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("optionImportDuplicate");
	ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ОпцииИмпортаКонтактовВPlanfix);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("optionImportUniqueField");
	Если  НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКонтактовВPlanfix = "custom" Тогда
		ЗаписьJSON.ЗаписатьЗначение("custom:" + НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеВPlanfix);
	Иначе 
		ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКонтактовВPlanfix);
	КонецЕсли; 
	
	Если  ЗначениеЗаполнено(НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВPlanfixПоУмолчанию) Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("optionImportUniqueDefaultField");
		ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВPlanfixПоУмолчанию);
	КонецЕсли; 
КонецПроцедуры

Процедура КонтактыЗаполнитьСвойстваОбъектаJSON(СтрокаТЗ, ТаблицаЗначений, НастройкаСопоставленияДанных, ЗаписьJSON)
	
	// Заполняем пользовательские поля по сопоставленным в настройках данным
	ТаблицаСопоставленияПолей = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов;
	Если ТаблицаСопоставленияПолей.Количество() > 0 Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("customFieldsData");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Для каждого КолонкаТЗ Из ТаблицаЗначений.Колонки Цикл
			СтрокаТаблицы = ТаблицаСопоставленияПолей.Найти(КолонкаТЗ.Имя, "ИмяРеквизитаОбъекта");
			
			// Пропускаем все поля, для которых нет сопоставления 
			Если  СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("Строка") 
				ИЛИ ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("Булево")
				ИЛИ ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("Число") Тогда
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("id");
				ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.ИдентификаторПоляВPlanfix);
				ЗаписьJSON.ЗаписатьИмяСвойства("value");
				ЗаписьJSON.ЗаписатьЗначение(СтрокаТЗ[КолонкаТЗ.Имя]);
				ЗаписьJSON.ЗаписатьКонецОбъекта();	
				
			КонецЕсли; 
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтактыОпределитьИЗаполнитьОбщиеСвойстваОбъектаJSON(СлужебныеДанные, ЗаписьJSON, СтрокаТЗ, КолонкаТЗ, НастройкаСопоставленияДанных)
	
	// Для контактных лиц к идентификатору объекта добавляем имя объекта, 
	// для контрагентов добавляем к версии объекта, версию объекта партнера	
	Если КолонкаТЗ.Имя = "Ссылка" Тогда
		// Контактные лица
		Если ТипЗнч(СтрокаТЗ.Ссылка) = ПолучитьТипСправочникаКонтактныхЛиц()Тогда
			УникальныйИдентификатор = "contact_persons_" + СокрЛП(СтрокаТЗ.Ссылка.УникальныйИдентификатор());
			ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
			
			// Выгружаем идентификатор владельца (партнер/контрагент). В Planfix контакты пока есть только у компаний.
			// УТКА
			Если СлужебныеДанные.ЭтоУТКА Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("ownerSourceObjectId");
				ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ.Ссылка.Владелец.УникальныйИдентификатор()));
			ИначеЕсли СлужебныеДанные.ЭтоУНФ Тогда 				
				ЗаписьJSON.ЗаписатьИмяСвойства("ownerSourceObjectId");
				ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Справочники.Контрагенты.НайтиПоРеквизиту("КонтактноеЛицо",СтрокаТЗ.Ссылка).УникальныйИдентификатор()));
			ИначеЕсли СлужебныеДанные.ЭтоБП Тогда 				
				ЗаписьJSON.ЗаписатьИмяСвойства("ownerSourceObjectId");
				ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ.Ссылка.ОбъектВладелец.УникальныйИдентификатор()));
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТЗ.Ссылка) = Тип("СправочникСсылка.Контрагенты") 
			И СтрокаТЗ.Ссылка.Метаданные().Реквизиты.Найти("Партнер") <> Неопределено Тогда
			УникальныйИдентификатор = СокрЛП(СтрокаТЗ.Ссылка.Партнер.УникальныйИдентификатор()) + "__" + СокрЛП(СтрокаТЗ.Ссылка.УникальныйИдентификатор());
		Иначе 
			УникальныйИдентификатор = СокрЛП(СтрокаТЗ.Ссылка.УникальныйИдентификатор());	
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьИмяСвойства("sourceObjectId");
		ЗаписьJSON.ЗаписатьЗначение(УникальныйИдентификатор);	
		
		// Общую версию данных делаем только, если это одна сущность с контрагентом
		Если ТипЗнч(СтрокаТЗ.Ссылка) = Тип("СправочникСсылка.Контрагенты") 
			И СтрокаТЗ.Ссылка.Метаданные().Реквизиты.Найти("Партнер") <> Неопределено
			И ПартнерКонтрагентаИКонтрагентЭтаОднаСущность(СтрокаТЗ.Ссылка) Тогда
			ВерсияДанных = СокрЛП(СтрокаТЗ.Ссылка.ВерсияДанных) + "__" + СокрЛП(СтрокаТЗ.Ссылка.Партнер.ВерсияДанных);
			
			// Пометка на удаление
			ПометкаУдаления = Булево(СтрокаТЗ.ПометкаУдаления ИЛИ СтрокаТЗ.Ссылка.Партнер.ПометкаУдаления);
		Иначе 
			ВерсияДанных = СокрЛП(СтрокаТЗ.Ссылка.ВерсияДанных);
			
			// Пометка на удаление
			ПометкаУдаления =  Булево(СтрокаТЗ.ПометкаУдаления);
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьИмяСвойства("sourceDataVersion");
		ЗаписьJSON.ЗаписатьЗначение(ВерсияДанных);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("isDeleted");
		ЗаписьJSON.ЗаписатьЗначение(ПометкаУдаления);
		
		// Наименование(имя)
		ЗаписатьСтруктуруНаименованияОбъектаВJSON(СтрокаТЗ.Ссылка, ЗаписьJSON);
	КонецЕсли;

	Если КолонкаТЗ.Имя = "Пол" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("gender");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			ЗаписьJSON.ЗаписатьЗначение("Male");
		ИначеЕсли	 СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Женский Тогда
			ЗаписьJSON.ЗаписатьЗначение("Female");
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение("NotDefined");
		КонецЕсли; 
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ДатаРождения" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> Дата(1, 1, 1) Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("birthDate");
		ЗаписьJSON.ЗаписатьЗначение(Формат(СтрокаТЗ[КолонкаТЗ.Имя],"ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	// УТКА БП
	Если СлужебныеДанные.ЭтоУТКА ИЛИ СлужебныеДанные.ЭтоБП Тогда
		
		Если КолонкаТЗ.Имя = "ДополнительнаяИнформация"  И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> "" Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("description");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
		КонецЕсли;
		
		// БП Контактные лица
		Если КолонкаТЗ.Имя = "Описание"  И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> "" Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("description");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
		КонецЕсли;

	// УНФ	
	Иначе 
		Если КолонкаТЗ.Имя = "Комментарий"  И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> "" Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("description");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
		КонецЕсли;
	КонецЕсли;
	
	#Область УТ_КА_УП
	
	Если СлужебныеДанные.ЭтоУТКА И КолонкаТЗ.Имя = "ЮрФизЛицо" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.КомпанияЧастноеЛицо.Компания 
			ИЛИ СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ЮрФизЛицо.ЮрЛицо
			ИЛИ СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			ЗаписьJSON.ЗаписатьЗначение(Истина);
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
		КонецЕсли; 
	КонецЕсли;
	
	// Данные партнера, если они ведутся отдельно от контрагентов и если это одна сущность с контрагентом
	Если КолонкаТЗ.Имя = "Партнер" 
		И Метаданные.Константы.Найти("ИспользоватьПартнеровИКонтрагентов") <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") 
		И ПартнерКонтрагентаИКонтрагентЭтаОднаСущность(СтрокаТЗ.Ссылка) Тогда
		
		ЗаписьJSON.ЗаписатьИмяСвойства("birthDate");
		ЗаписьJSON.ЗаписатьЗначение(Формат(СтрокаТЗ.Партнер.ДатаРождения,"ДФ=dd.MM.yyyy"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("gender");
		Если СтрокаТЗ.Партнер.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			ЗаписьJSON.ЗаписатьЗначение("Male");
		ИначеЕсли  СтрокаТЗ.Партнер.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			ЗаписьJSON.ЗаписатьЗначение("Female");
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение("NotDefined");
		КонецЕсли; 
	КонецЕсли; 
	
#КонецОбласти

#Область БП
	
	Если СлужебныеДанные.ЭтоБП И КолонкаТЗ.Имя = "ЮридическоеФизическоеЛицо" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ЗаписьJSON.ЗаписатьЗначение(Истина);
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
		КонецЕсли; 
	КонецЕсли;
	
#КонецОбласти


#Область УНФ
	
	Если КолонкаТЗ.Имя = "ВидКонтрагента" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
			ЗаписьJSON.ЗаписатьЗначение(Истина);
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
		КонецЕсли; 
	КонецЕсли;
	
#КонецОбласти
		
	Если КолонкаТЗ.Имя = "КонтактнаяИнформация" И ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений")  Тогда
		
		КонтактнаяИнформация = СтрокаТЗ[КолонкаТЗ.Имя];
		ТаблицаСопоставленияВидовНомераТелефона = НастройкаСопоставленияДанных.ТаблицаСопоставленияВидовНомераТелефона;

		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("address");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("phones");
			
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого СтрокаТелефон Из МассивПоиска  Цикл
				// Пропускаем дублирующиеся записи
				Если Не ЗначениеЗаполнено(СтрокаТелефон.ЗначенияПолей) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицы = ТаблицаСопоставленияВидовНомераТелефона.Найти(СтрокаТелефон.Вид, "ВидНомераТелефонаКИ");
				
				Если  СтрокаТаблицы = Неопределено Тогда
					ВидНомераТелефона = 1;
				Иначе 
					ВидНомераТелефона = СтрокаТаблицы.ВидНомераТелефонаПФ;
				КонецЕсли;
				
				НомерТелефона = СтрокаТелефон.НомерТелефона;
				Если Не ЗначениеЗаполнено(СокрЛП(НомерТелефона)) Тогда
					НомерТелефона = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефон.ЗначенияПолей).Представление;
				КонецЕсли;
				
				НомерТелефона = НормализоватьНомерТелефона(НомерТелефона);
				Если ЗначениеЗаполнено(НомерТелефона) Тогда
					ЗаписьJSON.ЗаписатьНачалоОбъекта();
					ЗаписьJSON.ЗаписатьИмяСвойства("number");
					ЗаписьJSON.ЗаписатьЗначение(НомерТелефона);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("type");
					ЗаписьJSON.ЗаписатьЗначение(ВидНомераТелефона);	
					ЗаписьJSON.ЗаписатьКонецОбъекта();
				КонецЕсли; 
				
			КонецЦикла; 
			ЗаписьJSON.ЗаписатьКонецМассива()
		КонецЕсли;
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("email");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("site");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Skype));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("skype");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтактныеЛицаДозаполнитьJSON(НастройкаСопоставленияДанных, ЗаписьJSON)
	
КонецПроцедуры
 
#КонецОбласти

Функция ОтправитьДанные(ТекстJSON, РезультатВыполнения)
	РезультатЗапроса = ВыполнитьHTTPЗапрос("contact/import", ТекстJSON);
	РезультатВыполнения.РезультатВыгрузки.Результат = РезультатЗапроса.РезультатВыполненияЗапроса;
	РезультатВыполнения.ОписаниеОшибкиВыгрузки = РезультатЗапроса.ОписаниеОшибки; 
	
	Возврат РезультатВыполнения;
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

Функция ВыполнитьЗагрузкуДанныхРекурсивно(РезультатВыполнения, Смещение = 0, ИмяМетода, ДопПараметрыЗапроса)
	
	ОтветТекстJSON = ПолучитьДанные(ИмяМетода, Смещение, ДопПараметрыЗапроса, РезультатВыполнения);
	
	Если ОтветТекстJSON = Неопределено Тогда
		Возврат РезультатВыполнения;
	КонецЕсли; 
	
	РезультатВыполнения = ОбработатьИЗагрузитьДанные(ОтветТекстJSON, РезультатВыполнения);

	// Прерываем рекурсию
	Если РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение = 0 Тогда
		Возврат РезультатВыполнения;
	КонецЕсли; 
	
	ВыполнитьЗагрузкуДанныхРекурсивно(РезультатВыполнения, РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение, ИмяМетода, ДопПараметрыЗапроса)
	
КонецФункции

Функция ПолучитьДанные(ИмяМетода, Смещение, ДопПараметрыЗапроса, РезультатВыполнения)
	
	РезультатЗапроса = ВыполнитьHTTPЗапрос(ИмяМетода, "offset=" + Формат(Смещение,"ЧГ=") + "&pageSize=" + СлужебныеДанные.РазмерПорции + ДопПараметрыЗапроса);
	РезультатВыполнения.РезультатЗагрузки.Результат = РезультатЗапроса.РезультатВыполненияЗапроса;
	РезультатВыполнения.ОписаниеОшибкиЗагрузки = РезультатЗапроса.ОписаниеОшибки; 
	
	Если РезультатЗапроса.ТекстJSON <> Неопределено И  РезультатЗапроса.ТекстJSON <> "" Тогда
		Возврат РезультатЗапроса.ТекстJSON;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОбработатьИЗагрузитьДанные(ТекстJSON, РезультатВыполнения) Экспорт
	
	ЧтениеJSON  = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	СтруктураДанныхJSON = ПрочитатьJSON(ЧтениеJSON);
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Для каждого ЭлементДанныхJSON Из СтруктураДанныхJSON Цикл
		Если ЭлементДанныхJSON.Ключ = "result" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементДанныхJSON.Ключ = "sourceId" Тогда
			Если ЭлементДанныхJSON.Значение <> СокрЛП(СлужебныеДанные.ИдентификаторИБ) Тогда
				РезультатВыполнения.РезультатЗагрузки.Результат = Ложь;
				РезультатВыполнения.ОписаниеОшибкиЗагрузки = НСтр("ru='При обмене с Planfix произошла ошибка, полученный идентификатор информационной базы не соотвествует идентификатору текущей базы. Обратитесь в службу поддержки'");
				ЗаписатьСобытиеВЖурналРегистрации( ,РезультатВыполнения.ОписаниеОшибкиЗагрузки, УровеньЖурналаРегистрации.Ошибка);
				Возврат РезультатВыполнения;	
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		
		МенеджерОбъекта = Новый (СтруктураМетаданных[ЭлементДанныхJSON.Ключ].ИмяМенеджераОбъекта);
		НастройкаСопоставленияДанных = ПолучитьНастройкуСопоставленияДанных(ЭлементДанныхJSON.Ключ);
		
		Если Не НастройкаСопоставленияДанных.СоздаватьОбъектыВ1С 
				И Не НастройкаСопоставленияДанных.ОбновлятьОбъектыВ1С Тогда
			Возврат РезультатВыполнения;
		КонецЕсли; 
		
		Для каждого ОбъектJSON Из ЭлементДанныхJSON.Значение Цикл
			
			// Контакты компаний не загружаем как партнера/контрагента
			Если Не ОбъектJSON.isCompany И ОбъектJSON.companies.Количество() > 0 Тогда
				РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение = РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение + 1;
				Продолжить;
			КонецЕсли; 
			
			ТекущийОбъект = ПолучитьОбъект(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON);
			Если ТекущийОбъект = Неопределено Тогда
				ТекстОшибки = НСтр("ru='Ошибка! Не удалось найти объект для записи: " + ОбъектJSON + "'");
				Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
				ЗаписатьСобытиеВЖурналРегистрации( ,ТекстОшибки , УровеньЖурналаРегистрации.Ошибка);
				РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение = РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение + 1;
				Продолжить;
			КонецЕсли; 
			
			УстановитьЗначениеСвойствОбъекта(СлужебныеДанные, НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
			РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписей = РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписей + 1;
			РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение = РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение + 1;
		КонецЦикла;
		
		// Аргумент прерывания рекурсии
		Если ЭлементДанныхJSON.Значение.Количество() = 0 Тогда
			РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписейСмещение = 0;
		КонецЕсли; 
	КонецЦикла; 
	
	РезультатВыполнения.РезультатЗагрузки.Результат = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПолучитьОбъект(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON, Владелец = Неопределено)
	
	Если ОбъектJSON.Свойство("sourceObjectId") И ЗначениеЗаполнено(ОбъектJSON.sourceObjectId) Тогда
		ОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(ПолучитьGUID(ОбъектJSON));
	КонецЕсли;
	
	Если Не ОбъектJSON.Свойство("sourceObjectId") 
		ИЛИ Не ЗначениеЗаполнено(ОбъектJSON.sourceObjectId) 
		ИЛИ Не ЗначениеЗаполнено(ОбъектСсылка.ВерсияДанных)Тогда 
		ОбъектСсылка = ПолучитьОбъектПоПравиламИмпорта(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON, Владелец);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка.ВерсияДанных) И НастройкаСопоставленияДанных.СоздаватьОбъектыВ1С Тогда
		ТекущийОбъект = МенеджерОбъекта.СоздатьЭлемент();
	ИначеЕсли ЗначениеЗаполнено(ОбъектСсылка.ВерсияДанных) И НастройкаСопоставленияДанных.ОбновлятьОбъектыВ1С Тогда 
		ТекущийОбъект = ОбъектСсылка.ПолучитьОбъект();
	Иначе 
		Возврат Неопределено;	 
	КонецЕсли;

	Возврат ТекущийОбъект;	
	
КонецФункции

Функция ПолучитьОбъектПоПравиламИмпорта(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON, Владелец = Неопределено)
	
	ОбъектСсылка = МенеджерОбъекта.ПустаяСсылка();
	Если НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКонтактовВ1С <> "" И НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКомпанийВ1С <> ""
		И НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВ1СПоУмолчанию <> "" Тогда
		
		Если ОбъектJSON.isCompany Тогда
			ПолеСовпаденияОбъекта = НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКомпанийВ1С;
		Иначе 
			ПолеСовпаденияОбъекта = НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКонтактовВ1С;
		КонецЕсли; 
		
		Если ПолеСовпаденияОбъекта = "Наименование" И ЗначениеЗаполнено(ОбъектJSON.name)Тогда
			Если Владелец <> Неопределено Тогда
				ОбъектСсылка =  МенеджерОбъекта.НайтиПоНаименованию(ПолучитьНаименованиеОбъектаИзJSON(ОбъектJSON), Истина, , Владелец);
			Иначе 
				ОбъектСсылка =  МенеджерОбъекта.НайтиПоНаименованию(ПолучитьНаименованиеОбъектаИзJSON(ОбъектJSON), Истина);
			КонецЕсли; 
		ИначеЕсли ПолеСовпаденияОбъекта = "ПользовательскоеПоле" И Владелец = Неопределено Тогда	
			ОбъектСсылка = ПолучитьСсылкуНаОбъектПоПользовательскомуПолю(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON);
		ИначеЕсли ПолеСовпаденияОбъекта = "ДваПользовательскихПоля" И Владелец = Неопределено Тогда
			ОбъектСсылка = ПолучитьСсылкуНаОбъектПоДвумПользовательскимПолям(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON);
		ИначеЕсли ПолеСовпаденияОбъекта = "АдресЭлектроннойПочты" И ЗначениеЗаполнено(ОбъектJSON.email) Тогда
			ОбъектСсылка = ПолучитьСсылкуНаОбъектПоEmail(МенеджерОбъекта, ОбъектJSON.email, Владелец); 
		ИначеЕсли ПолеСовпаденияОбъекта = "Телефон" И ЗначениеЗаполнено(ОбъектJSON.phones) Тогда
			ОбъектСсылка = ПолучитьСсылкуНаОбъектПоНомеруТелефона(МенеджерОбъекта, ОбъектJSON.phones, Владелец); 
		КонецЕсли;
		
		// Если не нашли по заданному правилу, ищем по дефолтному правилу
		ПолеСовпаденияОбъектаПоУмолчанию = НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВ1СПоУмолчанию;
		Если Не ЗначениеЗаполнено(ОбъектСсылка.ВерсияДанных) Тогда
			Если ПолеСовпаденияОбъектаПоУмолчанию = "Наименование" И ЗначениеЗаполнено(ОбъектJSON.name)Тогда
				Если Владелец <> Неопределено Тогда
					ОбъектСсылка =  МенеджерОбъекта.НайтиПоНаименованию(ПолучитьНаименованиеОбъектаИзJSON(ОбъектJSON), Истина, , Владелец);
				Иначе 
					ОбъектСсылка =  МенеджерОбъекта.НайтиПоНаименованию(ПолучитьНаименованиеОбъектаИзJSON(ОбъектJSON), Истина);
				КонецЕсли; 
			КонецЕсли
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ОбъектСсылка;
	
КонецФункции

#Область Контакты

Функция ПолучитьСсылкуНаОбъектПоПользовательскомуПолю(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON)
	
	ОбъектСсылка = МенеджерОбъекта.ПустаяСсылка();
	
	Если ОбъектJSON.isCompany Тогда
		ИдентификаторПоля = НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С;
	Иначе
		ИдентификаторПоля = НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С;
	КонецЕсли;
	
	МассивДанныхПользовательскихПолей = ОбъектJSON.customFieldsData;
	
	Для каждого ДанныеПоля  Из  МассивДанныхПользовательскихПолей Цикл
		Если ДанныеПоля.field.id = ИдентификаторПоля Тогда
			ЗначениеПоля = ПолучитьЗначениеПоля(ДанныеПоля);	
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ИдентификаторПоля) И ЗначениеПоля <> Неопределено Тогда
		ИмяРеквизитаОбъекта = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов.Найти(ИдентификаторПоля,"ИдентификаторПоляВPlanfix").ИмяРеквизитаОбъекта;
		ОбъектСсылка = МенеджерОбъекта.НайтиПоРеквизиту(ИмяРеквизитаОбъекта,ЗначениеПоля); 
	КонецЕсли;
	
	Возврат ОбъектСсылка;
	
КонецФункции

Функция ПолучитьСсылкуНаОбъектПоДвумПользовательскимПолям(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON)
	
	ОбъектСсылка = МенеджерОбъекта.ПустаяСсылка();
	
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураОбъектаМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Если ОбъектJSON.isCompany Тогда
		ИдентификаторПоля1 = НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С;
		ИдентификаторПоля2 = НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С2;
	Иначе
		ИдентификаторПоля1 = НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С;
		ИдентификаторПоля2 = НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С2;
	КонецЕсли;

	МассивДанныхПользовательскихПолей = ОбъектJSON.customFieldsData;
	
	Для каждого ДанныеПоля  Из  МассивДанныхПользовательскихПолей Цикл
		Если ДанныеПоля.field.id = ИдентификаторПоля1 Тогда
			ЗначениеПоля1 = ПолучитьЗначениеПоля(ДанныеПоля);
		ИначеЕсли ДанныеПоля.field.id = ИдентификаторПоля2 Тогда 
			ЗначениеПоля2 = ПолучитьЗначениеПоля(ДанныеПоля);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ИдентификаторПоля1) И ЗначениеПоля1 <> Неопределено И ЗначениеПоля1 <> ""
		И ЗначениеЗаполнено(ИдентификаторПоля2) И ЗначениеПоля2 <> Неопределено И ЗначениеПоля2 <> "" Тогда
		ИмяРеквизитаОбъекта1 = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов.Найти(ИдентификаторПоля1,"ИдентификаторПоляВPlanfix").ИмяРеквизитаОбъекта;
		ИмяРеквизитаОбъекта2 = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов.Найти(ИдентификаторПоля2,"ИдентификаторПоляВPlanfix").ИмяРеквизитаОбъекта;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаОбъекта.Ссылка КАК Ссылка
			|ИЗ
			|	" + СтруктураОбъектаМетаданных.contacts.ИмяТаблицыБд + " КАК ТаблицаОбъекта
			|ГДЕ
			|	ТаблицаОбъекта." + ИмяРеквизитаОбъекта1 + " = &ЗначениеПоля1
			|	И ТаблицаОбъекта." + ИмяРеквизитаОбъекта2 + " = &ЗначениеПоля2";
		
		Запрос.УстановитьПараметр("ЗначениеПоля1", ЗначениеПоля1);
		Запрос.УстановитьПараметр("ЗначениеПоля2", ЗначениеПоля2);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбъектСсылка = ВыборкаДетальныеЗаписи.Ссылка; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектСсылка;
	
КонецФункции

Функция ПолучитьСсылкуНаОбъектПоEmail(МенеджерОбъекта, АдресЭлектроннойПочты, Владелец)
	
	ОбъектСсылка = МенеджерОбъекта.ПустаяСсылка();
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураОбъектаМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаОбъектаКИ.Ссылка КАК Ссылка
		|ИЗ
		|	" + СтруктураОбъектаМетаданных.contacts.ИмяТаблицыБд + ".КонтактнаяИнформация КАК ТаблицаОбъектаКИ
		|ГДЕ
		|	ТаблицаОбъектаКИ.Тип = &Тип
		|	И ТаблицаОбъектаКИ.Вид = &Вид
		|	И ТаблицаОбъектаКИ.АдресЭП = &АдресЭП
		|	И &УсловиеПоВладелцу";
	
	Запрос.УстановитьПараметр("АдресЭП", СокрЛП(АдресЭлектроннойПочты));
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Если ОбъектСсылка.Метаданные().Имя = "Контрагенты" Тогда
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	ИначеЕсли ОбъектСсылка.Метаданные().Имя = "Партнеры" Тогда 
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	КонецЕсли; 
	
	Если Владелец <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПоВладелцу", "|ТаблицаОбъектаКИ.Ссылка.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Владелец);
	Иначе
		Запрос.УстановитьПараметр("УсловиеПоВладелцу", Истина);
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСсылка = ВыборкаДетальныеЗаписи.Ссылка; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбъектСсылка;
КонецФункции

Функция ПолучитьСсылкуНаОбъектПоНомеруТелефона(МенеджерОбъекта, МассивНомеров, Владелец)
	
	ОбъектСсылка = МенеджерОбъекта.ПустаяСсылка();
	Если МассивНомеров.Количество() = 0 Тогда
		Возврат ОбъектСсылка; 
	КонецЕсли; 
	
	МассивНомеровТелефона = Новый Массив();
	Для каждого СтруктураНомера  Из МассивНомеров Цикл
		МассивНомеровТелефона.Добавить(НормализоватьНомерТелефона(СтруктураНомера.number));
	КонецЦикла; 
	
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураОбъектаМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаОбъектаКИ.Ссылка КАК Ссылка
		|ИЗ
		|	" + СтруктураОбъектаМетаданных.contacts.ИмяТаблицыБд + ".КонтактнаяИнформация КАК ТаблицаОбъектаКИ
		|ГДЕ
		|	ТаблицаОбъектаКИ.Тип = &Тип
		|	И ТаблицаОбъектаКИ.НомерТелефона В (&МассивНомеровТелефона)
		|	И &УсловиеПоВладелцу";
	
	Запрос.УстановитьПараметр("МассивНомеровТелефона", МассивНомеровТелефона);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Если Владелец <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПоВладелцу", "|ТаблицаОбъектаКИ.Ссылка.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Владелец);
	Иначе
		Запрос.УстановитьПараметр("УсловиеПоВладелцу", Истина);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСсылка = ВыборкаДетальныеЗаписи.Ссылка; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбъектСсылка;
КонецФункции

// Запоняем объекты в зависимости от настроек прикладного решения
Процедура УстановитьЗначениеСвойствОбъекта(СлужебныеДанные, НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON)
	
	ТекущийОбъект.Заблокировать();
	
	Если ТекущийОбъект.Метаданные().Имя = "Контрагенты" 
				И Метаданные.Константы.Найти("ИспользоватьПартнеровИКонтрагентов") <> Неопределено 
				И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
				
		Если ТекущийОбъект.Ссылка.Пустая()Тогда
			 УстановитьЗначениеСвойствНовыйКонтрагентУТКА(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
		Иначе
			 УстановитьЗначениеСвойствТекущийКонтрагентУТКА(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
		КонецЕсли;
	ИначеЕсли СлужебныеДанные.ЭтоУНФ И ТекущийОбъект.Метаданные().Имя = "Контрагенты" Тогда 
		
		Если ТекущийОбъект.Ссылка.Пустая() Тогда
			 УстановитьЗначениеСвойствНовыйКонтрагентУНФ(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
		Иначе
			 УстановитьЗначениеСвойствТекущийКонтрагентУНФ(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
		КонецЕсли; 
	ИначеЕсли СлужебныеДанные.ЭтоБП И ТекущийОбъект.Метаданные().Имя = "Контрагенты" Тогда 
		
		Если ТекущийОбъект.Ссылка.Пустая() Тогда
			 УстановитьЗначениеСвойствНовыйКонтрагентБП(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
		Иначе
			 УстановитьЗначениеСвойствТекущийКонтрагентБП(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
		КонецЕсли; 
	
	ИначеЕсли ТекущийОбъект.Метаданные().Имя = "Партнеры" Тогда 
		
		Если ТекущийОбъект.Ссылка.Пустая()Тогда
			 УстановитьЗначениеСвойствНовыйПартнер(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
		Иначе
			 УстановитьЗначениеСвойствТекущийПартнер(НастройкаСопоставленияДанных,ТекущийОбъект, ОбъектJSON);
		 КонецЕсли;
	КонецЕсли; 
	
	ТекущийОбъект.Разблокировать();
	
	Если ОбъектJSON.Свойство("customFieldsData") Тогда
		 УстановитьЗначениеСвойствОбъектаДаннымиПользовательскихПолей(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON.customFieldsData)	
	КонецЕсли; 
	 
КонецПроцедуры

#Область УТКА

Процедура УстановитьЗначениеСвойствНовыйКонтрагентУТКА(НастройкаСопоставленияДанных, НовыйКонтрагент, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		Если Поле.Ключ = "isCompany" Тогда 
			НовыйКонтрагент.ЮрФизЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
			НовыйКонтрагент.ЮридическоеФизическоеЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйКонтрагент.ДополнительнаяИнформация = Поле.Значение;
		КонецЕсли;  
	КонецЦикла;
	
	УстановитьКонтактнуюИнформациюКонтрагентаУТКА(НастройкаСопоставленияДанных, НовыйКонтрагент, КонтактJSON) ;
	
	НовыйКонтрагент.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	НовыйКонтрагент.НаименованиеПолное = НовыйКонтрагент.Наименование;
	НовыйКонтрагент.Партнер =  УстановитьЗначениеСвойствНовыйПартнер(НастройкаСопоставленияДанных, Справочники.Партнеры.СоздатьЭлемент(), КонтактJSON);
	НовыйКонтрагент.Записать();
	
КонецПроцедуры

Процедура УстановитьЗначениеСвойствТекущийКонтрагентУТКА(НастройкаСопоставленияДанных, Контрагент, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "isCompany" Тогда 
			Контрагент.ЮрФизЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
			Контрагент.ЮридическоеФизическоеЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "description" Тогда
			Контрагент.ДополнительнаяИнформация = Поле.Значение;
		КонецЕсли;  
		
	КонецЦикла;
	УстановитьКонтактнуюИнформациюКонтрагентаУТКА(НастройкаСопоставленияДанных, Контрагент, КонтактJSON); 
	
	Контрагент.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	Контрагент.НаименованиеПолное = Контрагент.Наименование;
	Контрагент.Записать();

	// Данные партнера обновляем, если это одна сущность с контрагентом
	Если ПартнерКонтрагентаИКонтрагентЭтаОднаСущность(Контрагент) Тогда
		УстановитьЗначениеСвойствТекущийПартнерКонтрагента(НастройкаСопоставленияДанных, Контрагент.Партнер.ПолучитьОбъект(), КонтактJSON);	
	КонецЕсли; 
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюКонтрагентаУТКА(НастройкаСопоставленияДанных, Контрагент, КонтактJSON) 
	
	КИ  = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	
	Для каждого Поле Из КонтактJSON Цикл
			
		Если  Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
			Отбор.Вставить("АдресЭП", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение); 
				СтрокаКИ.АдресЭП = СокрЛП(Поле.Значение); 
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "phones" Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(Контрагент, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, Контрагент, СтрокаТелефон);
				КонецЕсли;
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "site" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли;  
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры

Функция  УстановитьЗначениеСвойствНовыйПартнер(НастройкаСопоставленияДанных, НовыйПартнер, КонтактJSON)
	// Значения по умолчанию
	НовыйПартнер.ДатаРегистрации = ТекущаяДата();
	ИнформацияПоКонтактнымЛицам = Неопределено;
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "isCompany" Тогда 
			НовыйПартнер.ЮрФизЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо)
		ИначеЕсли Поле.Ключ = "gender" Тогда
			Если КонтактJSON.gender = "Male" Тогда 
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли КонтактJSON.gender = "Female" Тогда
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> Неопределено Тогда
			НовыйПартнер.ДатаРождения = СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйПартнер.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "group"  И Поле.Значение.Свойство("groupName") Тогда
			ИмяГруппы = Поле.Значение.groupName;
			НовыйПартнер.Клиент = (СтрНайти(ИмяГруппы, "Клиент") <> 0 ИЛИ СтрНайти(ИмяГруппы, "Покупатель") <> 0);
			НовыйПартнер.Поставщик = СтрНайти(ИмяГруппы, "Поставщик") <> 0;
			НовыйПартнер.Конкурент = СтрНайти(ИмяГруппы, "Конкурент") <> 0;
			НовыйПартнер.ПрочиеОтношения = (СтрНайти(ИмяГруппы, "Подрядчик") <> 0 ИЛИ СтрНайти(ИмяГруппы, "Партнер") <> 0);
			Если ИмяГруппы = "" Тогда
				НовыйПартнер.Клиент = Истина;	
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "contacts" Тогда
			ИнформацияПоКонтактнымЛицам = Поле.Значение;
		КонецЕсли;  
		
	КонецЦикла;
	УстановитьКонтактнуюИнформациюПартнера(НастройкаСопоставленияДанных, НовыйПартнер, КонтактJSON);
	
	НовыйПартнер.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	НовыйПартнер.НаименованиеПолное = НовыйПартнер.Наименование;
	НовыйПартнер.Записать();
	
	Если ИнформацияПоКонтактнымЛицам <> Неопределено И ИнформацияПоКонтактнымЛицам.Количество() > 0 Тогда
		СоздатьИзменитьКонтактныеЛицаПартнера(НастройкаСопоставленияДанных, НовыйПартнер, ИнформацияПоКонтактнымЛицам);
	КонецЕсли; 
	
	Возврат НовыйПартнер.Ссылка;
	
КонецФункции

Процедура УстановитьЗначениеСвойствТекущийПартнер(НастройкаСопоставленияДанных, Партнер, КонтактJSON)
	
	ИнформацияПоКонтактнымЛицам = Неопределено;
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "isCompany" Тогда 
			Партнер.ЮрФизЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо)
		ИначеЕсли Поле.Ключ = "gender" Тогда
			Если КонтактJSON.gender = "Male" Тогда 
				Партнер.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактJSON.gender = "Female" Тогда
				Партнер.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				Партнер.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> Неопределено И Партнер.ДатаРождения <> СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date) Тогда
			Партнер.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			Партнер.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "contacts" Тогда
			ИнформацияПоКонтактнымЛицам = Поле.Значение;
		КонецЕсли;
	КонецЦикла;
	УстановитьКонтактнуюИнформациюПартнера(НастройкаСопоставленияДанных, Партнер, КонтактJSON);
	
	Партнер.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	Партнер.НаименованиеПолное = Партнер.Наименование;
	Партнер.Записать();
	
	Если ИнформацияПоКонтактнымЛицам <> Неопределено И ИнформацияПоКонтактнымЛицам.Количество() > 0 Тогда
		СоздатьИзменитьКонтактныеЛицаПартнера(НастройкаСопоставленияДанных, Партнер, ИнформацияПоКонтактнымЛицам);
	КонецЕсли; 
КонецПроцедуры

Процедура УстановитьЗначениеСвойствТекущийПартнерКонтрагента(НастройкаСопоставленияДанных, Партнер, КонтактJSON)
	
	ИнформацияПоКонтактнымЛицам = Неопределено;
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "gender" Тогда
			Если КонтактJSON.gender = "Male" Тогда 
				Партнер.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактJSON.gender = "Female" Тогда
				Партнер.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				Партнер.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> Неопределено И Партнер.ДатаРождения <> СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date) Тогда
			Партнер.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			Партнер.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "contacts" Тогда
			ИнформацияПоКонтактнымЛицам = Поле.Значение;
		КонецЕсли;
	КонецЦикла;
	//УстановитьКонтактнуюИнформациюПартнера(НастройкаСопоставленияДанных, Партнер, КонтактJSON);
	
	//Партнер.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	//Партнер.НаименованиеПолное = Партнер.Наименование;
	Партнер.Записать();
	
	Если ИнформацияПоКонтактнымЛицам <> Неопределено И ИнформацияПоКонтактнымЛицам.Количество() > 0 Тогда
		СоздатьИзменитьКонтактныеЛицаПартнера(НастройкаСопоставленияДанных, Партнер, ИнформацияПоКонтактнымЛицам);
	КонецЕсли; 
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюПартнера(НастройкаСопоставленияДанных, Партнер, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailПартнера);
			Отбор.Вставить("АдресЭП", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
				СтрокаКИ.АдресЭП = СокрЛП(Поле.Значение);
				СтрокаКИ.Представление = СокрЛП(Поле.Значение); 
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "phones" Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(Партнер, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, Партнер, СтрокаТелефон);
				КонецЕсли;
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.АдресПартнера);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "site" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла
		
КонецПроцедуры

Процедура СоздатьИзменитьКонтактныеЛицаПартнера(НастройкаСопоставленияДанных, Партнер, МассивКонтактныхЛиц)
	
	НастройкаСопоставленияДанных = ПолучитьНастройкуСопоставленияДанных("contacts");
	Если Не НастройкаСопоставленияДанных.ЗагружатьОбновлятьКонтактныеЛицаИзКомпаний Тогда
		Возврат;	
	КонецЕсли; 
	
	// Получаем всех текущих контактных лиц партнера
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка,
		|	КонтактныеЛицаПартнеров.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
		|	И КонтактныеЛицаПартнеров.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Партнер.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Тут если надо актуализировать информацию как в ПФ, тогда надо всем прекратить связь, 
		// а ниже установить только тем кто есть в ПФ
		ОбъектКЛ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектКЛ.ДатаПрекращенияСвязи = ТекущаяДата(); 
		ОбъектКЛ.Записать();
	КонецЦикла;

	Если МассивКонтактныхЛиц.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаКЛ = РезультатЗапроса.Выгрузить();
	
	// Актуализируем контактных лиц согласно данных из ПФ
	Для каждого КонтактJSON Из  МассивКонтактныхЛиц Цикл
		
		КонтактноеЛицоОбъект = ПолучитьОбъект(НастройкаСопоставленияДанных, Новый ("СправочникМенеджер.КонтактныеЛицаПартнеров"), КонтактJSON, Партнер.Ссылка);
		Если КонтактноеЛицоОбъект = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Ошибка! Не удалось найти объект для записи: " + КонтактJSON + "'");
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
			ЗаписатьСобытиеВЖурналРегистрации( ,ТекстОшибки , УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецЕсли; 
		
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ссылка", КонтактноеЛицоОбъект.Ссылка);
		МассивИскомыхСтрок = ТаблицаКЛ.НайтиСтроки(Отбор);
		Если МассивИскомыхСтрок.Количество() <> 0 
				И МассивИскомыхСтрок[0].Ссылка.Владелец = Партнер.Ссылка Тогда
				
			ОбъектКЛ = МассивИскомыхСтрок[0].Ссылка.ПолучитьОбъект();
			ОбъектКЛ.ДатаПрекращенияСвязи = Дата("00010101");// восстанавливаем связь
		Иначе 
			
			ОбъектКЛ = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
			ОбъектКЛ.ДатаРегистрацииСвязи = ТекущаяДата();
		КонецЕсли;
				
		Для каждого Поле Из КонтактJSON Цикл
			Если Поле.Ключ = "gender" Тогда
				Если КонтактJSON.gender = "Male" Тогда 
					ОбъектКЛ.Пол = Перечисления.ПолФизическогоЛица.Мужской
				ИначеЕсли	 КонтактJSON.gender = "Female" Тогда
					ОбъектКЛ.Пол = Перечисления.ПолФизическогоЛица.Женский
				Иначе 
					ОбъектКЛ.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
				КонецЕсли  ;
			ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> Неопределено И ОбъектКЛ.ДатаРождения <> СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date) Тогда
				ОбъектКЛ.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
			ИначеЕсли Поле.Ключ = "description" Тогда
				ОбъектКЛ.ДополнительнаяИнформация = Поле.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ОбъектКЛ.Владелец = Партнер.Ссылка;
		ОбъектКЛ.Автор = ПараметрыСеанса.ТекущийПользователь;
		УстановитьКонтактнуюИнформациюКЛ(НастройкаСопоставленияДанных, ОбъектКЛ, КонтактJSON);
		
		ОбъектКЛ.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
		ОбъектКЛ.Записать();
	КонецЦикла; 
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюКЛ(НастройкаСопоставленияДанных, ОбъектКЛ, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
			Отбор.Вставить("АдресЭП", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = ОбъектКЛ.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = ОбъектКЛ.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
				СтрокаКИ.АдресЭП = СокрЛП(Поле.Значение);
				СтрокаКИ.Представление = СокрЛП(Поле.Значение); 
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "phones" Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(ОбъектКЛ, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, ОбъектКЛ, СтрокаТелефон);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область УНФ

Процедура УстановитьЗначениеСвойствНовыйКонтрагентУНФ(НастройкаСопоставленияДанных, НовыйКонтрагент, КонтактJSON)
	ИнформацияПоКонтактнымЛицам = Неопределено;
	
	// Значения по умолчанию
	НовыйКонтрагент.ДатаСоздания = ТекущаяДата();
	НовыйКонтрагент.ВестиРасчетыПоДоговорам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоДокументам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоЗаказам = Истина;
	НовыйКонтрагент.ВестиУчетОплатыПоСчетам = Истина;
	НовыйКонтрагент.ВалютаРасчетовПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	НовыйКонтрагент.СпособЗачетаПредоплатыПоУмолчанию = Константы.СпособЗачетаПредоплатыПоУмолчанию.Получить();
	НовыйКонтрагент.СпособРазнесенияОплатыПоУмолчанию = Константы.СпособРазнесенияОплатыПоУмолчанию.Получить();
	НовыйКонтрагент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	НовыйКонтрагент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	НовыйКонтрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	НовыйКонтрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "isCompany" Тогда 
			НовыйКонтрагент.ВидКонтрагента = ?(КонтактJSON.isCompany = Истина, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, Перечисления.ВидыКонтрагентов.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "gender" Тогда
			Если КонтактJSON.gender = "Male" Тогда 
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли КонтактJSON.gender = "Female" Тогда
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> Неопределено Тогда
			НовыйКонтрагент.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйКонтрагент.Комментарий = Поле.Значение;
		ИначеЕсли Поле.Ключ = "group"  И Поле.Значение.Свойство("groupName") Тогда
			ИмяГруппы = Поле.Значение.groupName;
			НовыйКонтрагент.Покупатель = (СтрНайти(ИмяГруппы, "Клиент") <> 0 
											ИЛИ СтрНайти(ИмяГруппы, "Покупатель") <> 0);
			НовыйКонтрагент.Поставщик = СтрНайти(ИмяГруппы, "Поставщик") <> 0;
			НовыйКонтрагент.ПрочиеОтношения = (СтрНайти(ИмяГруппы, "Подрядчик") <> 0 
												ИЛИ СтрНайти(ИмяГруппы, "Партнер") <> 0 
												ИЛИ СтрНайти(ИмяГруппы, "Конкурент") <> 0);
			
			Если ИмяГруппы = "" Тогда
				НовыйКонтрагент.Покупатель = Истина;	
			КонецЕсли;
			
		ИначеЕсли Поле.Ключ = "contacts" Тогда
			ИнформацияПоКонтактнымЛицам = Поле.Значение;
		КонецЕсли;  
	КонецЦикла;
	
	УстановитьКонтактнуюИнформациюКонтрагентаУНФ(НастройкаСопоставленияДанных, НовыйКонтрагент, КонтактJSON);
	
	НовыйКонтрагент.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	
	Если НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		НовыйКонтрагент.ФИО = НовыйКонтрагент.Наименование;
	КонецЕсли;
	
	Если НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
		НовыйКонтрагент.НаименованиеПолное = НовыйКонтрагент.Наименование;
	КонецЕсли; 
	
	НовыйКонтрагент.Записать();
	
	Если ИнформацияПоКонтактнымЛицам <> Неопределено И ИнформацияПоКонтактнымЛицам.Количество() > 0 Тогда
		// Не создаем контрагентов для контактов компаний
		СоздатьИзменитьКонтактныеЛицаКомпанииУНФ(НастройкаСопоставленияДанных, НовыйКонтрагент, ИнформацияПоКонтактнымЛицам);
		
	// Контактное лицо из контрагента создаем только для контактов		
	ИначеЕсли НовыйКонтрагент.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.ЮридическоеЛицо  Тогда 
		СоздатьИзменитьКонтактноеЛицоИзКонтрагентаУНФ(НастройкаСопоставленияДанных, НовыйКонтрагент, КонтактJSON);
	КонецЕсли; 
КонецПроцедуры

Процедура УстановитьЗначениеСвойствТекущийКонтрагентУНФ(НастройкаСопоставленияДанных, Контрагент, КонтактJSON)
	ИнформацияПоКонтактнымЛицам = Неопределено;
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "isCompany" Тогда 
			Контрагент.ВидКонтрагента = ?(КонтактJSON.isCompany = Истина, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, Перечисления.ВидыКонтрагентов.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "gender" Тогда
			Если КонтактJSON.gender = "Male" Тогда 
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактJSON.gender = "Female" Тогда
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> Неопределено И Контрагент.ДатаРождения <> СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date) Тогда
			Контрагент.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			Контрагент.Комментарий = Поле.Значение;
		ИначеЕсли Поле.Ключ = "contacts" Тогда
			ИнформацияПоКонтактнымЛицам = Поле.Значение;
		КонецЕсли;  
	КонецЦикла;
	
	УстановитьКонтактнуюИнформациюКонтрагентаУНФ(НастройкаСопоставленияДанных, Контрагент, КонтактJSON);
	
	Контрагент.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	
	Если Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		Контрагент.ФИО = Контрагент.Наименование;
	КонецЕсли;
	
	Если Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
		Контрагент.НаименованиеПолное = Контрагент.Наименование;
	КонецЕсли;
	
	Контрагент.Записать();
	
	Если ИнформацияПоКонтактнымЛицам <> Неопределено И ИнформацияПоКонтактнымЛицам.Количество() > 0 Тогда
		// Не создаем контрагентов для контактов компаний
		СоздатьИзменитьКонтактныеЛицаКомпанииУНФ(НастройкаСопоставленияДанных, Контрагент, ИнформацияПоКонтактнымЛицам);
		
	// Контактное лицо из контрагента создаем только для контактов	
	ИначеЕсли Контрагент.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.ЮридическоеЛицо  Тогда 
		СоздатьИзменитьКонтактноеЛицоИзКонтрагентаУНФ(НастройкаСопоставленияДанных, Контрагент, КонтактJSON);
	КонецЕсли; 
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюКонтрагентаУНФ(НастройкаСопоставленияДанных, Контрагент, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
			Отбор.Вставить("АдресЭП", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение);
				СтрокаКИ.АдресЭП = СокрЛП(Поле.Значение);
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
			// УНФ для РФ
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контрагент, "АдресЭПДляПоиска") Тогда
				Контрагент.АдресЭПДляПоиска = Поле.Значение;	
			КонецЕсли;
			// УНФ для Украины
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контрагент, "АдресЭП") Тогда
				Контрагент.АдресЭП = Поле.Значение;	
			КонецЕсли;
			
		ИначеЕсли Поле.Ключ = "phones"  Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(Контрагент, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, Контрагент, СтрокаТелефон);
				КонецЕсли;
				
				// УНФ для РФ
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контрагент, "НомерТелефонаДляПоиска") Тогда
					Контрагент.НомерТелефонаДляПоиска = НормализоватьНомерТелефона(СтрокаТелефон.number);	
				КонецЕсли;
				
				// УНФ для Украины
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контрагент, "НомерТелефона") Тогда
					Контрагент.НомерТелефона = НормализоватьНомерТелефона(СтрокаТелефон.number);	
				КонецЕсли;
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "site" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли;  
		КонецЕсли;  
	КонецЦикла;
		
КонецПроцедуры

Процедура СоздатьИзменитьКонтактныеЛицаКомпанииУНФ(НастройкаСопоставленияДанных, КонтрагентКомпания, МассивКонтактныхЛиц)
	
	МенеджерОбъекта = Новый ("СправочникМенеджер.КонтактныеЛица");
	Для каждого КонтактJSON Из  МассивКонтактныхЛиц Цикл
		
		КонтактноеЛицоОбъект = ПолучитьОбъект(НастройкаСопоставленияДанных, МенеджерОбъекта, КонтактJSON);
		Если КонтактноеЛицоОбъект = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Ошибка! Не удалось найти объект для записи: " + КонтактJSON + "'");
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
			ЗаписатьСобытиеВЖурналРегистрации( ,ТекстОшибки , УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецЕсли; 
		
		// Внесение изменений
		УстановитьЗначениеСвойствКонтактноеЛицоУНФ(НастройкаСопоставленияДанных, КонтактноеЛицоОбъект, КонтактJSON);
		КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
		
		Если ЗначениеЗаполнено(КонтрагентКомпания.ГруппаДоступа) И НЕ ЗначениеЗаполнено(КонтактноеЛицоОбъект.ГруппаДоступа) Тогда
			КонтактноеЛицоОбъект.ГруппаДоступа = КонтрагентКомпания.ГруппаДоступа;
		КонецЕсли;
		
		УстановитьКонтактнуюИнформациюКонтактногоЛицаУНФ(НастройкаСопоставленияДанных, КонтактноеЛицоОбъект, КонтактJSON);
		
		// Запись объекта
		КонтактноеЛицоОбъект.ДополнительныеСвойства.Вставить("СвязьСКонтрагентом", Новый Структура("Контрагент,Должность", КонтрагентКомпания.Ссылка, ""));
		КонтактноеЛицоОбъект.Записать();
		
		// Сохранение ссылки на созданный объект
		КонтрагентКомпания.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;   //Кто будет основным контактом? Пока берем последнего из списка
		КонтрагентКомпания.Записать();
	КонецЦикла; 
КонецПроцедуры

Процедура УстановитьЗначениеСвойствКонтактноеЛицоУНФ(НастройкаСопоставленияДанных, КонтактноеЛицо, КонтактJSON)
	Если КонтактноеЛицо.Ссылка.Пустая() Тогда
		КонтактноеЛицо.ДатаСоздания = ТекущаяДата();
	КонецЕсли; 
	
	Для каждого Поле Из КонтактJSON Цикл
		Если Поле.Ключ = "gender" Тогда
			Если КонтактJSON.gender = "Male" Тогда 
				КонтактноеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактJSON.gender = "Female" Тогда
				КонтактноеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				КонтактноеЛицо.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> Неопределено И КонтактноеЛицо.ДатаРождения <> СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date) Тогда
			КонтактноеЛицо.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			КонтактноеЛицо.Комментарий = Поле.Значение;
		КонецЕсли;  
	КонецЦикла;
	
	УстановитьКонтактнуюИнформациюКонтактногоЛицаУНФ(НастройкаСопоставленияДанных, КонтактноеЛицо, КонтактJSON);
	
	КонтактноеЛицо.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	КонтактноеЛицо.Записать();
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюКонтактногоЛицаУНФ(НастройкаСопоставленияДанных, КонтактноеЛицо, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
			Отбор.Вставить("АдресЭП", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = КонтактноеЛицо.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение);
				СтрокаКИ.АдресЭП = СокрЛП(Поле.Значение);
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
			КонтактноеЛицо.АдресЭПДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "phones"  Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(КонтактноеЛицо, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, КонтактноеЛицо, СтрокаТелефон);
				КонецЕсли;
				КонтактноеЛицо.НомерТелефонаДляПоиска = НормализоватьНомерТелефона(СтрокаТелефон.number);
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.SkypeКонтактаЛида);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = КонтактноеЛицо.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли;  
		КонецЕсли;  
	КонецЦикла;
		
КонецПроцедуры

// Пока не используем
Процедура СоздатьИзменитьКонтрагентовИКонтактныеЛицаКомпанииУНФ(НастройкаСопоставленияДанных, КонтрагентКомпания, МассивКонтактныхЛиц)
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	
	// Ищем или создаем контрагентов и из них создаем контактное лицо 
	МенеджерОбъекта = Новый ("СправочникМенеджер.Контрагенты");
	Для каждого КонтактJSON Из  МассивКонтактныхЛиц Цикл
		
		КонтрагентДляКЛ = ПолучитьОбъект(НастройкаСопоставленияДанных, МенеджерОбъекта, КонтактJSON);
		Если КонтрагентДляКЛ = Неопределено И КонтрагентКомпания.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
			ТекстОшибки = НСтр("ru='Ошибка! Не удалось найти объект для записи: " + КонтактJSON + "'");
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
			ЗаписатьСобытиеВЖурналРегистрации( ,ТекстОшибки , УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецЕсли; 
		
		// Контрагент создан
		Если КонтрагентДляКЛ.Ссылка.Пустая() Тогда
			УстановитьЗначениеСвойствОбъекта(СлужебныеДанные, НастройкаСопоставленияДанных, КонтрагентДляКЛ, КонтактJSON);	
		КонецЕсли; 
		
		
		Если КонтрагентДляКЛ.КонтактноеЛицо.Пустая() Тогда
			// Создание
			КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
			КонтактноеЛицоОбъект.Заполнить(КонтрагентДляКЛ.Ссылка);
			
		Иначе 
			// Получение объекта
			КонтактноеЛицоОбъект = КонтрагентДляКЛ.КонтактноеЛицо.ПолучитьОбъект();
		КонецЕсли; 
		
		
		// Внесение изменений
		ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, КонтрагентДляКЛ, "Наименование");
		КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
		
		Если ЗначениеЗаполнено(КонтрагентКомпания.ГруппаДоступа) И НЕ ЗначениеЗаполнено(КонтактноеЛицоОбъект.ГруппаДоступа) Тогда
			КонтактноеЛицоОбъект.ГруппаДоступа = КонтрагентКомпания.ГруппаДоступа;
		КонецЕсли;
		
		УстановитьКонтактнуюИнформациюКонтактногоЛицаИзКонтрагентаУНФ(НастройкаСопоставленияДанных, КонтактJSON, КонтрагентДляКЛ, КонтактноеЛицоОбъект);
		
		// Запись объекта
		КонтактноеЛицоОбъект.ДополнительныеСвойства.Вставить("СвязьСКонтрагентом", Новый Структура("Контрагент,Должность", КонтрагентКомпания.Ссылка, ""));
		КонтактноеЛицоОбъект.Записать();
	КонецЦикла; 
	
	// Кто будет основным контактом?
	//// Сохранение ссылки на созданный объект
	//КонтрагентОбъект.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
	//КонтрагентОбъект.Записать();
КонецПроцедуры

Процедура СоздатьИзменитьКонтактноеЛицоИзКонтрагентаУНФ(НастройкаСопоставленияДанных, КонтрагентОбъект, КонтактJSON)
	
	Если  КонтрагентОбъект.КонтактноеЛицо.Пустая() Тогда
		// Создание
		КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицоОбъект.Заполнить(КонтрагентОбъект.Ссылка);
	Иначе 
		// Получение объекта
		КонтактноеЛицоОбъект = КонтрагентОбъект.КонтактноеЛицо.ПолучитьОбъект();
	КонецЕсли; 
		
	// Внесение изменений
	ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, КонтрагентОбъект, "Наименование");
	КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
	
	Если ЗначениеЗаполнено(КонтрагентОбъект.ГруппаДоступа) И НЕ ЗначениеЗаполнено(КонтактноеЛицоОбъект.ГруппаДоступа) Тогда
		КонтактноеЛицоОбъект.ГруппаДоступа = КонтрагентОбъект.ГруппаДоступа;
	КонецЕсли;
	
	УстановитьКонтактнуюИнформациюКонтактногоЛицаИзКонтрагентаУНФ(НастройкаСопоставленияДанных, КонтактJSON, КонтрагентОбъект.Ссылка, КонтактноеЛицоОбъект);
	
	// Запись объекта
	КонтактноеЛицоОбъект.ДополнительныеСвойства.Вставить("СвязьСКонтрагентом", Новый Структура("Контрагент,Должность", КонтрагентОбъект.Ссылка, ""));
	КонтактноеЛицоОбъект.Записать();
	
	// Сохранение ссылки на созданный объект
	КонтрагентОбъект.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюКонтактногоЛицаИзКонтрагентаУНФ(НастройкаСопоставленияДанных, КонтактJSON, Контрагент, КонтактноеЛицоОбъект)
	
	Для Каждого ДанныеКИ Из Контрагент.КонтактнаяИнформация Цикл
		Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ИначеЕсли ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда 
			Продолжить;
		ИначеЕсли ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда 
			ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтактногоЛица;
		КонецЕсли; 
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицоОбъект, ДанныеКИ.Значение, ВидКИ, ДанныеКИ.Тип);
	КонецЦикла;
	
	// Для правильной передачи типов телефонных номеров, устанавливаем их из JSON 
	Для каждого Поле Из КонтактJSON Цикл
		Если Поле.Ключ = "phones" Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(КонтактноеЛицоОбъект, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, КонтактноеЛицоОбъект, СтрокаТелефон);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область БП

Процедура УстановитьЗначениеСвойствНовыйКонтрагентБП(НастройкаСопоставленияДанных, НовыйКонтрагент, КонтактJSON)
	ИнформацияПоКонтактнымЛицам = Неопределено;
	
	// Значения по умолчанию
	НовыйКонтрагент.ДатаСоздания = ТекущаяДата();
	
	Для каждого Поле Из КонтактJSON Цикл
		Если Поле.Ключ = "isCompany" Тогда 
			НовыйКонтрагент.ЮридическоеФизическоеЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйКонтрагент.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "contacts" Тогда
			ИнформацияПоКонтактнымЛицам = Поле.Значение;
		КонецЕсли;  
	КонецЦикла;
	
	УстановитьКонтактнуюИнформациюКонтрагентаБП(НастройкаСопоставленияДанных, НовыйКонтрагент, КонтактJSON);
	
	НовыйКонтрагент.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	НовыйКонтрагент.НаименованиеПолное = НовыйКонтрагент.Наименование;
	НовыйКонтрагент.Записать();
	
	Если ИнформацияПоКонтактнымЛицам <> Неопределено И ИнформацияПоКонтактнымЛицам.Количество() > 0 Тогда
		// Не создаем контрагентов для контактов компаний
		СоздатьИзменитьКонтактныеЛицаКомпанииБП(НастройкаСопоставленияДанных, НовыйКонтрагент, ИнформацияПоКонтактнымЛицам);
		
	// Контактное лицо из контрагента создаем только для контактов, актуально ли это для БП?		
	//ИначеЕсли НовыйКонтрагент.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо  Тогда 
	//	СоздатьИзменитьКонтактноеЛицоИзКонтрагентаБП(НастройкаСопоставленияДанных, НовыйКонтрагент, КонтактJSON);
	КонецЕсли; 
КонецПроцедуры

Процедура УстановитьЗначениеСвойствТекущийКонтрагентБП(НастройкаСопоставленияДанных, Контрагент, КонтактJSON)
	ИнформацияПоКонтактнымЛицам = Неопределено;
	Для каждого Поле Из КонтактJSON Цикл
		Если Поле.Ключ = "isCompany" Тогда 
			Контрагент.ЮридическоеФизическоеЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "description" Тогда
			Контрагент.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "contacts" Тогда
			ИнформацияПоКонтактнымЛицам = Поле.Значение;
		КонецЕсли;  
	КонецЦикла;
	
	УстановитьКонтактнуюИнформациюКонтрагентаБП(НастройкаСопоставленияДанных, Контрагент, КонтактJSON);
	
	Контрагент.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	Контрагент.НаименованиеПолное = Контрагент.Наименование;
	Контрагент.Записать();
	
	Если ИнформацияПоКонтактнымЛицам <> Неопределено И ИнформацияПоКонтактнымЛицам.Количество() > 0 Тогда
		// Не создаем контрагентов для контактов компаний
		СоздатьИзменитьКонтактныеЛицаКомпанииБП(НастройкаСопоставленияДанных, Контрагент, ИнформацияПоКонтактнымЛицам);
		
	//// Контактное лицо из контрагента создаем только для контактов, актуально ли это для БП?	
	//ИначеЕсли Контрагент.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо  Тогда 
	//	СоздатьИзменитьКонтактноеЛицоИзКонтрагентаБП(НастройкаСопоставленияДанных, Контрагент, КонтактJSON);
	КонецЕсли; 
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюКонтрагентаБП(НастройкаСопоставленияДанных, Контрагент, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
			Отбор.Вставить("АдресЭП", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение);
				СтрокаКИ.АдресЭП = СокрЛП(Поле.Значение);
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "phones"  Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(Контрагент, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, Контрагент, СтрокаТелефон);
				КонецЕсли;
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Отбор.Вставить("Представление", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		КонецЕсли;  
	КонецЦикла;
		
КонецПроцедуры

Процедура СоздатьИзменитьКонтактныеЛицаКомпанииБП(НастройкаСопоставленияДанных, КонтрагентКомпания, МассивКонтактныхЛиц)
	
	Если Не НастройкаСопоставленияДанных.ЗагружатьОбновлятьКонтактныеЛицаИзКомпаний Тогда
		Возврат;	
	КонецЕсли;
	
	МенеджерОбъекта = Новый ("СправочникМенеджер.КонтактныеЛица");
	Для каждого КонтактJSON Из  МассивКонтактныхЛиц Цикл
		
		КонтактноеЛицоОбъект = ПолучитьОбъект(НастройкаСопоставленияДанных, МенеджерОбъекта, КонтактJSON);
		Если КонтактноеЛицоОбъект = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Ошибка! Не удалось найти объект для записи: " + КонтактJSON + "'");
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
			ЗаписатьСобытиеВЖурналРегистрации( ,ТекстОшибки , УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецЕсли; 
		
		// Внесение изменений
		КонтактноеЛицоОбъект.ОбъектВладелец = КонтрагентКомпания.Ссылка;
		УстановитьЗначениеСвойствКонтактноеЛицоБП(НастройкаСопоставленияДанных, КонтактноеЛицоОбъект, КонтактJSON);
				
		КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
		УстановитьКонтактнуюИнформациюКонтактногоЛицаБП(НастройкаСопоставленияДанных, КонтактноеЛицоОбъект, КонтактJSON);
		
		// Сохранение ссылки на созданный объект
		КонтрагентКомпания.ОсновноеКонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;   //Кто будет основным контактом? Пока берем последнего из списка
		КонтрагентКомпания.Записать();
	КонецЦикла; 
КонецПроцедуры

Процедура УстановитьЗначениеСвойствКонтактноеЛицоБП(НастройкаСопоставленияДанных, КонтактноеЛицо, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		Если Поле.Ключ = "description" Тогда
			КонтактноеЛицо.Описание = Поле.Значение;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> Неопределено И КонтактноеЛицо.ДатаРождения <> СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date) Тогда
			КонтактноеЛицо.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "name" Тогда
			КонтактноеЛицо.Имя = СокрЛП(КонтактJSON.name);
		ИначеЕсли Поле.Ключ = "midname" Тогда
			КонтактноеЛицо.Отчество = СокрЛП(КонтактJSON.midname);
		ИначеЕсли Поле.Ключ = "lastname" Тогда
			КонтактноеЛицо.Фамилия = (КонтактJSON.lastname);
		КонецЕсли;  
	КонецЦикла;
	
	КонтактноеЛицо.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
	
	УстановитьКонтактнуюИнформациюКонтактногоЛицаБП(НастройкаСопоставленияДанных, КонтактноеЛицо, КонтактJSON);
	
	КонтактноеЛицо.Наименование = ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON);
	КонтактноеЛицо.Записать();
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюКонтактногоЛицаБП(НастройкаСопоставленияДанных, КонтактноеЛицо, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица);
			Отбор.Вставить("АдресЭП", СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() = 0 И СокрЛП(Поле.Значение) <> "" Тогда
				СтрокаКИ = КонтактноеЛицо.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение);
				СтрокаКИ.АдресЭП = СокрЛП(Поле.Значение);
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "phones"  Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(КонтактноеЛицо, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, КонтактноеЛицо, СтрокаТелефон);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;  
	КонецЦикла;
		
КонецПроцедуры

Процедура СоздатьИзменитьКонтактноеЛицоИзКонтрагентаБП(НастройкаСопоставленияДанных, КонтрагентОбъект, КонтактJSON)
	
	Если  КонтрагентОбъект.ОсновноеКонтактноеЛицо.Пустая() Тогда
		// Создание
		КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицоОбъект.Заполнить(КонтрагентОбъект.Ссылка);
	Иначе 
		// Получение объекта
		КонтактноеЛицоОбъект = КонтрагентОбъект.ОсновноеКонтактноеЛицо.ПолучитьОбъект();
	КонецЕсли; 
		
	// Внесение изменений
	ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, КонтрагентОбъект, "Наименование");
	КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
	
	УстановитьКонтактнуюИнформациюКонтактногоЛицаИзКонтрагентаБП(НастройкаСопоставленияДанных, КонтактJSON, КонтрагентОбъект.Ссылка, КонтактноеЛицоОбъект);
	
	КонтактноеЛицоОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
	
	// Запись объекта
	КонтактноеЛицоОбъект.ОбъектВладелец = КонтрагентОбъект.Ссылка;
	КонтактноеЛицоОбъект.Записать();
	
	// Сохранение ссылки на созданный объект
	КонтрагентОбъект.ОсновноеКонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьКонтактнуюИнформациюКонтактногоЛицаИзКонтрагентаБП(НастройкаСопоставленияДанных, КонтактJSON, Контрагент, КонтактноеЛицоОбъект)
	
	Для Каждого ДанныеКИ Из Контрагент.КонтактнаяИнформация Цикл
		Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
		ИначеЕсли ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда 
			Продолжить;
		КонецЕсли; 
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицоОбъект, ДанныеКИ.Значение, ВидКИ, ДанныеКИ.Тип);
	КонецЦикла;
	
	// Для правильной передачи типов телефонных номеров, устанавливаем их из JSON 
	Для каждого Поле Из КонтактJSON Цикл
		Если Поле.Ключ = "phones" Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Если СокрЛП(СтрокаТелефон.number) <> "" Тогда
					УдалитьТелефонИзКИ(КонтактноеЛицоОбъект, СтрокаТелефон);
					ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, КонтактноеЛицоОбъект, СтрокаТелефон);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеПользовательскихПолей 

Процедура  УстановитьЗначениеСвойствОбъектаДаннымиПользовательскихПолей (НастройкаСопоставленияДанных, Объект, МассивДанныхПользовательскихПолей)
	
	ТекущийОбъект = Объект.Ссылка.ПолучитьОбъект();
	ТекущийОбъект.Заблокировать();
	
	ТаблицаСопоставленияПолей = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов;
	
	Если ТаблицаСопоставленияПолей.Количество() > 0 Тогда
		
		Для каждого ДанныеПоля Из МассивДанныхПользовательскихПолей Цикл
			СтрокаТаблицы = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов.Найти(ДанныеПоля.field.id, "ИдентификаторПоляВPlanfix");
			
			// Пропускаем все поля, для которых нет сопоставления 
			Если  СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ТекущийОбъект[СтрокаТаблицы.ИмяРеквизитаОбъекта] = ПолучитьЗначениеПоля(ДанныеПоля); 	
			Исключение
			    ТекстОшибки = НСтр("ru='Ошибка! Не найден реквизит " + СтрокаТаблицы.ИмяРеквизитаОбъекта + " для " + ТипЗнч(ТекущийОбъект)+"'");
				Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
				ЗаписатьСобытиеВЖурналРегистрации( ,ТекстОшибки ,УровеньЖурналаРегистрации.Ошибка);
			КонецПопытки; 
		КонецЦикла;
		
		ТекущийОбъект.Записать();
	КонецЕсли;
	
	ТекущийОбъект.Разблокировать();
	
КонецПроцедуры

Функция ПолучитьЗначениеПоля(ДанныеПоля)
	
	ЗначениеПоля  = ДанныеПоля.value;
	СтроковоеЗначениеПоля = ДанныеПоля.stringValue;
	
	Если ДанныеПоля.field.type = 0  //"Строка"
		ИЛИ ДанныеПоля.field.type = 2 Тогда //"Текст"
		
		Возврат СокрЛП(ЗначениеПоля);
	ИначеЕсли ДанныеПоля.field.type = 1 Тогда //"Число"
		
		Возврат Число(ЗначениеПоля);
	ИначеЕсли ДанныеПоля.field.type = 3  //"Дата"
		ИЛИ ДанныеПоля.field.type = 4  //"Время"
		ИЛИ ДанныеПоля.field.type = 5 Тогда  //"Дата и время"
		
		Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеПоля);
	//ИначеЕсли ДанныеПоля.field.type = 6 Тогда //"Период времени"
		
	ИначеЕсли ДанныеПоля.field.type = 7 Тогда //"Чекбокс"
		
		Возврат Булево(ЗначениеПоля);
	//ИначеЕсли ДанныеПоля.field.type = 8 Тогда //"Список"
	//ИначеЕсли ДанныеПоля.field.type = 9 Тогда //"Запись справочника"
		
	ИначеЕсли ДанныеПоля.field.type = 10  //"Контакт"
		ИЛИ ДанныеПоля.field.type = 11  //"Сотрудник"
		ИЛИ ДанныеПоля.field.type = 12  //"Контрагент"
		ИЛИ ДанныеПоля.field.type = 22  //"Проект"	
		ИЛИ ДанныеПоля.field.type = 16 Тогда //"Задача"
		
		Возврат Строка(ЗначениеПоля);	
	//ИначеЕсли ДанныеПоля.field.type = 13 Тогда //"Группа, сотрудник или контакт"
	//ИначеЕсли ДанныеПоля.field.type = 14 Тогда //"Список пользователей"
	//ИначеЕсли ДанныеПоля.field.type = 15 Тогда //"Набор значений справочника"
	//ИначеЕсли ДанныеПоля.field.type = 17 Тогда //"Набор задач"
	//ИначеЕсли ДанныеПоля.field.type = 20 Тогда //"Набор значений"
	//ИначеЕсли ДанныеПоля.field.type = 21 Тогда //"Файлы"
	
	ИначеЕсли ДанныеПоля.field.type = 23 Тогда //"Итоги аналитик"
		
		Возврат Число(ЗначениеПоля);
	//ИначеЕсли ДанныеПоля.field.type = 24 Тогда //"Вычисляемое поле"
	//ИначеЕсли ДанныеПоля.field.type = 25 Тогда //"Местопопложение"
	ИначеЕсли ДанныеПоля.field.type = 26 Тогда //"Сумма подзадачи"
		
		Возврат Число(ЗначениеПоля);
	//ИначеЕсли ДанныеПоля.field.type = 27 Тогда //"Результат обучения"
	Иначе 
		Возврат СокрЛП(СтроковоеЗначениеПоля);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область API

Функция ВыполнитьHTTPЗапрос(ИмяМетода, ТелоЗапроса = "", HTTPМетод = "POST", Таймаут = 60) Экспорт
	
	РезультатВыполнения = Новый Структура("РезультатВыполненияЗапроса, ДанныеJSON, ТекстJSON, ОписаниеОшибки", Ложь, Неопределено, "");
	НастройкиПодключения  = ПолучитьНастройкиПодключения();
	ИдентификаторИБ = ПолучитьУникальныйИдентификаторИБ();
	
	Если НастройкиПодключения = Неопределено Тогда
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка! Не указаны настройки подключения к API(адрес сервера, токен авторизации)'");
		ЗаписатьСобытиеВЖурналРегистрации( ,РезультатВыполнения.ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка);
		Возврат РезультатВыполнения;
	КонецЕсли; 
	
	СтруктураURI = СтруктураURI(НастройкиПодключения.АдресСервера);
	
	HTTPСоединение = Новый HTTPСоединение(
	СтруктураURI.Хост, СтруктураURI.Порт 
	,,,,Таймаут,
	Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено)
	);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	РазделительПараметра = ?(СтрНайти(ИмяМетода, "?") > 0, "&", "?");
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере + ИмяМетода + РазделительПараметра + "access_token=" 
								+ НастройкиПодключения.ТокенАвторизации + "&sourceId=" + ИдентификаторИБ, Заголовки);
	
	Если HTTPМетод = "POST" ИЛИ HTTPМетод = "PUT" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли; 
	
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);	
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка! Не удалось установить соединение с сервером'");
		Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
		ЗаписатьСобытиеВЖурналРегистрации( ,ТекстОшибки ,УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки; 
	
	
	Если HTTPОтвет = Неопределено Тогда
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка! Не удалось установить соединение с сервером'");
		ЗаписатьСобытиеВЖурналРегистрации( ,РезультатВыполнения.ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка);
		Возврат РезультатВыполнения;
	КонецЕсли;
	Если HTTPОтвет.КодСостояния = 200 ИЛИ HTTPОтвет.КодСостояния = 201 Тогда
		ДанныеJSON = ПрочитатьОтвет(HTTPОтвет.ПолучитьТелоКакСтроку());
		ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	ИначеЕсли ПрочитатьОтвет(HTTPОтвет.ПолучитьТелоКакСтроку()) <> Неопределено Тогда
		ДанныеJSON = ПрочитатьОтвет(HTTPОтвет.ПолучитьТелоКакСтроку());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка! " + ДанныеJSON.error + " (" + HTTPОтвет.КодСостояния + ")'");
		ЗаписатьСобытиеВЖурналРегистрации( ,РезультатВыполнения.ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка);
		Возврат РезультатВыполнения;
	Иначе
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка! Не удалось установить соединение с сервером (" + HTTPОтвет.КодСостояния + " по причине " + HTTPОтвет.ПолучитьТелоКакСтроку() + ")'");
		ЗаписатьСобытиеВЖурналРегистрации( ,РезультатВыполнения.ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Если ДанныеJSON <> Неопределено И ДанныеJSON.Свойство("error") Тогда  
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка сервера - '")+ДанныеJSON.error;
		ЗаписатьСобытиеВЖурналРегистрации( ,РезультатВыполнения.ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка);
	ИначеЕсли ДанныеJSON <> Неопределено Тогда 
		РезультатВыполнения.ДанныеJSON = ДанныеJSON;
		РезультатВыполнения.ТекстJSON = ТекстJSON;
		РезультатВыполнения.РезультатВыполненияЗапроса = Истина;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
		
КонецФункции

Функция ПрочитатьОтвет(ОтветСервера)
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСервера);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		
		Возврат ДанныеJSON;
		
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка чтения ответа от сервера: " + ОтветСервера + "'");
		Сообщить(ТекстОшибки);
		ЗаписатьСобытиеВЖурналРегистрации( ,ТекстОшибки , УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецФункции

Функция ТестПодключения() Экспорт
	
	Возврат ВыполнитьHTTPЗапрос("ping",, "GET", 5);
	
КонецФункции

Функция ПолучитьШаблоныКонтактов()Экспорт
	
	РезультатВыполнения = ВыполнитьHTTPЗапрос("contact/templates?isCompany=false", , "GET");
	
	Если РезультатВыполнения.ДанныеJSON <> Неопределено Тогда
		Возврат РезультатВыполнения.ДанныеJSON.templates;
	КонецЕсли; 
	
	Возврат Новый Массив();
	
КонецФункции

Функция ПолучитьШаблоныКомпаний()Экспорт
	
	РезультатВыполнения = ВыполнитьHTTPЗапрос("contact/templates?isCompany=true", , "GET");
	
	Если РезультатВыполнения.ДанныеJSON <> Неопределено Тогда
		Возврат РезультатВыполнения.ДанныеJSON.templates;
	КонецЕсли; 
	
	Возврат Новый Массив();
	
КонецФункции

Функция ПолучитьПользовательскиеПоля()Экспорт
	
	РезультатВыполнения = ВыполнитьHTTPЗапрос("customfield/contact", , "GET");
	
	Если РезультатВыполнения.ДанныеJSON <> Неопределено Тогда
		Возврат РезультатВыполнения.ДанныеJSON.customfields;
	КонецЕсли; 
	
	Возврат Новый Массив();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
Функция ПолучитьСлужебныеДанные() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	СлужебныеДанные = Новый Структура;
	СлужебныеДанные.Вставить("ВерсияПлатформы"			, СистемнаяИнформация.ВерсияПриложения);
	СлужебныеДанные.Вставить("НазваниеКонфигурации"		, Метаданные.Синоним);
	СлужебныеДанные.Вставить("ИмяКонфигурации"			, Метаданные.Имя);
	СлужебныеДанные.Вставить("ВерсияКонфигурации"		, Метаданные.Версия);
	СлужебныеДанные.Вставить("ВерсияВнешнейОбработки"	, СведенияОВнешнейОбработке().Версия);
	СлужебныеДанные.Вставить("ИдентификаторИБ"	    	, ПолучитьУникальныйИдентификаторИБ());
	СлужебныеДанные.Вставить("РазмерПорции"	    	    , 100); // Количество записей данных в одном запросе
	СлужебныеДанные.Вставить("ЭтоУТКА"	    			, Ложь);
	СлужебныеДанные.Вставить("ЭтоУНФ"	    			, Ложь);
	СлужебныеДанные.Вставить("ЭтоБП"	    			, Ложь);
	
	Если Метаданные.Имя = "УправлениеТорговлей" 
		ИЛИ Метаданные.Имя = "УправлениеПредприятием"
		ИЛИ Метаданные.Имя = "КомплекснаяАвтоматизация" 
		ИЛИ Метаданные.Имя = "КомплекснаяАвтоматизацияДляБеларуси" Тогда
		
		СлужебныеДанные.Вставить("ЭтоУТКА", Истина);	
	ИначеЕсли Метаданные.Имя = "УправлениеНебольшойФирмой" 
		ИЛИ Метаданные.Имя = "УправлениеНебольшойФирмойДляУкраины" Тогда
		
		СлужебныеДанные.Вставить("ЭтоУНФ", Истина);
	ИначеЕсли Метаданные.Имя = "БухгалтерияПредприятия" Тогда 
		
		СлужебныеДанные.Вставить("ЭтоБП", Истина);
	КонецЕсли;
	
	Возврат СлужебныеДанные;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьУникальныйИдентификаторИБ
//
// Описание: Генерируем GUID для текущей информационной базы и сохраняем его в стандартном хранилище настроек
//
// Возвращаемое значение: GUID (строка)
//
Функция ПолучитьУникальныйИдентификаторИБ()
	
	КлючОбъекта = "НастройкаОбменаСPlanfixGUID";
	КлючНастроек = "УникальныйИдентификаторИБ";
	ИмяПользователяНастроек = "planfix-1c.ru";
	GUID = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователяНастроек);
	
	Если GUID = Неопределено Тогда
		GUID = Новый УникальныйИдентификатор();
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, GUID, , ИмяПользователяНастроек);
	КонецЕсли; 
	
	Возврат GUID;
	
КонецФункции 

Функция ПолучитьТекстСообщенияРезультатаВыполнения(Результат)
	ТекстСообщения = "";
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РезультатВыгрузки") Тогда
		
		Если Результат.РезультатВыгрузки.Результат Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru=' Выгрузка данных выполнена. Выгружено " + Результат.РезультатВыгрузки.КоличествоЗаписей + " записей';
									|en = ' Data upload completed. Upload " + Результат.РезультатВыгрузки.КоличествоЗаписей + " items'");
		Иначе
			ТекстСообщения = ТекстСообщения + НСтр("ru=' Выгрузка данных не выполнена.';
									|en = ' Data upload failed.'");
		КонецЕсли;	
	КонецЕсли; 
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РезультатЗагрузки")Тогда
		
		Если Результат.Свойство("РезультатЗагрузки") И Результат.РезультатЗагрузки.Результат Тогда 
			ТекстСообщения = ТекстСообщения + НСтр("ru=' Загрузка данных выполнена. Загружено " + Результат.РезультатЗагрузки.КоличествоЗаписей + " записей';
									|en = ' Data loading completed. Load " + Результат.РезультатЗагрузки.КоличествоЗаписей + " items'");
		Иначе 
			ТекстСообщения = ТекстСообщения + НСтр("ru=' Загрузка данных не выполнена.';
									|en = ' Data download failed.'");
		КонецЕсли;	
	КонецЕсли;
	Возврат ТекстСообщения;
КонецФункции

Функция ПолучитьНаименованиеОбъектаИзJSON(КонтактJSON)
	Если СлужебныеДанные.ЭтоУТКА ИЛИ  СлужебныеДанные.ЭтоБП Тогда
		
		// Контакт
		Если КонтактJSON.Свойство("isCompany") И Не КонтактJSON.isCompany Тогда
			Наименование = СокрЛП(КонтактJSON.lastname) + " " +  СокрЛП(КонтактJSON.name) + " " +  СокрЛП(КонтактJSON.midname);
		Иначе 
			Наименование = КонтактJSON.name;
		КонецЕсли;
	ИначеЕсли СлужебныеДанные.ЭтоУНФ Тогда
		
		// Тут для контакта в программе Имя Фамиля указано, хотя правильнее было бы как и везеде ФИО, оставляем пока ФИО, т. к. при обмене мы их скорее всего поменяли местами
		// Контакт
		Если  КонтактJSON.Свойство("isCompany") И Не КонтактJSON.isCompany Тогда
			Наименование =  СокрЛП(КонтактJSON.lastname) + " " +  СокрЛП(КонтактJSON.name) + " " +  СокрЛП(КонтактJSON.midname);
		Иначе 
			Наименование = КонтактJSON.name;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛП(Наименование);
КонецФункции

Процедура ЗаписатьСтруктуруНаименованияОбъектаВJSON(Ссылка, ЗаписьJSON)
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	
	Если СлужебныеДанные.ЭтоУТКА  Тогда
		
		СтруктураНаименования = Новый Структура();
		
		Если (ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") 
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры")) 
			И Ссылка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
			
			СтуктураНаименования =  ФизическиеЛицаКлиентСервер.ЧастиИмени(Ссылка.НаименованиеПолное); 
			
			// Если в наименовании только одно слово, считаем его именем
			Если СтуктураНаименования.Имя = Неопределено Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));	
			Иначе 
				ЗаписьJSON.ЗаписатьИмяСвойства("lastname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Имя = Неопределено, "", СтуктураНаименования.Имя));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("midname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Отчество = Неопределено, "", СтуктураНаименования.Отчество));
			КонецЕсли;
						
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			СтуктураНаименования =  ФизическиеЛицаКлиентСервер.ЧастиИмени(Ссылка.Наименование);
			
			// Если в наименовании только одно слово, считаем его именем
			Если СтуктураНаименования.Имя = Неопределено Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));	
			Иначе 
				ЗаписьJSON.ЗаписатьИмяСвойства("lastname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Имя = Неопределено, "", СтуктураНаименования.Имя));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("midname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Отчество = Неопределено, "", СтуктураНаименования.Отчество));
			КонецЕсли;
		Иначе 
			
			ЗаписьJSON.ЗаписатьИмяСвойства("name");
			ЗаписьJSON.ЗаписатьЗначение(Ссылка.Наименование);
			
		КонецЕсли;
		
	ИначеЕсли СлужебныеДанные.ЭтоУНФ Тогда
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") 
			И Ссылка.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
			
			СтуктураНаименования =  ФизическиеЛицаКлиентСервер.ЧастиИмени(Ссылка.Наименование); 
			
			// Если в наименовании только одно слово, считаем его именем
			Если СтуктураНаименования.Имя = Неопределено Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));	
			Иначе 
				ЗаписьJSON.ЗаписатьИмяСвойства("lastname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Имя = Неопределено, "", СтуктураНаименования.Имя));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("midname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Отчество = Неопределено, "", СтуктураНаименования.Отчество));
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("КонтактноеЛицо", Ссылка,,);
			
			// Тут пробуем взять ФИО у контрагента, если это не юр. лицо
			Если Не Контрагент.Пустая() И Контрагент.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
				СтуктураНаименования =  ФизическиеЛицаКлиентСервер.ЧастиИмени(Контрагент.Наименование);
			Иначе 
				// Молодцы разрабы УНФ, у всех справочников ФИО, а тут ИФ, причем писать можно как угодно на самом деле, как такое парсить только они знают
				СтуктураНаименования = Новый Структура("Фамилия, Имя, Отчество");
				ЧастиИмени = СтрРазделить(Ссылка.Наименование, " ", Ложь);
				
				// Пойдем по пути - если в наименование до двух слов, считаем что это внесено в УНФ и там Имя Фамилия
				Если ЧастиИмени.Количество() >= 1 Тогда
					СтуктураНаименования.Имя = ЧастиИмени[0];
				КонецЕсли;
				
				Если ЧастиИмени.Количество() >= 2 Тогда
					СтуктураНаименования.Фамилия = ЧастиИмени[1];
				КонецЕсли;
				
				// Если три и более слов, считаем что это импорт из ПФ и там ФИО
				Если ЧастиИмени.Количество() >= 3 Тогда
					СтуктураНаименования.Фамилия = ЧастиИмени[0];
					СтуктураНаименования.Имя = ЧастиИмени[1];
					СтуктураНаименования.Отчество = ЧастиИмени[2];
				КонецЕсли;
			КонецЕсли; 
						
			// Если в наименовании только одно слово, считаем его именем
			Если СтуктураНаименования.Имя = Неопределено Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Имя = Неопределено, "", СтуктураНаименования.Имя));	
			Иначе 
				ЗаписьJSON.ЗаписатьИмяСвойства("lastname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Имя = Неопределено, "", СтуктураНаименования.Имя));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("midname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Отчество = Неопределено, "", СтуктураНаименования.Отчество));
			КонецЕсли;
			
		Иначе 
			
			ЗаписьJSON.ЗаписатьИмяСвойства("name");
			ЗаписьJSON.ЗаписатьЗначение(Ссылка.Наименование);
		КонецЕсли;
	ИначеЕсли  СлужебныеДанные.ЭтоБП Тогда
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") 
			И Ссылка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда 
			
			СтуктураНаименования =  ФизическиеЛицаКлиентСервер.ЧастиИмени(Ссылка.НаименованиеПолное); 
			
			// Если в наименовании только одно слово, считаем его именем
			Если СтуктураНаименования.Имя = Неопределено Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));	
			Иначе 
				ЗаписьJSON.ЗаписатьИмяСвойства("lastname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Имя = Неопределено, "", СтуктураНаименования.Имя));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("midname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Отчество = Неопределено, "", СтуктураНаименования.Отчество));
			КонецЕсли;
						
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			СтуктураНаименования =  ФизическиеЛицаКлиентСервер.ЧастиИмени(Ссылка.Наименование);
			
			// Если в наименовании только одно слово, считаем его именем
			Если СтуктураНаименования.Имя = Неопределено Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));	
			Иначе 
				ЗаписьJSON.ЗаписатьИмяСвойства("lastname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Фамилия = Неопределено, "", СтуктураНаименования.Фамилия));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Имя = Неопределено, "", СтуктураНаименования.Имя));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("midname");
				ЗаписьJSON.ЗаписатьЗначение(?(СтуктураНаименования.Отчество = Неопределено, "", СтуктураНаименования.Отчество));
			КонецЕсли;
		Иначе 
			
			ЗаписьJSON.ЗаписатьИмяСвойства("name");
			ЗаписьJSON.ЗаписатьЗначение(Ссылка.Наименование);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкиПодключения()
	
	КлючОбъекта = "НастройкаОбменаСPlanfix";
	КлючНастроек = "_НастройкиПодключения";
	ИмяПользователяНастроек = "planfix-1c.ru";
	НастройкиПодключения = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователяНастроек);
	
	Возврат НастройкиПодключения;
	
КонецФункции 

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// Схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// Строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// Информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// Логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// Хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСтруктуруМетаданныхДляОбмена
//
// Описание: Возвращает структуру объектов метаданных конфигурации в зависимости от версии прикладного решения(ТипОбъекта, ИмяОбъекта)
//
// Возвращаемое значение: Структура
//
Функция ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные) Экспорт
	
	СтруктураМетаданных = Новый Структура();
	
	Если СлужебныеДанные.ЭтоУТКА Тогда
		
		// В зависимости от настроек, только партнеры или контрагент + партнер как общая сущность
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов")Тогда
			СтруктураМетаданных.Вставить("contacts", Новый Структура());
			СтруктураМетаданных.contacts.Вставить("ИмяОбъекта", "Контрагенты");
			СтруктураМетаданных.contacts.Вставить("ТипОбъекта", "Справочник");
			СтруктураМетаданных.contacts.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.Контрагенты");
			СтруктураМетаданных.contacts.Вставить("ИмяТаблицыБд", "Справочник.Контрагенты");
		Иначе 
			СтруктураМетаданных.Вставить("contacts", Новый Структура());
			СтруктураМетаданных.contacts.Вставить("ИмяОбъекта", "Партнеры");
			СтруктураМетаданных.contacts.Вставить("ТипОбъекта", "Справочник");
			СтруктураМетаданных.contacts.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.Партнеры");
			СтруктураМетаданных.contacts.Вставить("ИмяТаблицыБд", "Справочник.Партнеры");
		КонецЕсли; 
		
		// Контактные лица как отдельная сущность
		СтруктураМетаданных.Вставить("contact_persons", Новый Структура());
		СтруктураМетаданных.contact_persons.Вставить("ИмяОбъекта", "КонтактныеЛицаПартнеров");
		СтруктураМетаданных.contact_persons.Вставить("ТипОбъекта", "Справочник");
		СтруктураМетаданных.contact_persons.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.КонтактныеЛицаПартнеров");
		СтруктураМетаданных.contact_persons.Вставить("ИмяТаблицыБд", "Справочник.КонтактныеЛицаПартнеров");
		
	ИначеЕсли СлужебныеДанные.ЭтоУНФ ИЛИ СлужебныеДанные.ЭтоБП Тогда
		
		СтруктураМетаданных.Вставить("contacts", Новый Структура());
		СтруктураМетаданных.contacts.Вставить("ИмяОбъекта", "Контрагенты");
		СтруктураМетаданных.contacts.Вставить("ТипОбъекта", "Справочник");
		СтруктураМетаданных.contacts.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.Контрагенты");
		СтруктураМетаданных.contacts.Вставить("ИмяТаблицыБд", "Справочник.Контрагенты");
		
		// Контактные лица как отдельная сущность
		СтруктураМетаданных.Вставить("contact_persons", Новый Структура());
		СтруктураМетаданных.contact_persons.Вставить("ИмяОбъекта", "КонтактныеЛица");
		СтруктураМетаданных.contact_persons.Вставить("ТипОбъекта", "Справочник");
		СтруктураМетаданных.contact_persons.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.КонтактныеЛица");
		СтруктураМетаданных.contact_persons.Вставить("ИмяТаблицыБд", "Справочник.КонтактныеЛица");
	КонецЕсли;
	
	Возврат СтруктураМетаданных;
КонецФункции

Функция ПолучитьПорциюДанныхДляОбмена(СтруктураОбъектаМетаданных, КоличествоЭлементов , ПоследняяСсылка, НастройкаСопоставленияДанных) Экспорт
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоследняяСсылка",ПоследняяСсылка);
	
	// УНФ текст запроса для справочника КонтактныеЛица
	Если  СлужебныеДанные.ЭтоУНФ И СтруктураОбъектаМетаданных.ИмяТаблицыБд = "Справочник.КонтактныеЛица" Тогда 
		Запрос.Текст = "ВЫБРАТЬ " + ?(КоличествоЭлементов = 0,"", "ПЕРВЫЕ " + Формат(КоличествоЭлементов, "ЧГ="))+
		"
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	КонтактныеЛица.ВерсияДанных КАК ВерсияДанных,
		|	КонтактныеЛица.ПометкаУдаления КАК ПометкаУдаления,
		|	КонтактныеЛица.Родитель КАК Родитель,
		|	КонтактныеЛица.ЭтоГруппа КАК ЭтоГруппа,
		|	КонтактныеЛица.Код КАК Код,
		|	КонтактныеЛица.Наименование КАК Наименование,";
		
		Если СлужебныеДанные.ИмяКонфигурации <> "УправлениеНебольшойФирмойДляУкраины" Тогда
			Запрос.Текст = Запрос.Текст + "	
			|	КонтактныеЛица.АдресЭПДляПоиска КАК АдресЭПДляПоиска,
			|	КонтактныеЛица.НомерТелефонаДляПоиска КАК НомерТелефонаДляПоиска,";
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "	
		|	КонтактныеЛица.ГруппаДоступа КАК ГруппаДоступа,
		|	КонтактныеЛица.ДатаРождения КАК ДатаРождения,
		|	КонтактныеЛица.ДатаСоздания КАК ДатаСоздания,
		|	КонтактныеЛица.ДокументУдостоверяющийЛичность КАК ДокументУдостоверяющийЛичность,
		|	КонтактныеЛица.ИсточникПривлечения КАК ИсточникПривлечения,
		|	КонтактныеЛица.Комментарий КАК Комментарий,
		|	КонтактныеЛица.Недействителен КАК Недействителен,
		|	КонтактныеЛица.ОсновныеСведения КАК ОсновныеСведения,
		|	КонтактныеЛица.Ответственный КАК Ответственный,
		|	КонтактныеЛица.Пол КАК Пол,
		|	КонтактныеЛица.СписокРолей КАК СписокРолей,
		|	КонтактныеЛица.УдалитьДолжность КАК УдалитьДолжность,
		|	КонтактныеЛица.УдалитьРеквизитДопУпорядочивания КАК УдалитьРеквизитДопУпорядочивания,
		|	КонтактныеЛица.Роли.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Роль КАК Роль
		|	) КАК Роли,
		|	КонтактныеЛица.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	КонтактныеЛица.ДополнительныеРеквизиты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Свойство КАК Свойство,
		|		Значение КАК Значение,
		|		ТекстоваяСтрока КАК ТекстоваяСтрока
		|	) КАК ДополнительныеРеквизиты,
		|	КонтактныеЛица.Теги.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тег КАК Тег
		|	) КАК Теги,
		|	КонтактныеЛица.Предопределенный КАК Предопределенный,
		|	КонтактныеЛица.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	КонтактныеЛица.Представление КАК Представление
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты";
		
		Если  СлужебныеДанные.ИмяКонфигурации <> "УправлениеНебольшойФирмойДляУкраины" Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ПО КонтактныеЛица.Ссылка = Контрагенты.КонтактноеЛицо";	
		Иначе 	
			Запрос.Текст = Запрос.Текст + "
			| 		ПО КонтактныеЛица.Владелец = Контрагенты.Ссылка";
		КонецЕсли; 
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	КонтактныеЛица.Ссылка > &ПоследняяСсылка
		|	И КонтактныеЛица.ЭтоГруппа = ЛОЖЬ
		|	И Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ЮридическоеЛицо)
		|	"+ ? (НастройкаСопоставленияДанных.ВыгружатьПомеченныеНаУдаление, "", "И НЕ КонтактныеЛица.ПометкаУдаления")+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактныеЛица.Ссылка";
	// БП	
	ИначеЕсли СлужебныеДанные.ЭтоБП И СтруктураОбъектаМетаданных.ИмяТаблицыБд = "Справочник.КонтактныеЛица" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ " + ?(КоличествоЭлементов = 0,"", "ПЕРВЫЕ " + Формат(КоличествоЭлементов, "ЧГ="))+
		"
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	КонтактныеЛица.ВерсияДанных КАК ВерсияДанных,
		|	КонтактныеЛица.ПометкаУдаления КАК ПометкаУдаления,
		|	КонтактныеЛица.Фамилия КАК Фамилия,
		|	КонтактныеЛица.Имя КАК Имя,
		|	КонтактныеЛица.Отчество КАК Отчество,
		|	КонтактныеЛица.ДатаРождения КАК ДатаРождения,
		|	КонтактныеЛица.Описание КАК Описание,
		|	КонтактныеЛица.Должность КАК Должность,
		|	КонтактныеЛица.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	КонтактныеЛица.ДополнительныеРеквизиты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Свойство КАК Свойство,
		|		Значение КАК Значение,
		|		ТекстоваяСтрока КАК ТекстоваяСтрока
		|	) КАК ДополнительныеРеквизиты
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		| 		ПО КонтактныеЛица.ОбъектВладелец = Контрагенты.Ссылка
		|ГДЕ
		|	КонтактныеЛица.Ссылка > &ПоследняяСсылка
		|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|	"+ ? (НастройкаСопоставленияДанных.ВыгружатьПомеченныеНаУдаление, "", "И НЕ КонтактныеЛица.ПометкаУдаления")+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактныеЛица.Ссылка";

			
	// Универсальный текст запроса	
	Иначе 
		
		Запрос.Текст = "ВЫБРАТЬ " + ?(КоличествоЭлементов = 0,"", "ПЕРВЫЕ " + Формат(КоличествоЭлементов, "ЧГ="))+
		"
		|	*
		|ИЗ
		|	" + СтруктураОбъектаМетаданных.ИмяТаблицыБд + " КАК ТаблицаОбъекта 
		|ГДЕ
		|   ТаблицаОбъекта.Ссылка > &ПоследняяСсылка И УсловиеГруппы И ДопУсловие 
		|	"+ ? (НастройкаСопоставленияДанных.ВыгружатьПомеченныеНаУдаление, "", "И НЕ ТаблицаОбъекта.ПометкаУдаления")+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОбъекта.Ссылка";
	КонецЕсли; 
	
	Если Метаданные.НайтиПоПолномуИмени(СтруктураОбъектаМетаданных.ИмяТаблицыБд).Иерархический 
			И Метаданные.НайтиПоПолномуИмени(СтруктураОбъектаМетаданных.ИмяТаблицыБд).ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловиеГруппы", "ТаблицаОбъекта.ЭтоГруппа = Ложь");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловиеГруппы", "Истина");
	КонецЕсли;
	Запрос.Текст = УстановитьДополнительныеУсловияВыборкиПоИмениТаблицы(СлужебныеДанные, Запрос.Текст, СтруктураОбъектаМетаданных.ИмяТаблицыБд);
		
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции
 
Функция УстановитьДополнительныеУсловияВыборкиПоИмениТаблицы(СлужебныеДанные, ТекстЗапроса, ИмяТаблицыБд);
	// Контактные лица только компаний
	Если ИмяТаблицыБд = "Справочник.КонтактныеЛицаПартнеров" Тогда //УТКА
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДопУсловие", "ТаблицаОбъекта.Владелец.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.Компания)");
	ИначеЕсли СлужебныеДанные.ЭтоУНФ И ИмяТаблицыБд = "Справочник.КонтактныеЛица" Тогда //УНФ
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДопУсловие", "Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ЮридическоеЛицо)");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДопУсловие", "Истина");
	КонецЕсли; 
	
	Возврат ТекстЗапроса
КонецФункции

Функция ПолучитьНастройкуСопоставленияДанных(ИмяЗагружаемогоОбъектаПанфикс) Экспорт
	
	// Для контактных лиц те же настройки
	Если ИмяЗагружаемогоОбъектаПанфикс = "contact_persons" Тогда
		ИмяКлючаНастроек = "contacts";
	Иначе 
		ИмяКлючаНастроек = ИмяЗагружаемогоОбъектаПанфикс;
	КонецЕсли; 
	
	КлючОбъекта = "НастройкаСопоставленияДанныхСPlanfix";
	КлючНастроек = "НастройкаСопоставленияДанных_"+ИмяКлючаНастроек;
	ИмяПользователяНастроек = "planfix-1c.ru";
	НастройкаСопоставленияДанных = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователяНастроек);
	
	СтруктураНастройкиОбъекта = Новый Структура ();
	
	Если ИмяКлючаНастроек = "contacts" Тогда
		// обшие настроки
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ШаблонКонтактаВPlanfix") Тогда
			СтруктураНастройкиОбъекта.Вставить("ШаблонКонтактаВPlanfix", НастройкаСопоставленияДанных.ШаблонКонтактаВPlanfix);	
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("ШаблонКонтактаВPlanfix", "");	
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ШаблонКомпанииВPlanfix") Тогда
			СтруктураНастройкиОбъекта.Вставить("ШаблонКомпанииВPlanfix", НастройкаСопоставленияДанных.ШаблонКомпанииВPlanfix);	
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("ШаблонКомпанииВPlanfix", "");	
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ОпцииИмпортаКонтактовВPlanfix") Тогда
			СтруктураНастройкиОбъекта.Вставить("ОпцииИмпортаКонтактовВPlanfix", НастройкаСопоставленияДанных.ОпцииИмпортаКонтактовВPlanfix);	
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("ОпцииИмпортаКонтактовВPlanfix", "");	
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПолеСовпаденияПриИмпортеКонтактовВPlanfix") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеКонтактовВPlanfix", НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКонтактовВPlanfix);	
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеКонтактовВPlanfix", "");	
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПользовательскоеПолеСовпаденияПриИмпортеВPlanfix") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеВPlanfix", НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеВPlanfix);	
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеВPlanfix", "");	
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПолеСовпаденияПриИмпортеОбъектаВPlanfixПоУмолчанию") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеОбъектаВPlanfixПоУмолчанию", НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВPlanfixПоУмолчанию);	
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеОбъектаВPlanfixПоУмолчанию", "");	
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ВыгружатьПомеченныеНаУдаление") Тогда
			СтруктураНастройкиОбъекта.Вставить("ВыгружатьПомеченныеНаУдаление", НастройкаСопоставленияДанных.ВыгружатьПомеченныеНаУдаление);
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("ВыгружатьПомеченныеНаУдаление", Ложь);
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ТаблицаСопоставленияПользовательскихПолейИРеквизитов") Тогда
			СтруктураНастройкиОбъекта.Вставить("ТаблицаСопоставленияПользовательскихПолейИРеквизитов", НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ТаблицаСопоставленияПользовательскихПолейИРеквизитов", Новый ТаблицаЗначений());
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ТаблицаСопоставленияВидовНомераТелефона") Тогда
			СтруктураНастройкиОбъекта.Вставить("ТаблицаСопоставленияВидовНомераТелефона", НастройкаСопоставленияДанных.ТаблицаСопоставленияВидовНомераТелефона);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ТаблицаСопоставленияВидовНомераТелефона", Новый ТаблицаЗначений());
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("СоздаватьОбъектыВ1С") Тогда
			СтруктураНастройкиОбъекта.Вставить("СоздаватьОбъектыВ1С", НастройкаСопоставленияДанных.СоздаватьОбъектыВ1С);
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("СоздаватьОбъектыВ1С", Ложь);
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ОбновлятьОбъектыВ1С") Тогда
			СтруктураНастройкиОбъекта.Вставить("ОбновлятьОбъектыВ1С", НастройкаСопоставленияДанных.ОбновлятьОбъектыВ1С);
		Иначе 
			СтруктураНастройкиОбъекта.Вставить("ОбновлятьОбъектыВ1С", Ложь);
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПолеСовпаденияПриИмпортеОбъектаВ1СПоУмолчанию") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеОбъектаВ1СПоУмолчанию", НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВ1СПоУмолчанию);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеОбъектаВ1СПоУмолчанию", "");
		КонецЕсли;
		
		// контакты
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПолеСовпаденияПриИмпортеКонтактовВ1С") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеКонтактовВ1С", НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКонтактовВ1С);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеКонтактовВ1С", "");
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С", НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С", "");
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С2") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С2", НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С2);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С2", "");
		КонецЕсли;
		
		//компании 
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПолеСовпаденияПриИмпортеКомпанийВ1С") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеКомпанийВ1С", НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКомпанийВ1С);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ПолеСовпаденияПриИмпортеКомпанийВ1С", "");
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С", НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С", "");
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С2") Тогда
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С2", НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С2);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКомпанийВ1С2", "");
		КонецЕсли;
		
		// контактные лица
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ЗагружатьОбновлятьКонтактныеЛицаИзКомпаний") Тогда
			СтруктураНастройкиОбъекта.Вставить("ЗагружатьОбновлятьКонтактныеЛицаИзКомпаний", НастройкаСопоставленияДанных.ЗагружатьОбновлятьКонтактныеЛицаИзКомпаний);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ЗагружатьОбновлятьКонтактныеЛицаИзКомпаний", Ложь);
		КонецЕсли;
		Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ВыгружатьКонтактныеЛицаКомпаний") Тогда
			СтруктураНастройкиОбъекта.Вставить("ВыгружатьКонтактныеЛицаКомпаний", НастройкаСопоставленияДанных.ВыгружатьКонтактныеЛицаКомпаний);
		Иначе
			СтруктураНастройкиОбъекта.Вставить("ВыгружатьКонтактныеЛицаКомпаний", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураНастройкиОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСоотвествиеСистемныхПолейPlanfix
//
// Описание: Возвращает соотвествие имен реквизитов 1С и системных полей в Planfix
//
Функция ПолучитьСоотвествиеСистемныхПолейPlanfix()
	
	СоотвествиеИмен = Новый Соответствие();
	//СоотвествиеИмен.Вставить("Наименование", "name"); //String  
	//СоотвествиеИмен.Вставить("Пол", "gender"); //Integer
	//СоотвествиеИмен.Вставить("Телефон", "workPhone"); //String
	//СоотвествиеИмен.Вставить("", "mobilePhone"); //String
	//СоотвествиеИмен.Вставить("", "homePhone"); //String
	//СоотвествиеИмен.Вставить("Адрес", "address"); //String
	//СоотвествиеИмен.Вставить("", "site"); //String
	//СоотвествиеИмен.Вставить("АдресЭлектроннойПочты", "email"); //String
	//СоотвествиеИмен.Вставить("", "skype"); //String
	//СоотвествиеИмен.Вставить("", "icq"); //String
	//СоотвествиеИмен.Вставить("", "isCompany"); //Boolean
	//СоотвествиеИмен.Вставить("", "companies"); //String
	//СоотвествиеИмен.Вставить("", "companyContacts"); //String
	СоотвествиеИмен.Вставить("ДополнительнаяИнформация", "description"); //String
	СоотвествиеИмен.Вставить("ДатаРождения", "birthDate"); //LocalDate
	
	Возврат СоотвествиеИмен;
	
КонецФункции 
 
Функция НормализоватьНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

Функция ПолучитьВидНомераТелефона(НастройкаСопоставленияДанных, ИдентификаторТипаПФ, ОбъектСсылка)
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	
	// Ищем предопределенные, если не найдем в настройках потом, определяем группу для поиска в настройках
	Если ОбъектСсылка.Метаданные().Имя = "Контрагенты" Тогда
		ВидНомераТелефонаПредопределенный = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ГруппаВидов = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты;
	ИначеЕсли ОбъектСсылка.Метаданные().Имя = "Партнеры" Тогда
		ВидНомераТелефонаПредопределенный = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		ГруппаВидов = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	ИначеЕсли ОбъектСсылка.Метаданные().Имя = "КонтактныеЛицаПартнеров" Тогда
		Если ИдентификаторТипаПФ = 1 Тогда	
			ВидНомераТелефонаПредопределенный = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;	
		Иначе  
			ВидНомераТелефонаПредопределенный = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;	
		КонецЕсли;
		ГруппаВидов = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли СлужебныеДанные.ЭтоУНФ И ОбъектСсылка.Метаданные().Имя = "КонтактныеЛица" Тогда
		ВидНомераТелефонаПредопределенный = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		ГруппаВидов = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица;
	ИначеЕсли СлужебныеДанные.ЭтоБП И ОбъектСсылка.Метаданные().Имя = "КонтактныеЛица" Тогда
		Если ИдентификаторТипаПФ = 1 Тогда	
			ВидНомераТелефонаПредопределенный = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица;	
		Иначе  
			ВидНомераТелефонаПредопределенный = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица;	
		КонецЕсли;
		ГруппаВидов = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица;
	КонецЕсли;
	
	// Ищем сначала в настройках
	МассивСтрок = НастройкаСопоставленияДанных.ТаблицаСопоставленияВидовНомераТелефона.НайтиСтроки(
	Новый Структура("ВидНомераТелефонаПФ, ", ИдентификаторТипаПФ));
	
	Если МассивСтрок.Количество() > 0 Тогда
		Для каждого СтрокаНастройки Из  МассивСтрок Цикл
			Если СтрокаНастройки.ВидНомераТелефонаКИ.Родитель = ГруппаВидов Тогда
				ВидНомераТелефона = СтрокаНастройки.ВидНомераТелефонаКИ;		
			КонецЕсли; 
		КонецЦикла; 					
	КонецЕсли;
	
	// Если не нашли используем предопределенную
	Если ВидНомераТелефона = Неопределено Тогда
		ВидНомераТелефона = ВидНомераТелефонаПредопределенный;		
	КонецЕсли; 
	
	// Разрешаем ввод нескольких значений чтобы не потерять данные
	Если Не ВидНомераТелефона.РазрешитьВводНесколькихЗначений Тогда
		ВидНомераТелефонаОбъект = ВидНомераТелефона.ПолучитьОбъект();
		ВидНомераТелефонаОбъект.РазрешитьВводНесколькихЗначений = Истина;
		ВидНомераТелефонаОбъект.Записать();
	КонецЕсли; 
	
	Возврат ВидНомераТелефона;
	
КонецФункции

Функция ПолучитьТипСправочникаКонтактныхЛиц()
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	Если СлужебныеДанные.ЭтоУТКА Тогда
		
		Возврат Тип("СправочникСсылка.КонтактныеЛицаПартнеров");
	ИначеЕсли СлужебныеДанные.ЭтоУНФ ИЛИ СлужебныеДанные.ЭтоБП Тогда
		
		Возврат Тип("СправочникСсылка.КонтактныеЛица");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьGUID(ОбъектJSON)
	Если СтрНайти(ОбъектJSON.sourceObjectId,"contact_persons_") > 0  Тогда
		sourceObjectId = СтрЗаменить(ОбъектJSON.sourceObjectId,"contact_persons_", ""); 
	ИначеЕсли СтрНайти(ОбъектJSON.sourceObjectId,"__") > 0 Тогда  
		// идентификаторПартнера_идентификаторКонтрагента
		sourceObjectId = Прав(ОбъектJSON.sourceObjectId, 36);	
	Иначе 
		sourceObjectId = ОбъектJSON.sourceObjectId;
	КонецЕсли; 
	
	Возврат  Новый УникальныйИдентификатор(sourceObjectId);
КонецФункции

Процедура ДобавитьТелефонВКИ(НастройкаСопоставленияДанных, ОбъектКИСсылка, СтрокаТелефон)
	СтрокаКИ = ОбъектКИСсылка.КонтактнаяИнформация.Добавить(); 
	СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтрокаКИ.Вид = ПолучитьВидНомераТелефона(НастройкаСопоставленияДанных, СтрокаТелефон.type, ОбъектКИСсылка.Ссылка);
	СтрокаКИ.НомерТелефона = НормализоватьНомерТелефона(СтрокаТелефон.number);
	СтрокаКИ.Представление = СтрокаТелефон.maskedNumber;
	СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
	СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
КонецПроцедуры

Процедура УдалитьТелефонИзКИ(ОбъектКИСсылка, СтрокаТелефон)
	Отбор = Новый Структура();
	Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Отбор.Вставить("НомерТелефона", НормализоватьНомерТелефона(СтрокаТелефон.number));
	
	МассивИскомыхСтрок = ОбъектКИСсылка.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Для каждого Строка Из  МассивИскомыхСтрок Цикл
		ОбъектКИСсылка.КонтактнаяИнформация.Удалить(Строка);
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия = Неопределено, ТекстСообщения, УровеньЖурнала = Неопределено)
	Если ИмяСобытия = Неопределено Тогда
		ИмяСобытия = НСтр("ru = 'Интеграция с Planfix. Обмен данными'");	
	КонецЕсли;
	Если УровеньЖурнала = Неопределено Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли; 
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурнала, , ,ТекстСообщения);
КонецПроцедуры

//Если наименование партнера и контрагента совпадают или схожи и у партнера только один контрагент, считаем их одной сущностью 
Функция ПартнерКонтрагентаИКонтрагентЭтаОднаСущность(Контрагент)
	Если Контрагент.Наименование = Контрагент.Партнер.Наименование Тогда
		Возврат Истина ;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ПартнерыКонтрагента
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|		ПО Контрагенты.Партнер = Партнеры.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование
		|ПОМЕСТИТЬ КонтрагентыПартнера
		|ИЗ
		|	ПартнерыКонтрагента КАК ПартнерыКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ПартнерыКонтрагента.Ссылка.Ссылка = Контрагенты.Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрагентыПартнера.Ссылка КАК Ссылка
		|ИЗ
		|	КонтрагентыПартнера КАК КонтрагентыПартнера
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПартнерыКонтрагента КАК ПартнерыКонтрагента
		|		ПО (ПартнерыКонтрагента.Ссылка.Наименование ПОДОБНО ""%"" + КонтрагентыПартнера.Наименование + ""%""
		|				ИЛИ КонтрагентыПартнера.Наименование ПОДОБНО ""%"" + ПартнерыКонтрагента.Ссылка.Наименование + ""%"")";
	
	Запрос.УстановитьПараметр("Ссылка", Контрагент.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество() = 1;	
		
КонецФункции

#КонецОбласти


