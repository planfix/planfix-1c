///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, Планфикс
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбъявлениеПеременных
перем СлужебныеДанные;
перем СтруктураМетаданных;
#КонецОбласти

#Область СведенияОВнешнейОбработке 

Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Модуль интеграции Планфикс");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.2.0");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Модуль обеспечивающий обмен данными между информационной базой 1С и системой Планфикс");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Открыть настройки", "ОктрытьФорму", "ОткрытиеФормы",  Ложь);
	ДобавитьКоманду(ТаблицаКоманд, "Выполнить обмен данными", "ВыполнитьОбмен", "ВызовСерверногоМетода",  Истина);
	РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
	
	Назначение = Новый Массив;
	Назначение.Добавить("Справочники.*"); 
	РегистрационныеДанные.Вставить("Назначение", Назначение);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	
	ТаблицаКоманд.Колонки.Добавить("Представление"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("Использование"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение" 	, ТипБулево);
	ТаблицаКоманд.Колонки.Добавить("Модификатор"		  	, ТипСтрока);
	
	Возврат ТаблицаКоманд;
	
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление			= Представление;
	НоваяКоманда.Идентификатор			= Идентификатор;
	НоваяКоманда.Использование			= Использование;
	НоваяКоманда.ПоказыватьОповещение	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор			= Модификатор;
	
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	
	Если ИдентификаторКоманды = "ВыполнитьОбмен" Тогда
		ВыполнитьОбменДаннымиСПланфикс();
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ОбменДанными

Функция ВыполнитьОбменДаннымиСПланфикс() Экспорт
	СтруктураРезультатовВыгрузки = Новый Структура("Результат, КоличествоЗаписей", Ложь, 0);
	СтруктураРезультатовЗагрузки = Новый Структура("Результат, КоличествоЗаписей", Ложь, 0);
	РезультатВыполнения = Новый Структура("РезультатВыгрузки, РезультатЗагрузки, ОписаниеОшибкиВыгрузки,ОписаниеОшибкиЗагрузки,ОписаниеОшибки",
	СтруктураРезультатовВыгрузки,
	СтруктураРезультатовЗагрузки,
	"",
	"",
	"");
	
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Если СтруктураМетаданных.Количество() = 0 Тогда
		РезультатВыполнения.ОписаниеОшибки(НСтр("ru='Ошибка. Данная конфигурация не поддерживается'"));
		Возврат РезультатВыполнения;
	КонецЕсли; 
	
	ДопПараметрыЗапроса = "&sourceId="+СлужебныеДанные.ИдентификаторИБ;
	
	// количество записей данных в одном запросе
	РазмерПорции = 100;
	
	// выгружаем данные по каждому объекту метаданных учавствующему в обмене
	Для каждого  СтруктураОбъектаМетаданных Из СтруктураМетаданных Цикл
		МенеджерОбъекта = Новый (СтруктураОбъектаМетаданных.Значение.ИмяМенеджераОбъекта);
		
		ПоследняяСсылка = МенеджерОбъекта.ПустаяСсылка();
		НастройкаСопоставленияДанных = ПолучитьНастройкуСопоставленияДанных(СтруктураОбъектаМетаданных.Ключ);
		
		// для оптимизации работы с большими таблицами данных, выгрузку производим порциями рекурсивно
		ВыполнитьВыгрузкуДанныхРекурсивно(СтруктураОбъектаМетаданных, РазмерПорции, ПоследняяСсылка, РезультатВыполнения, НастройкаСопоставленияДанных);
		
		// загружать данные будем также порциями и рекурсивно
		// для контактов получаем данные в два захода сначала контакты, потом компании
		Если СтруктураОбъектаМетаданных.Ключ = "contacts" Тогда
			ИмяМетода = "contact/list";
			ВыполнитьЗагрузкуДанныхРекурсивно(СлужебныеДанные.ИдентификаторИБ, РезультатВыполнения, РазмерПорции, ИмяМетода, ДопПараметрыЗапроса);
			
			ДопПараметрыЗапроса = ДопПараметрыЗапроса + "&isCompany=true";
			ВыполнитьЗагрузкуДанныхРекурсивно(СлужебныеДанные.ИдентификаторИБ, РезультатВыполнения, РазмерПорции, ИмяМетода, ДопПараметрыЗапроса);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат РезультатВыполнения;
КонецФункции

#Область ВыгрузкаДанных

Функция ВыполнитьВыгрузкуДанныхРекурсивно(СтруктураОбъектаМетаданных, РазмерПорции, ПоследняяСсылка, РезультатВыполнения, НастройкаСопоставленияДанных)
	РезультатВыполненияЗапроса = ПолучитьПорциюДанныхДляОбмена(СтруктураОбъектаМетаданных.Значение, РазмерПорции, ПоследняяСсылка, НастройкаСопоставленияДанных.ВыгружатьПомеченныеНаУдаление);
	
	Если РезультатВыполненияЗапроса.Пустой() Тогда
		Возврат РезультатВыполнения;	
	КонецЕсли;
	
	ТаблицаВыгружаемыхДанных = РезультатВыполненияЗапроса.Выгрузить();
	ТекстJSON = СофрмироватьJSON(ТаблицаВыгружаемыхДанных, СтруктураОбъектаМетаданных.Ключ, СлужебныеДанные.ИдентификаторИБ, НастройкаСопоставленияДанных); 
	РезультатВыполнения.РезультатВыгрузки.КоличествоЗаписей = РезультатВыполнения.РезультатВыгрузки.КоличествоЗаписей + РазмерПорции;
	ПоследняяСсылка = ТаблицаВыгружаемыхДанных[ТаблицаВыгружаемыхДанных.Количество() - 1].Ссылка;
	РезультатВыполнения = ОтправитьДанные(ТекстJSON, РезультатВыполнения);	
	
	ВыполнитьВыгрузкуДанныхРекурсивно(СтруктураОбъектаМетаданных, РазмерПорции, ПоследняяСсылка, РезультатВыполнения, НастройкаСопоставленияДанных);
КонецФункции

Функция СофрмироватьJSON(ВыгрузкаРезультатаЗапроса, ИмяОбъектаПланфикс, ИдентификаторИБ, НастройкаСопоставленияДанных) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	СоотвествиеИменПолей = ПолучитьСоотвествиеСистемныхПолейПланфикс();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("sourceId");
	ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ИдентификаторИБ));
	
	//TODO вынести потом в отдельную функцию
	//заполняем общие свойства по типу объекта 
	Если ИмяОбъектаПланфикс = "contacts" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("contactTemplateId");
		ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ШаблонКонтактаВПланфикс);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("companyTemplateId");
		ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ШаблонКомпанииВПланфикс);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("optionImportDuplicate");
		ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ОпцииИмпортаКонтактовВПланфикс);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("optionImportUniqueField");
		ЗаписьJSON.ЗаписатьЗначение(НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКонтактовВПланфикс);
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяОбъектаПланфикс);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для каждого СтрокаТЗ Из ВыгрузкаРезультатаЗапроса Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого КолонкаТЗ Из ВыгрузкаРезультатаЗапроса.Колонки Цикл
			//некоторые общие свойства определяем и заполняем явно
			ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ);
			//пропускаем все поля для которых нет соотвествия или не заполнены явно
			Если СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//заполняем рекурсивно вложенные таблицы значений
			Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
				ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя],КолонкаТЗ.Имя);
				Продолжить;	  
			КонецЕсли;
		КонецЦикла;
		
		//TODO вынести потом в отдельную функцию
		//заполняем поля по типу объекта 
		Если ИмяОбъектаПланфикс = "contacts" Тогда
			
			//заполняем пользовательские поля по сопоставленным в настройках данным
			ТаблицаСопоставленияПолей = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов;
			Если ТаблицаСопоставленияПолей.Количество() > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("customFieldsData");
				ЗаписьJSON.ЗаписатьНачалоМассива();

					Для каждого КолонкаТЗ Из ВыгрузкаРезультатаЗапроса.Колонки Цикл
						СтрокаТаблицы = ТаблицаСопоставленияПолей.Найти(КолонкаТЗ.Имя, "ИмяРеквизитаОбъекта");
						
						//пропускаем все поля, для которых нет сопоставления 
						Если  СтрокаТаблицы = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						 	
							ЗаписьJSON.ЗаписатьНачалоОбъекта();
								ЗаписьJSON.ЗаписатьИмяСвойства("id");
								ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.ИдентификаторПоляВПланфикс);
										
								ЗаписьJSON.ЗаписатьИмяСвойства("value");
								ЗаписьJSON.ЗаписатьЗначение(СтрокаТЗ[КолонкаТЗ.Имя]);
														
							ЗаписьJSON.ЗаписатьКонецОбъекта();
					КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецМассива();
			КонецЕсли; 	
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла; 
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть(); 
	
КонецФункции

Процедура ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, ТаблицаЗначений, ИмяТаблицы)
	
	СоотвествиеИменПолей = ПолучитьСоотвествиеСистемныхПолейПланфикс();
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТаблицы);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого КолонкаТЗ Из ТаблицаЗначений.Колонки Цикл
			//некоторые общие свойства определяем и заполняем явно
			ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ);
			Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
				ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя], КолонкаТЗ.Имя);
				Продолжить;	
			КонецЕсли;
		КонецЦикла; 
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла; 
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ)
	
	Если КолонкаТЗ.Имя = "Ссылка" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("sourceObjectId");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя].УникальныйИдентификатор()));	
		
		ЗаписьJSON.ЗаписатьИмяСвойства("sourceDataVersion");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя].ВерсияДанных));	
		
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ПометкаУдаления" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("isDeleted");
		ЗаписьJSON.ЗаписатьЗначение(Булево(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "НаименованиеПолное" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> ""  Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение(СтрокаТЗ[КолонкаТЗ.Имя]);
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "Пол" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("sex");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			ЗаписьJSON.ЗаписатьЗначение("Male");
		ИначеЕсли	 СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Женский Тогда
			ЗаписьJSON.ЗаписатьЗначение("Female");
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение("NotDefined");
		КонецЕсли; 
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ДатаРождения" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> Дата(1, 1, 1) Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("birthDate");
		ЗаписьJSON.ЗаписатьЗначение(Формат(СтрокаТЗ[КолонкаТЗ.Имя],"ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "Комментарий"  И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> "" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("description");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;

	
	#Область УТ_КА_УП
	Если КолонкаТЗ.Имя = "ЮрФизЛицо" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.КомпанияЧастноеЛицо.Компания 
			ИЛИ СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ЮрФизЛицо.ЮрЛицо
			ИЛИ СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			ЗаписьJSON.ЗаписатьЗначение(Истина);
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
		КонецЕсли; 
	КонецЕсли;
	
	// данные партнера, если они ведутся отдельно от контрагентов
	Если КолонкаТЗ.Имя = "Партнер" 
		И Метаданные.Константы.Найти("ИспользоватьПартнеровИКонтрагентов") <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		
		ЗаписьJSON.ЗаписатьИмяСвойства("birthDate");
		ЗаписьJSON.ЗаписатьЗначение(Формат(СтрокаТЗ.Партнер.ДатаРождения,"ДФ=dd.MM.yyyy"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("sex");
		Если СтрокаТЗ.Партнер.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			ЗаписьJSON.ЗаписатьЗначение("Male");
		ИначеЕсли  СтрокаТЗ.Партнер.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			ЗаписьJSON.ЗаписатьЗначение("Female");
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение("NotDefined");
		КонецЕсли; 

		
	КонецЕсли; 
	// //Используем общее для всех конфигураций поле Комментарий
	//Если КолонкаТЗ.Имя = "ДополнительнаяИнформация" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> "" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("description");
	//	ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	//КонецЕсли;
	
	//В планфикс группа может быть только одна, надо подумать в будущем как тут реализовать
	
	//Если КолонкаТЗ.Имя = "Клиент" И МассивТиповКлиента.Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Клиент");
	//КонецЕсли;
	//
	//Если КолонкаТЗ.Имя = "Поставщик" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Поставщик");
	//КонецЕсли;

	//Если КолонкаТЗ.Имя = "Конкурент" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Конкурент");
	//КонецЕсли;
	#КонецОбласти
	
	#Область УНФ
	
	Если КолонкаТЗ.Имя = "ВидКонтрагента" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
			ЗаписьJSON.ЗаписатьЗначение(Истина);
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
		КонецЕсли; 
	КонецЕсли;
	
	//Если КолонкаТЗ.Имя = "Покупатель" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Клиент");
	//КонецЕсли;
	//
	//Если КолонкаТЗ.Имя = "Поставщик" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Поставщик");
	//КонецЕсли;
	
	#КонецОбласти
		
	Если КолонкаТЗ.Имя = "КонтактнаяИнформация" И ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений")  Тогда
		КонтактнаяИнформация = СтрокаТЗ[КолонкаТЗ.Имя];
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("address");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("phones");
			
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого СтрокаТелефон Из МассивПоиска  Цикл
				//пропускаем дублирующиеся записи
				Если Не ЗначениеЗаполнено(СтрокаТелефон.ЗначенияПолей) Тогда
					Продолжить;
				КонецЕсли; 
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
					ЗаписьJSON.ЗаписатьИмяСвойства("number");
					ЗаписьJSON.ЗаписатьЗначение(УбратьРазделителиВНомерТелефона(СтрокаТелефон.Представление));
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЦикла; 
			
			ЗаписьJSON.ЗаписатьКонецМассива()
		КонецЕсли;
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("email");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("site");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = КонтактнаяИнформация.НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Skype));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("skype");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ОтправитьДанные(ТекстJSON, РезультатВыполнения)
	РезультатЗапроса = ВыполнитьHTTPЗапрос("contact/import", ТекстJSON);
	РезультатВыполнения.РезультатВыгрузки.Результат = РезультатЗапроса.РезультатВыполненияЗапроса;
	РезультатВыполнения.ОписаниеОшибкиВыгрузки = РезультатЗапроса.ОписаниеОшибки; 
	Возврат РезультатВыполнения;
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

Функция ВыполнитьЗагрузкуДанныхРекурсивно(ИдентификаторИБ, РезультатВыполнения, РазмерПорции, ИмяМетода, ДопПараметрыЗапроса)
	ОтветТекстJSON = ПолучитьДанные(ИмяМетода, РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписей, РазмерПорции, ДопПараметрыЗапроса, РезультатВыполнения);
	
	Если ОтветТекстJSON = Неопределено Тогда
		Возврат РезультатВыполнения;
	КонецЕсли; 
	
	РезультатВыполнения = ОбработатьИЗагрузитьДанные(ОтветТекстJSON, ИдентификаторИБ, РезультатВыполнения);
	Смещение =  Смещение + РазмерПорции;
	
	ВыполнитьЗагрузкуДанныхРекурсивно(ИдентификаторИБ, РезультатВыполнения, РазмерПорции, ИмяМетода, ДопПараметрыЗапроса)
КонецФункции

Функция ПолучитьДанные(ИмяМетода, Смещение = 0 , РазмерПорции = 100, ДопПараметрыЗапроса, РезультатВыполнения)
	РезультатЗапроса = ВыполнитьHTTPЗапрос(ИмяМетода, "offset=" + Смещение + "&pageSize=" + РазмерПорции + ДопПараметрыЗапроса);
	
	РезультатВыполнения.РезультатЗагрузки.Результат = РезультатЗапроса.РезультатВыполненияЗапроса;
	РезультатВыполнения.ОписаниеОшибкиЗагрузки = РезультатЗапроса.ОписаниеОшибки; 
	
	Если РезультатЗапроса.ТекстJSON <> Неопределено И  РезультатЗапроса.ТекстJSON <> "" Тогда
		Возврат РезультатЗапроса.ТекстJSON;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ОбработатьИЗагрузитьДанные(ТекстJSON, ИдентификаторИБ, РезультатВыполнения) Экспорт
	
	ЧтениеJSON  = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	СтруктураДанныхJSON = ПрочитатьJSON(ЧтениеJSON);
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);

	Для каждого ЭлементДанныхJSON Из СтруктураДанныхJSON Цикл
		
		Если ЭлементДанныхJSON.Ключ = "sourceId" Тогда
			Если ЭлементДанныхJSON.Значение <> СокрЛП(ИдентификаторИБ) Тогда
				ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru='При обмене с Планфикс произошла ошибка, полученный идентификатор информационной базы не соотвествует идентификатору текущей базы'"), 
				УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект.Метаданные().ПолноеИмя(), , "Обратитесь в службу поддержки");
				РезультатВыполнения.РезультатЗагрузки.Результат = Ложь;
				РезультатВыполнения.ОписаниеОшибкиЗагрузки = НСтр("ru='При обмене с Планфикс произошла ошибка, полученный идентификатор информационной базы не соотвествует идентификатору текущей базы. Обратитесь в службу поддержки'");
				Возврат РезультатВыполнения;	
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		
		МенеджерОбъекта = Новый (СтруктураМетаданных[ЭлементДанныхJSON.Ключ].ИмяМенеджераОбъекта);
		НастройкаСопоставленияДанных = ПолучитьНастройкуСопоставленияДанных(ЭлементДанныхJSON.Ключ);
		
		Если Не НастройкаСопоставленияДанных.СоздаватьОбъектыВ1С И Не НастройкаСопоставленияДанных.ОбновлятьОбъектыВ1С Тогда
			Возврат РезультатВыполнения;
		КонецЕсли; 
		
		Для каждого ОбъектJSON Из ЭлементДанныхJSON.Значение Цикл
			
			Если ОбъектJSON.Свойство("sourceObjectId") И ЗначениеЗаполнено(ОбъектJSON.sourceObjectId) Тогда
				GUID = Новый УникальныйИдентификатор(ОбъектJSON.sourceObjectId);
				ОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(GUID);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОбъектJSON.sourceObjectId) ИЛИ Не ЗначениеЗаполнено(ОбъектСсылка.ВерсияДанных)Тогда 
				ОбъектСсылка = ПолучитьОбъектПоПравиламИмпорта(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON);
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ОбъектСсылка.ВерсияДанных) И НастройкаСопоставленияДанных.СоздаватьОбъектыВ1С Тогда
				ТекущийОбъект = МенеджерОбъекта.СоздатьЭлемент();
			ИначеЕсли ЗначениеЗаполнено(ОбъектСсылка.ВерсияДанных) И НастройкаСопоставленияДанных.ОбновлятьОбъектыВ1С Тогда 
				ТекущийОбъект = ОбъектСсылка.ПолучитьОбъект();
			Иначе 
				Прервать;	 
			КонецЕсли;
			
			ЗаполнитьЗначениеСвойствОбъекта(НастройкаСопоставленияДанных, ТекущийОбъект, ОбъектJSON);
			
			РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписей = РезультатВыполнения.РезультатЗагрузки.КоличествоЗаписей + 1;		
		КонецЦикла; 
	КонецЦикла; 
	
	РезультатВыполнения.РезультатЗагрузки.Результат = Истина;
	Возврат РезультатВыполнения;
КонецФункции

Функция ПолучитьОбъектПоПравиламИмпорта(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON)
	
	ОбъектСсылка = МенеджерОбъекта.ПустаяСсылка();
	Если НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВ1С <> "" Тогда
		
		ПолеСовпаденияОбъекта = НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВ1С;
		Если ПолеСовпаденияОбъекта = "Наименование" И ЗначениеЗаполнено(ОбъектJSON.name)Тогда
			ОбъектСсылка =  МенеджерОбъекта.НайтиПоНаименованию(ОбъектJSON.name);
		ИначеЕсли ПолеСовпаденияОбъекта = "ПользовательскоеПоле" Тогда	
			ОбъектСсылка = ПолучитьСсылкуНаОбъектПоПользовательскомуПолю(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON);
		ИначеЕсли ПолеСовпаденияОбъекта = "ПользовательскоеПолеИлиНаименование" Тогда
			ОбъектСсылка = ПолучитьСсылкуНаОбъектПоПользовательскомуПолюИлиНаименованию(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON);
			
			//ИначеЕсли ПолеСовпаденияОбъекта = "Телефон" И ЗначениеЗаполнено(ОбъектJSON.phones) Тогда
			//	Если ЗначениеЗаполнено(ОбъектJSON.phones) Тогда
			//		Для каждого Запись Из ОбъектJSON.phones Цикл
			//			
			//		КонецЦикла; 	
			//	КонецЕсли; 
			//ИначеЕсли ПолеСовпаденияОбъекта = "НаименованиеИТелефон" Тогда
			//	//Наименование контакта, телефонl - одновременное совпадение
			//				
			//ИначеЕсли ПолеСовпаденияОбъекта = "ТелефонИлиНаименование" Тогда
			//	//Телефон (если задан); или наименование (если не задан телефон)	
			//	Если ЗначениеЗаполнено(ОбъектJSON.phones) Тогда
			//		
			//	Иначе 
			//		ОбъектСсылка =  МенеджерОбъекта.НайтиПоНаименованию(ОбъектJSON.name);
			//	КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ОбъектСсылка;
КонецФункции

Функция ПолучитьСсылкуНаОбъектПоПользовательскомуПолю(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON)
	ИдентификаторПоля = НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С;
	МассивДанныхПользовательскихПолей = ОбъектJSON.customFieldsData;
	
	Для каждого ДанныеПоля  Из  МассивДанныхПользовательскихПолей Цикл
		Если ДанныеПоля.field.id = ИдентификаторПоля Тогда
			ЗначениеПоля = ПолучитьЗначениеПоля(ДанныеПоля);	
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ИдентификаторПоля) И ЗначениеПоля <> Неопределено Тогда
		ИмяРеквизитаОбъекта = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов.Найти(ИдентификаторПоля,"ИдентификаторПоляВПланфикс").ИмяРеквизитаОбъекта;
		ОбъектСсылка = МенеджерОбъекта.НайтиПоРеквизиту(ИмяРеквизитаОбъекта,ЗначениеПоля); 
	Иначе 
		ОбъектСсылка = МенеджерОбъекта.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОбъектСсылка;
КонецФункции

Функция ПолучитьСсылкуНаОбъектПоПользовательскомуПолюИлиНаименованию(НастройкаСопоставленияДанных, МенеджерОбъекта, ОбъектJSON)
	ИдентификаторПоля = НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С;
	МассивДанныхПользовательскихПолей = ОбъектJSON.customFieldsData;
	
	Для каждого ДанныеПоля  Из  МассивДанныхПользовательскихПолей Цикл
		Если ДанныеПоля.field.id = ИдентификаторПоля Тогда
			ЗначениеПоля = ПолучитьЗначениеПоля(ДанныеПоля);	
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ИдентификаторПоля) И ЗначениеПоля <> Неопределено Тогда
		ИмяРеквизитаОбъекта = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов.Найти(ИдентификаторПоля,"ИдентификаторПоляВПланфикс").ИмяРеквизитаОбъекта;
		ОбъектСсылка = МенеджерОбъекта.НайтиПоРеквизиту(ИмяРеквизитаОбъекта,ЗначениеПоля); 
	Иначе 
		ОбъектСсылка =  МенеджерОбъекта.НайтиПоНаименованию(ОбъектJSON.name);
	КонецЕсли;
	
	Возврат ОбъектСсылка;
КонецФункции


// запоняем объекты в зависимости от настроек прикладного решения
Процедура ЗаполнитьЗначениеСвойствОбъекта(НастройкаСопоставленияДанных,ТекущийОбъект, ОбъектJSON)
	
	Если ТекущийОбъект.Метаданные().Имя = "Контрагенты" 
				И Метаданные.Константы.Найти("ИспользоватьПартнеровИКонтрагентов") <> Неопределено 
				И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
				
		Если ТекущийОбъект.Ссылка.Пустая()Тогда
			НовыйКонтрагентУТКА(ТекущийОбъект, ОбъектJSON);
		Иначе
			ИзменитьКонтрагентаУТКА(ТекущийОбъект, ОбъектJSON);
		КонецЕсли;
	ИначеЕсли ТекущийОбъект.Метаданные().Имя = "Контрагенты" Тогда 
		
		Если ТекущийОбъект.Ссылка.Пустая() Тогда
			НовыйКонтрагент(ТекущийОбъект, ОбъектJSON);
		Иначе
			ИзменитьКонтрагента(ТекущийОбъект, ОбъектJSON);
		КонецЕсли; 
	ИначеЕсли ТекущийОбъект.Метаданные().Имя = "Партнеры" Тогда 
		
		Если ТекущийОбъект.Ссылка.Пустая()Тогда
			НовыйПартнер(ТекущийОбъект, ОбъектJSON);
		Иначе
			ИзменитьПартнера(ТекущийОбъект, ОбъектJSON);
		КонецЕсли;
	КонецЕсли; 
	
	Если ОбъектJSON.Свойство("customFieldsData") Тогда
		ЗаполнитьЗнчениеСвойствОбъектаДаннымиПользовательскихПолей (НастройкаСопоставленияДанных,ТекущийОбъект, ОбъектJSON.customFieldsData)	
	КонецЕсли; 
КонецПроцедуры

#Область УТКА

Процедура НовыйКонтрагентУТКА(НовыйКонтрагент, КонтактJSON)
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "name" Тогда
			НовыйКонтрагент.Наименование = Поле.Значение;
		ИначеЕсли  Поле.Ключ = "midname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			НовыйКонтрагент.Наименование = НовыйКонтрагент.Наименование +" " + Поле.Значение;
		ИначеЕсли  Поле.Ключ = "lastname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			НовыйКонтрагент.Наименование = НовыйКонтрагент.Наименование +" " + Поле.Значение;
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			НовыйКонтрагент.ЮрФизЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
			НовыйКонтрагент.ЮридическоеФизическоеЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйКонтрагент.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "email" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "phones"  Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
				СтрокаКИ.НомерТелефона = СтрокаТелефон.number;
				СтрокаКИ.Представление = СтрокаТелефон.number;
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "site" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
			СтрокаКИ.Представление = Поле.Значение;
		КонецЕсли;  
		
	КонецЦикла;
	НовыйКонтрагент.НаименованиеПолное = НовыйКонтрагент.Наименование;
	НовыйКонтрагент.Партнер = НовыйПартнер(Справочники.Партнеры.СоздатьЭлемент(), КонтактJSON);
	НовыйКонтрагент.Записать();
	
КонецПроцедуры

Процедура ИзменитьКонтрагентаУТКА(Контрагент, КонтактJSON)
	
	Если Контрагент.ВерсияДанных = КонтактJSON.sourceDataVersion Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Поле Из КонтактJSON Цикл
			
		Если Поле.Ключ = "name" И Контрагент.Наименование <> Поле.Значение Тогда
			Контрагент.Наименование = СокрЛП(Поле.Значение);
		ИначеЕсли  Поле.Ключ = "midname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			Контрагент.Наименование = Контрагент.Наименование +" " + Поле.Значение;
		ИначеЕсли  Поле.Ключ = "lastname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			Контрагент.Наименование = Контрагент.Наименование +" " + Поле.Значение;
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			Контрагент.ЮрФизЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
			Контрагент.ЮридическоеФизическоеЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "description" Тогда
			Контрагент.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.EmailПартнера);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение); 
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "phones" Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Отбор = Новый Структура();
				Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
				Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
				Отбор.Вставить("Представление",СокрЛП(СтрокаТелефон.number));
				
				МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
				Если МассивИскомыхСтрок.Количество() <> 0 Тогда
					Если МассивИскомыхСтрок[0].Представление <> СокрЛП(СтрокаТелефон.number) Тогда
						МассивИскомыхСтрок[0].Представление = СокрЛП(СтрокаТелефон.number)
					КонецЕсли; 
				Иначе 
					СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
					СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
					СтрокаКИ.НомерТелефона = СтрокаТелефон.number;
					СтрокаКИ.Представление = СтрокаТелефон.number;
				КонецЕсли; 
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.АдресПартнера);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "site" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;  
		КонецЕсли;  
		
	КонецЦикла;
	Контрагент.НаименованиеПолное = Контрагент.Наименование;
	ИзменитьПартнера(Контрагент.Партнер.ПолучитьОбъект(),КонтактJSON);
	Контрагент.Записать();

КонецПроцедуры

Функция НовыйПартнер(НовыйПартнер, КонтактJSON)
	//значения по умолчанию
	НовыйПартнер.ДатаРегистрации = ТекущаяДата();
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "name" Тогда
			НовыйПартнер.Наименование = Поле.Значение;
		ИначеЕсли  Поле.Ключ = "midname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			НовыйПартнер.Наименование = НовыйПартнер.Наименование +" " + Поле.Значение;
		ИначеЕсли  Поле.Ключ = "lastname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			НовыйПартнер.Наименование = НовыйПартнер.Наименование +" " + Поле.Значение;
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			НовыйПартнер.ЮрФизЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо)
		ИначеЕсли Поле.Ключ = "sex" Тогда
			Если КонтактJSON.sex = "Male" Тогда 
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли КонтактJSON.sex = "Female" Тогда
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> NULL Тогда
			НовыйПартнер.ДатаРождения = СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйПартнер.ДополнительнаяИнформация = Поле.Значение;
			НовыйПартнер.Комментарий = Поле.Значение;
		ИначеЕсли Поле.Ключ = "groupName" Тогда
			НовыйПартнер.Клиент = (СтрНайти(Поле.Значение, "Клиент") <> 0 ИЛИ СтрНайти(Поле.Значение, "Покупатель") <> 0);
			НовыйПартнер.Поставщик = СтрНайти(Поле.Значение, "Поставщик") <> 0;
			НовыйПартнер.Конкурент = СтрНайти(Поле.Значение, "Конкурент") <> 0;
			НовыйПартнер.ПрочиеОтношения = (СтрНайти(Поле.Значение, "Подрядчик") <> 0 ИЛИ СтрНайти(Поле.Значение, "Партнер") <> 0);
			Если Поле.Значение = "" Тогда
				НовыйПартнер.Клиент = Истина;	
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "email" Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "phones"  Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
				СтрокаКИ.НомерТелефона = СтрокаТелефон.number;
				СтрокаКИ.Представление = СтрокаТелефон.number;
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "site" Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
			СтрокаКИ.Представление = Поле.Значение;
		КонецЕсли;  
		
	КонецЦикла;
	НовыйПартнер.НаименованиеПолное = НовыйПартнер.Наименование;
	НовыйПартнер.Записать();
	
	Возврат НовыйПартнер.Ссылка;
КонецФункции

Процедура ИзменитьПартнера(Партнер, КонтактJSON)
	
	Если Партнер.ВерсияДанных = КонтактJSON.sourceDataVersion Тогда
		Возврат;
	КонецЕсли;
	Если Не Партнер.Клиент И Не Партнер.Поставщик И Не Партнер.ПрочиеОтношения Тогда
		 Партнер.Клиент = Истина;
	КонецЕсли; 
 
	Для каждого Поле Из КонтактJSON Цикл
			
		Если Поле.Ключ = "name" И Партнер.Наименование <> Поле.Значение Тогда
			Партнер.Наименование = СокрЛП(Поле.Значение);
		ИначеЕсли  Поле.Ключ = "midname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			Партнер.Наименование = Партнер.Наименование +" " + Поле.Значение;
		ИначеЕсли  Поле.Ключ = "lastname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			Партнер.Наименование = Партнер.Наименование +" " + Поле.Значение;
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			Партнер.ЮрФизЛицо = ?(КонтактJSON.isCompany = Истина, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо)
		ИначеЕсли Поле.Ключ = "sex" Тогда
			Если КонтактJSON.sex = "Male" Тогда 
				Партнер.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактJSON.sex = "Female" Тогда
				Партнер.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				Партнер.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> NULL И Партнер.ДатаРождения <> СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date) Тогда
			Партнер.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			Партнер.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.EmailПартнера);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение); 
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "phones" Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Отбор = Новый Структура();
				Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
				Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
				Отбор.Вставить("Представление",СокрЛП(СтрокаТелефон.number));
				
				МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
				Если МассивИскомыхСтрок.Количество() <> 0 Тогда
					Если МассивИскомыхСтрок[0].Представление <> СокрЛП(СтрокаТелефон.number) Тогда
						МассивИскомыхСтрок[0].Представление = СокрЛП(СтрокаТелефон.number)
					КонецЕсли; 
				Иначе 
					СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
					СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
					СтрокаКИ.НомерТелефона = СтрокаТелефон.number;
					СтрокаКИ.Представление = СтрокаТелефон.number;
				КонецЕсли; 
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.АдресПартнера);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "site" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;  
		КонецЕсли;  
		
	КонецЦикла;
	Партнер.НаименованиеПолное = Партнер.Наименование;
	Партнер.Записать();

КонецПроцедуры

#КонецОбласти

#Область УНФ

Процедура НовыйКонтрагент(НовыйКонтрагент, КонтактJSON)
	//значения по умолчанию
	НовыйКонтрагент.ДатаСоздания = ТекущаяДата();
	НовыйКонтрагент.ВестиРасчетыПоДоговорам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоДокументам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоЗаказам = Истина;
	НовыйКонтрагент.ВестиУчетОплатыПоСчетам = Истина;
	НовыйКонтрагент.ВалютаРасчетовПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	НовыйКонтрагент.СпособЗачетаПредоплатыПоУмолчанию = Константы.СпособЗачетаПредоплатыПоУмолчанию.Получить();
	НовыйКонтрагент.СпособРазнесенияОплатыПоУмолчанию = Константы.СпособРазнесенияОплатыПоУмолчанию.Получить();
	НовыйКонтрагент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	НовыйКонтрагент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	НовыйКонтрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	НовыйКонтрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "name" Тогда
			НовыйКонтрагент.Наименование = Поле.Значение;
		ИначеЕсли  Поле.Ключ = "midname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			НовыйКонтрагент.Наименование = НовыйКонтрагент.Наименование +" " + Поле.Значение;
		ИначеЕсли  Поле.Ключ = "lastname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			НовыйКонтрагент.Наименование = НовыйКонтрагент.Наименование +" " + Поле.Значение;
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			НовыйКонтрагент.ВидКонтрагента = ?(КонтактJSON.isCompany = Истина, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, Перечисления.ВидыКонтрагентов.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "sex" Тогда
			Если КонтактJSON.sex = "Male" Тогда 
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли КонтактJSON.sex = "Female" Тогда
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> NULL Тогда
			НовыйКонтрагент.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйКонтрагент.Комментарий = Поле.Значение;
		ИначеЕсли Поле.Ключ = "groupName" Тогда
			НовыйКонтрагент.Покупатель = (СтрНайти(Поле.Значение, "Клиент") <> 0 ИЛИ СтрНайти(Поле.Значение, "Покупатель") <> 0);
			НовыйКонтрагент.Поставщик = СтрНайти(Поле.Значение, "Поставщик") <> 0;
			НовыйКонтрагент.ПрочиеОтношения = (СтрНайти(Поле.Значение, "Подрядчик") <> 0 ИЛИ СтрНайти(Поле.Значение, "Партнер") <> 0 
												ИЛИ СтрНайти(Поле.Значение, "Конкурент") <> 0);
												
			Если Поле.Значение = "" Тогда
				НовыйКонтрагент.Покупатель = Истина;	
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "email" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
			
			НовыйКонтрагент.АдресЭПДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "phones"  Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				СтрокаКИ.НомерТелефона = СтрокаТелефон.number;
				СтрокаКИ.Представление = СтрокаТелефон.number;
				
				НовыйКонтрагент.НомерТелефонаДляПоиска = СтрокаТелефон.number;
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "site" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		КонецЕсли;  
		
	КонецЦикла;
	
	Если  НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		НовыйКонтрагент.ФИО = НовыйКонтрагент.Наименование;
	КонецЕсли;
	
	НовыйКонтрагент.НаименованиеПолное = НовыйКонтрагент.Наименование;
	НовыйКонтрагент.Записать();
	
	СоздатьКонтактноеЛицо(НовыйКонтрагент.Ссылка);
КонецПроцедуры

Процедура ИзменитьКонтрагента(Контрагент, КонтактJSON)
	
	Если Контрагент.ВерсияДанных = КонтактJSON.sourceDataVersion Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Поле Из КонтактJSON Цикл
		
		Если Поле.Ключ = "name" И Контрагент.Наименование <> Поле.Значение Тогда
			Контрагент.Наименование = СокрЛП(Поле.Значение);
		ИначеЕсли  Поле.Ключ = "midname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			Контрагент.Наименование = Контрагент.Наименование +" " + Поле.Значение;
		ИначеЕсли  Поле.Ключ = "lastname" И ЗначениеЗаполнено(Поле.Ключ)Тогда 
			Контрагент.Наименование = Контрагент.Наименование +" " + Поле.Значение;
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			Контрагент.ВидКонтрагента = ?(КонтактJSON.isCompany = Истина, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, Перечисления.ВидыКонтрагентов.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "sex" Тогда
			Если КонтактJSON.sex = "Male" Тогда 
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактJSON.sex = "Female" Тогда
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Поле.Значение <> NULL И Контрагент.ДатаРождения <> СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date) Тогда
			Контрагент.ДатаРождения =  СтроковыеФункцииКлиентСервер.СтрокаВДату(Поле.Значение.date);
		ИначеЕсли Поле.Ключ = "description" Тогда
			Контрагент.Комментарий = Поле.Значение;
		ИначеЕсли Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение); 
			КонецЕсли; 
			Контрагент.АдресЭПДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "phones"  Тогда
			Для каждого СтрокаТелефон Из Поле.Значение Цикл
				Отбор = Новый Структура();
				Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
				Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
				Отбор.Вставить("Представление",СокрЛП(СтрокаТелефон.number));
				
				МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
				Если МассивИскомыхСтрок.Количество() <> 0 Тогда
					Если МассивИскомыхСтрок[0].Представление <> СокрЛП(СтрокаТелефон.number) Тогда
						МассивИскомыхСтрок[0].Представление = СокрЛП(СтрокаТелефон.number)
					КонецЕсли; 
				Иначе 
					СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
					СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
					СтрокаКИ.НомерТелефона = СтрокаТелефон.number;
					СтрокаКИ.Представление = СтрокаТелефон.number;
				КонецЕсли; 
				Контрагент.НомерТелефонаДляПоиска = СтрокаТелефон.number;
			КонецЦикла; 
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "site" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;  
		КонецЕсли;  
		
	КонецЦикла;
	Контрагент.НаименованиеПолное = Контрагент.Наименование;
	
	Контрагент.Записать();
	
	Если Контрагент.КонтактноеЛицо.Пустая()Тогда
		СоздатьКонтактноеЛицо(Контрагент.Ссылка);
	Иначе 
		ИзменитьКонтактноеЛицо(Контрагент.КонтактноеЛицо, Контрагент.Ссылка);
	КонецЕсли; 
КонецПроцедуры

Процедура СоздатьКонтактноеЛицо(Контрагент)
	// Создание
	КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
	КонтактноеЛицоОбъект.Заполнить(Контрагент.Ссылка);
	КонтактноеЛицоОбъект.ГруппаДоступа = Контрагент.ГруппаДоступа;
	
	// Внесение изменений
	ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, Контрагент, "Наименование");
	КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
	
	Если ЗначениеЗаполнено(Контрагент.ГруппаДоступа) И НЕ ЗначениеЗаполнено(КонтактноеЛицоОбъект.ГруппаДоступа) Тогда
		КонтактноеЛицоОбъект.ГруппаДоступа = Контрагент.ГруппаДоступа;
	КонецЕсли;
	
	Для Каждого ДанныеКИ Из Контрагент.КонтактнаяИнформация Цикл
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицоОбъект, ДанныеКИ.Значение, ДанныеКИ.Вид, ДанныеКИ.Тип);
	КонецЦикла;
	
	// Запись объекта
	КонтактноеЛицоОбъект.ДополнительныеСвойства.Вставить("СвязьСКонтрагентом", Новый Структура("Контрагент,Должность", Контрагент.Ссылка, ""));
	КонтактноеЛицоОбъект.Записать();
	
	// Сохранение ссылки на созданный объект
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	КонтрагентОбъект.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

Процедура ИзменитьКонтактноеЛицо(КонтактСсылка, Контрагент)
	// Создание
	КонтактноеЛицоОбъект = КонтактСсылка.ПолучитьОбъект();
	КонтактноеЛицоОбъект.Заполнить(Контрагент.Ссылка);
	КонтактноеЛицоОбъект.ГруппаДоступа = Контрагент.ГруппаДоступа;
	
	// Внесение изменений
	ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, Контрагент, "Наименование");
	КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
	
	Если ЗначениеЗаполнено(Контрагент.ГруппаДоступа) И НЕ ЗначениеЗаполнено(КонтактноеЛицоОбъект.ГруппаДоступа) Тогда
		КонтактноеЛицоОбъект.ГруппаДоступа = Контрагент.ГруппаДоступа;
	КонецЕсли;
	
	Для Каждого ДанныеКИ Из Контрагент.КонтактнаяИнформация Цикл
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицоОбъект, ДанныеКИ.Значение, ДанныеКИ.Вид, ДанныеКИ.Тип);
	КонецЦикла;
	
	// Запись объекта
	КонтактноеЛицоОбъект.ДополнительныеСвойства.Вставить("СвязьСКонтрагентом", Новый Структура("Контрагент,Должность", Контрагент.Ссылка, ""));
	КонтактноеЛицоОбъект.Записать();
	
	// Сохранение ссылки на созданный объект
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	КонтрагентОбъект.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
	КонтрагентОбъект.Записать();

КонецПроцедуры

#КонецОбласти

#Область ДанныеПользовательскихПолей 

Процедура ЗаполнитьЗнчениеСвойствОбъектаДаннымиПользовательскихПолей (НастройкаСопоставленияДанных, ТекущийОбъект, МассивДанныхПользовательскихПолей)
	
	ТаблицаСопоставленияПолей = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов;
	
	Если ТаблицаСопоставленияПолей.Количество() > 0 Тогда
		
		Для каждого ДанныеПоля Из МассивДанныхПользовательскихПолей Цикл
			СтрокаТаблицы = НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов.Найти(ДанныеПоля.field.id, "ИдентификаторПоляВПланфикс");
			
			//пропускаем все поля, для которых нет сопоставления 
			Если  СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийОбъект[СтрокаТаблицы.ИмяРеквизитаОбъекта] = ПолучитьЗначениеПоля(ДанныеПоля); 
		КонецЦикла;
		
		ТекущийОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеПоля(ДанныеПоля)
	ЗначениеПоля  = ДанныеПоля.value;
	СтроковоеЗначениеПоля = ДанныеПоля.stringValue;
	
	Если ДанныеПоля.field.type = 0  //"Строка"
		ИЛИ ДанныеПоля.field.type = 2 Тогда //"Текст"
		
		Возврат ЗначениеПоля;
	ИначеЕсли ДанныеПоля.field.type = 1 Тогда //"Число"
		
		Возврат Число(ЗначениеПоля);
	ИначеЕсли ДанныеПоля.field.type = 3  //"Дата"
		ИЛИ ДанныеПоля.field.type = 4  //"Время"
		ИЛИ ДанныеПоля.field.type = 5 Тогда  //"Дата и время"
		
		Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеПоля);
	//ИначеЕсли ДанныеПоля.field.type = 6 Тогда //"Период времени"
		
	ИначеЕсли ДанныеПоля.field.type = 7 Тогда //"Чекбокс"
		
		Возврат Булево(ЗначениеПоля);
	//ИначеЕсли ДанныеПоля.field.type = 8 Тогда //"Список"
	//ИначеЕсли ДанныеПоля.field.type = 9 Тогда //"Запись справочника"
		
	ИначеЕсли ДанныеПоля.field.type = 10  //"Контакт"
		ИЛИ ДанныеПоля.field.type = 11  //"Сотрудник"
		ИЛИ ДанныеПоля.field.type = 12  //"Контрагент"
		ИЛИ ДанныеПоля.field.type = 22  //"Проект"	
		ИЛИ ДанныеПоля.field.type = 16 Тогда //"Задача"
		
		Возврат Строка(ЗначениеПоля);	
	//ИначеЕсли ДанныеПоля.field.type = 13 Тогда //"Группа, сотрудник или контакт"
	//ИначеЕсли ДанныеПоля.field.type = 14 Тогда //"Список пользователей"
	//ИначеЕсли ДанныеПоля.field.type = 15 Тогда //"Набор значений справочника"
	//ИначеЕсли ДанныеПоля.field.type = 17 Тогда //"Набор задач"
	//ИначеЕсли ДанныеПоля.field.type = 20 Тогда //"Набор значений"
	//ИначеЕсли ДанныеПоля.field.type = 21 Тогда //"Файлы"
	
	ИначеЕсли ДанныеПоля.field.type = 23 Тогда //"Итоги аналитик"
		
		Возврат Число(ЗначениеПоля);
	//ИначеЕсли ДанныеПоля.field.type = 24 Тогда //"Вычисляемое поле"
	//ИначеЕсли ДанныеПоля.field.type = 25 Тогда //"Местопопложение"
	ИначеЕсли ДанныеПоля.field.type = 26 Тогда //"Сумма подзадачи"
		
		Возврат Число(ЗначениеПоля);
	//ИначеЕсли ДанныеПоля.field.type = 27 Тогда //"Результат обучения"
	Иначе 
		Возврат СтроковоеЗначениеПоля;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область API

Функция ВыполнитьHTTPЗапрос(ИмяМетода, ТелоЗапроса = "", HTTPМетод = "POST", Таймаут = 60) Экспорт
	РезультатВыполнения = Новый Структура("РезультатВыполненияЗапроса, ДанныеJSON, ТекстJSON, ОписаниеОшибки", Ложь, Неопределено, "");
	
	НастройкиПодключения  = ПолучитьНастройкиПодключения();
	
	Если НастройкиПодключения = Неопределено Тогда
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка! Не указаны настройки подключения к API(адрес сервера, токен авторизации)'");
		Возврат РезультатВыполнения;
	КонецЕсли; 
	
	СтруктураURI = СтруктураURI(НастройкиПодключения.АдресСервера);
	
	HTTPСоединение = Новый HTTPСоединение(
	СтруктураURI.Хост, СтруктураURI.Порт 
	,,,,Таймаут,
	Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено)
	);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере+ИмяМетода+"?access_token=" + НастройкиПодключения.ТокенАвторизации, Заголовки);
	
	Если HTTPМетод = "POST" ИЛИ HTTPМетод = "PUT" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли; 
	
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);	
	Исключение
		Сообщить(НСтр("ru='Ошибка! Не удалось установить соединение с сервером'"), СтатусСообщения.ОченьВажное);
	КонецПопытки; 
	
	
	Если HTTPОтвет = Неопределено Тогда
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка! Не удалось установить соединение с сервером'");
		Возврат РезультатВыполнения;
	КонецЕсли;
	Если HTTPОтвет.КодСостояния = 200 ИЛИ HTTPОтвет.КодСостояния = 201 Тогда
		ДанныеJSON = ПрочитатьОтвет(HTTPОтвет.ПолучитьТелоКакСтроку());
		ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе 
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка! Не удалось установить соединение с сервером (" + HTTPОтвет.КодСостояния + ")'");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Если ДанныеJSON <> Неопределено И ДанныеJSON.Свойство("error") Тогда  
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка сервера - '")+ДанныеJSON.error;
	ИначеЕсли ДанныеJSON <> Неопределено Тогда 
		РезультатВыполнения.ДанныеJSON = ДанныеJSON;
		РезультатВыполнения.ТекстJSON = ТекстJSON;
		РезультатВыполнения.РезультатВыполненияЗапроса = Истина;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
		
КонецФункции

Функция ПрочитатьОтвет(ОтветСервера)
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСервера);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		
		Возврат ДанныеJSON;
		
	Исключение
		Сообщить(НСтр("ru='Ошибка чтения ответа от сервера: " + ОтветСервера + "'")); 
	КонецПопытки;
КонецФункции

Функция ТестПодключения() Экспорт
	Возврат ВыполнитьHTTPЗапрос("ping",, "GET", 5);
КонецФункции

Функция ПолучитьШаблоныКонтактов()Экспорт
	РезультатВыполнения = ВыполнитьHTTPЗапрос("contact/templates", "isCompany=false");
	
	Если РезультатВыполнения.ДанныеJSON <> Неопределено Тогда
		Возврат РезультатВыполнения.ДанныеJSON.templates;
	КонецЕсли; 
	
	Возврат Новый Массив();
КонецФункции

Функция ПолучитьШаблоныКомпаний()Экспорт
	РезультатВыполнения = ВыполнитьHTTPЗапрос("contact/templates", "isCompany=true");
	
	Если РезультатВыполнения.ДанныеJSON <> Неопределено Тогда
		Возврат РезультатВыполнения.ДанныеJSON.templates;
	КонецЕсли; 
	
	Возврат Новый Массив();
КонецФункции

Функция ПолучитьПользовательскиеПоля()Экспорт
	РезультатВыполнения = ВыполнитьHTTPЗапрос("customfield/contact","type=contact");
	
	Если РезультатВыполнения.ДанныеJSON <> Неопределено Тогда
		Возврат РезультатВыполнения.ДанныеJSON.customfields;
	КонецЕсли; 
	
	Возврат Новый Массив();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
Функция ПолучитьСлужебныеДанные() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	СлужебныеДанные = Новый Структура;
	СлужебныеДанные.Вставить("ВерсияПлатформы"			, СистемнаяИнформация.ВерсияПриложения);
	СлужебныеДанные.Вставить("НазваниеКонфигурации"		, Метаданные.Синоним);
	СлужебныеДанные.Вставить("ИмяКонфигурации"			, Метаданные.Имя);
	СлужебныеДанные.Вставить("ВерсияКонфигурации"		, Метаданные.Версия);
	СлужебныеДанные.Вставить("ВерсияВнешнейОбработки"	, СведенияОВнешнейОбработке().Версия);
	СлужебныеДанные.Вставить("ИдентификаторИБ"	    	, ПолучитьУникальныйИдентификаторИБ());
	
	Возврат СлужебныеДанные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьУникальныйИдентификаторИБ
//
// Описание: Генерируем GUID для текущей информационной базы и сохраняем его в стандартном хранилище настроек
//
// Возвращаемое значение: GUID (строка)
//
Функция ПолучитьУникальныйИдентификаторИБ()
	
	КлючОбъекта = "НастройкаОбменаСПланфиксGUID";
	КлючНастроек = "УникальныйИдентификаторИБ";
	ИмяПользователяНастроек = "planfix-1c.ru";
	GUID = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователяНастроек);
	
	Если GUID = Неопределено Тогда
		GUID = Новый УникальныйИдентификатор();
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, GUID, , ИмяПользователяНастроек);
	КонецЕсли; 
	
	Возврат GUID;
	
КонецФункции 

Функция ПолучитьНастройкиПодключения()
	
	КлючОбъекта = "НастройкаОбменаСПланфикс";
	КлючНастроек = "_НастройкиПодключения";
	ИмяПользователяНастроек = "planfix-1c.ru";
	НастройкиПодключения = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователяНастроек);
	
	Возврат НастройкиПодключения;
	
КонецФункции 

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСтруктуруМетаданныхДляОбмена
//
// Описание: Возвращает структуру объектов метаданных конфигурации в зависимости от версии прикладного решения(ТипОбъекта, ИмяОбъекта)
//
// Возвращаемое значение: Структура
//
Функция ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные) Экспорт
	
	СтруктураМетаданных = Новый Структура();
	
	Если СлужебныеДанные.ИмяКонфигурации = "УправлениеТорговлей" 
		ИЛИ СлужебныеДанные.ИмяКонфигурации = "УправлениеПредприятием"
		ИЛИ СлужебныеДанные.ИмяКонфигурации = "КомплекснаяАвтоматизация" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов")Тогда
			СтруктураМетаданных.Вставить("contacts", Новый Структура());
			СтруктураМетаданных.contacts.Вставить("ИмяОбъекта", "Контрагенты");
			СтруктураМетаданных.contacts.Вставить("ТипОбъекта", "Справочник");
			СтруктураМетаданных.contacts.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.Контрагенты");
			СтруктураМетаданных.contacts.Вставить("ИмяТаблицыБд", "Справочник.Контрагенты");
		Иначе 
			СтруктураМетаданных.Вставить("contacts", Новый Структура());
			СтруктураМетаданных.contacts.Вставить("ИмяОбъекта", "Партнеры");
			СтруктураМетаданных.contacts.Вставить("ТипОбъекта", "Справочник");
			СтруктураМетаданных.contacts.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.Партнеры");
			СтруктураМетаданных.contacts.Вставить("ИмяТаблицыБд", "Справочник.Партнеры");
		КонецЕсли; 
		
	ИначеЕсли СлужебныеДанные.ИмяКонфигурации = "УправлениеНебольшойФирмой" Тогда
		
		СтруктураМетаданных.Вставить("contacts", Новый Структура());
		СтруктураМетаданных.contacts.Вставить("ИмяОбъекта", "Контрагенты");
		СтруктураМетаданных.contacts.Вставить("ТипОбъекта", "Справочник");
		СтруктураМетаданных.contacts.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.Контрагенты");
		СтруктураМетаданных.contacts.Вставить("ИмяТаблицыБд", "Справочник.Контрагенты");
		
	КонецЕсли;
	
	Возврат СтруктураМетаданных;
	
КонецФункции

Функция ПолучитьПорциюДанныхДляОбмена(СтруктураОбъектаМетаданных, КоличествоЭлементов, ПоследняяСсылка, ВыгружатьПомеченныеНаУдаление) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоследняяСсылка",ПоследняяСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ " + ?(КоличествоЭлементов = 0,"", "ПЕРВЫЕ " + Формат(КоличествоЭлементов, "ЧГ="))+
	"
	|	*
	|ИЗ
	|	" + СтруктураОбъектаМетаданных.ИмяТаблицыБд + " КАК ТаблицаОбъекта
	|ГДЕ
	|   ТаблицаОбъекта.Ссылка > &ПоследняяСсылка И ДопУсловие
	|	"+ ? (ВыгружатьПомеченныеНаУдаление, "", "И НЕ ТаблицаОбъекта.ПометкаУдаления")+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Если Метаданные.НайтиПоПолномуИмени(СтруктураОбъектаМетаданных.ИмяТаблицыБд).Иерархический 
			И Метаданные.НайтиПоПолномуИмени(СтруктураОбъектаМетаданных.ИмяТаблицыБд).ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДопУсловие", "ТаблицаОбъекта.ЭтоГруппа = Ложь");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДопУсловие", "Истина");
	КонецЕсли;
	
		
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьНастройкуСопоставленияДанных(ИмяЗагружаемогоОбъектаПанфикс) Экспорт
	
	КлючОбъекта = "НастройкаСопоставленияДанныхСПланфикс";
	КлючНастроек = "НастройкаСопоставленияДанных_"+ИмяЗагружаемогоОбъектаПанфикс;
	ИмяПользователяНастроек = "planfix-1c.ru";
	НастройкаСопоставленияДанных = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователяНастроек);
	
	СтруктураНастройки = Новый Структура ();
	
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ШаблонКонтактаВПланфикс") Тогда
		СтруктураНастройки.Вставить("ШаблонКонтактаВПланфикс", НастройкаСопоставленияДанных.ШаблонКонтактаВПланфикс);	
	Иначе 
		СтруктураНастройки.Вставить("ШаблонКонтактаВПланфикс", "");	
	КонецЕсли;
	
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ШаблонКомпанииВПланфикс") Тогда
		СтруктураНастройки.Вставить("ШаблонКомпанииВПланфикс", НастройкаСопоставленияДанных.ШаблонКомпанииВПланфикс);	
	Иначе 
		СтруктураНастройки.Вставить("ШаблонКомпанииВПланфикс", "");	
	КонецЕсли;

	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ОпцииИмпортаКонтактовВПланфикс") Тогда
		СтруктураНастройки.Вставить("ОпцииИмпортаКонтактовВПланфикс", НастройкаСопоставленияДанных.ОпцииИмпортаКонтактовВПланфикс);	
	Иначе 
		СтруктураНастройки.Вставить("ОпцииИмпортаКонтактовВПланфикс", "");	
	КонецЕсли;
	
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПолеСовпаденияПриИмпортеКонтактовВПланфикс") Тогда
		СтруктураНастройки.Вставить("ПолеСовпаденияПриИмпортеКонтактовВПланфикс", НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеКонтактовВПланфикс);	
	Иначе 
		СтруктураНастройки.Вставить("ПолеСовпаденияПриИмпортеКонтактовВПланфикс", "");	
	КонецЕсли;
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ВыгружатьПомеченныеНаУдаление") Тогда
		СтруктураНастройки.Вставить("ВыгружатьПомеченныеНаУдаление", НастройкаСопоставленияДанных.ВыгружатьПомеченныеНаУдаление);
	Иначе 
		СтруктураНастройки.Вставить("ВыгружатьПомеченныеНаУдаление", Ложь);
	КонецЕсли;
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ТаблицаСопоставленияПользовательскихПолейИРеквизитов") Тогда
		СтруктураНастройки.Вставить("ТаблицаСопоставленияПользовательскихПолейИРеквизитов", НастройкаСопоставленияДанных.ТаблицаСопоставленияПользовательскихПолейИРеквизитов);
	Иначе
		СтруктураНастройки.Вставить("ТаблицаСопоставленияПользовательскихПолейИРеквизитов", Новый ТаблицаЗначений());
	КонецЕсли;
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("СоздаватьОбъектыВ1С") Тогда
		СтруктураНастройки.Вставить("СоздаватьОбъектыВ1С", НастройкаСопоставленияДанных.СоздаватьОбъектыВ1С);
	Иначе 
		СтруктураНастройки.Вставить("СоздаватьОбъектыВ1С", Ложь);
	КонецЕсли;
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ОбновлятьОбъектыВ1С") Тогда
		СтруктураНастройки.Вставить("ОбновлятьОбъектыВ1С", НастройкаСопоставленияДанных.ОбновлятьОбъектыВ1С);
	Иначе 
		СтруктураНастройки.Вставить("ОбновлятьОбъектыВ1С", Ложь);
	КонецЕсли;
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПолеСовпаденияПриИмпортеОбъектаВ1С") Тогда
		СтруктураНастройки.Вставить("ПолеСовпаденияПриИмпортеОбъектаВ1С", НастройкаСопоставленияДанных.ПолеСовпаденияПриИмпортеОбъектаВ1С);
	Иначе
		СтруктураНастройки.Вставить("ПолеСовпаденияПриИмпортеОбъектаВ1С", "");
	КонецЕсли;
	Если НастройкаСопоставленияДанных <> Неопределено И НастройкаСопоставленияДанных.Свойство("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С") Тогда
		СтруктураНастройки.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С", НастройкаСопоставленияДанных.ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С);
	Иначе
		СтруктураНастройки.Вставить("ПользовательскоеПолеСовпаденияПриИмпортеКонтактовВ1С", "");
	КонецЕсли;
	
	Возврат СтруктураНастройки;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСоотвествиеСистемныхПолейПланфикс
//
// Описание: Возвращает соотвествие имен реквизитов 1С и системных полей в Планфикс
//
Функция ПолучитьСоотвествиеСистемныхПолейПланфикс()
	
	СоотвествиеИмен = Новый Соответствие();
	//СоотвествиеИмен.Вставить("Наименование", "name"); //String  
	//СоотвествиеИмен.Вставить("Пол", "sex"); //Integer
	//СоотвествиеИмен.Вставить("Телефон", "workPhone"); //String
	//СоотвествиеИмен.Вставить("", "mobilePhone"); //String
	//СоотвествиеИмен.Вставить("", "homePhone"); //String
	//СоотвествиеИмен.Вставить("Адрес", "address"); //String
	//СоотвествиеИмен.Вставить("", "site"); //String
	//СоотвествиеИмен.Вставить("АдресЭлектроннойПочты", "email"); //String
	//СоотвествиеИмен.Вставить("", "skype"); //String
	//СоотвествиеИмен.Вставить("", "icq"); //String
	//СоотвествиеИмен.Вставить("", "isCompany"); //Boolean
	//СоотвествиеИмен.Вставить("", "companies"); //String
	//СоотвествиеИмен.Вставить("", "companyContacts"); //String
	СоотвествиеИмен.Вставить("ДополнительнаяИнформация", "description"); //String
	СоотвествиеИмен.Вставить("ДатаРождения", "birthDate"); //LocalDate
	
	Возврат СоотвествиеИмен;
	
КонецФункции 
 
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	
	Возврат НомерТелефона;
	
КонецФункции
 
#КонецОбласти


