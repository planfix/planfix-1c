///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, Планфикс
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбъявлениеПеременных
   перем СлужебныеДанные;
   перем СтруктураМетаданных;
#КонецОбласти

#Область СведенияОВнешнейОбработке 

// Функция заполняет структуру РегистрационныеДанные, которая имеет следующиме элементы (параметры):
//	• Наименование – краткое наименование обработки
//	• Версия - информация о версии обработки
//	• Безопасный режим – отвечает за то, должна ли обработка выполняться учитывая права пользователя.
//	• Вид – вид обработки или отчета. Возможные значения:
//		- ДополнительнаяОбработка
//		- ДополнительныйОтчет
//		- ЗаполнениеОбъекта
// 		- Отчет
//		- ПечатанаяФорма
//		- СозданиеСвязанныхОбъектов
//	• ТаблицаКоманд – таблица значений, в которой перечисляются используемые команды. Колонки таблицы значений:
//		○ Идентификатор – любая строка (индефикатор команды)
//		○ Представление – описание команды
//		○ Модификатор -  строка (используется для дополнительных печатных форм)
//		○ ПоказыватьОповещение – окно оповещение будет появляться перед началом и после окончание выполнения (для команд клиентских и серверных без формы)
//		○ Использование – режим запуска обработки:
//			 ОткрытиеФормы – откроется форма обработки
//			 ВызовКлиентскогоМетода – вызов клиентского экспортного метода  форма
//			 ВызовСерверногоМетода – вызов экспортного метода из модуля обработки
//	• Назначение
//		- "Документ.*" - все документы
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Модуль интеграции Планфикс");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "0.0.1");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Модуль обеспечивающий обмен данными между информационной базой 1С и системой Планфикс");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Открыть настройки", "ОктрытьФорму", "ОткрытиеФормы",  Ложь);
	ДобавитьКоманду(ТаблицаКоманд, "Выполнить обмен данными", "ВыполнитьОбмен", "ВызовСерверногоМетода",  Истина);
	РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
	
	Назначение = Новый Массив;
	Назначение.Добавить("Справочники.*"); 
	РегистрационныеДанные.Вставить("Назначение", Назначение);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");

	ТаблицаКоманд = Новый ТаблицаЗначений;

	ТаблицаКоманд.Колонки.Добавить("Представление"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("Использование"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение" 	, ТипБулево);
	ТаблицаКоманд.Колонки.Добавить("Модификатор"		  	, ТипСтрока);

	Возврат ТаблицаКоманд;
	
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление			= Представление;
	НоваяКоманда.Идентификатор			= Идентификатор;
	НоваяКоманда.Использование			= Использование;
	НоваяКоманда.ПоказыватьОповещение	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор			= Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	
	Если ИдентификаторКоманды = "ВыполнитьОбмен" Тогда
		ВыполнитьОбменДаннымиСПланфикс();
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ОбменДанными

Процедура ВыполнитьОбменДаннымиСПланфикс(ТестовыйJSON = "") Экспорт
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	ТекстJSON = "";
	Для каждого  Данные Из СтруктураМетаданных Цикл
		РезультатВыполненияЗапроса = ПолучитьДанныеДляОбмена(СокрЛП(Данные.Ключ+"."+Данные.Значение));
		ТекстJSON = ТекстJSON + Символы.ПС + СофрмироватьJSON(РезультатВыполненияЗапроса.Выгрузить(), СокрЛП(Данные.Ключ+"Менеджер."+Данные.Значение),
					СлужебныеДанные.ИдентификаторИБ); 
	КонецЦикла; 
	
	Если СокрЛП(ТекстJSON) <> "" Тогда
		ОтправитьДанные(ТекстJSON);		
	КонецЕсли; 
	
	ОтветТекстJSON = ПолучитьДанные();
	
	Если ТестовыйJSON <> "" Тогда
		ОтветТекстJSON = ТестовыйJSON;
	КонецЕсли; 
	
	ОбработатьИЗагрузитьДанные(ОтветТекстJSON, СлужебныеДанные.ИдентификаторИБ);
	
КонецПроцедуры

Функция СофрмироватьJSON(ВыгрузкаРезультатаЗапроса, ИмяОбъектаМетаданных, ИдентификаторИБ) Экспорт
	
	 ЗаписьJSON = Новый ЗаписьJSON;
	 ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	 ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	 
	 СоотвествиеИменПолей = ПолучитьСоотвествиеПолейПланфикс();
	 ИмяОбъекта = ПолучитьИзНастроекСоответствующееИмяОбъекта(ИмяОбъектаМетаданных);
	 
	 ЗаписьJSON.ЗаписатьНачалоОбъекта();
	 	 ЗаписьJSON.ЗаписатьИмяСвойства("baseID");
		 ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ИдентификаторИБ));
		 ЗаписьJSON.ЗаписатьИмяСвойства(ИмяОбъекта);
		 ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого СтрокаТЗ Из ВыгрузкаРезультатаЗапроса Цикл
			 ЗаписьJSON.ЗаписатьНачалоОбъекта();
			 Для каждого КолонкаТЗ Из ВыгрузкаРезультатаЗапроса.Колонки Цикл
			 	// ИмяСвойства = ?(СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) <> Неопределено, СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя), КолонкаТЗ.Имя);
				 
				 //некоторые общие свойства определяем и заполняем явно
				 ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ);
				 				 
				 //пропускаем все поля для которых нет соотвествия или не заполнены явно
				 Если  СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) = Неопределено Тогда
				 	 Продолжить;
				 КонецЕсли;
				 
				 //заполняем рекурсивно вложенные таблицы значений
				 Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
					 ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя],КолонкаТЗ.Имя);
					 Продолжить;	  
				 КонецЕсли;
				 				 				 
			 //    ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
			 //    ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
			 КонецЦикла; 
			 ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЦикла; 
		ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть(); 
	 
КонецФункции

Процедура ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, ТаблицаЗначений, ИмяТаблицы)
	
	СоотвествиеИменПолей = ПолучитьСоотвествиеПолейПланфикс();
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТаблицы);
	ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого СтрокаТЗ Из ТаблицаЗначений Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			Для каждого КолонкаТЗ Из ТаблицаЗначений.Колонки Цикл
				//ИмяСвойства = ?(СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) <> Неопределено, СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя), КолонкаТЗ.Имя);
				
				//некоторые общие свойства определяем и заполняем явно
				ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ);
					 
				Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
					ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя], КолонкаТЗ.Имя);
					Продолжить;	
				КонецЕсли;
			
				//ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
				//ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
				
			КонецЦикла; 
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла; 
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ)
	
	Если КолонкаТЗ.Имя = "Ссылка" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("extID");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя].УникальныйИдентификатор()));	
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "НаименованиеПолное" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> ""  Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "Пол" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("sex");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			ЗаписьJSON.ЗаписатьЗначение("1");
		ИначеЕсли	 СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Женский Тогда
			ЗаписьJSON.ЗаписатьЗначение("0");
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение("-1");
		КонецЕсли; 
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ВидКонтрагента" Тогда
		 ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		 Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
			 ЗаписьJSON.ЗаписатьЗначение(Истина);
		 Иначе 
			 ЗаписьJSON.ЗаписатьЗначение(Ложь);
		 КонецЕсли; 
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ЮрФизЛицо" Тогда
		 ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		 Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			 ЗаписьJSON.ЗаписатьЗначение(Истина);
		 Иначе 
			 ЗаписьJSON.ЗаписатьЗначение(Ложь);
		 КонецЕсли; 
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ДополнительнаяИнформация" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> "" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("description");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ДатаРождения" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> Дата(1, 1, 1) Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("birthDate");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;

	
	Если КолонкаТЗ.Имя = "КонтактнаяИнформация" И ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений")  Тогда
		КонтактнаяИнформация = СтрокаТЗ[КолонкаТЗ.Имя];
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("address");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("workPhone");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("email");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("site");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Skype));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("skype");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьДанные(ТекстJSON)
		
КонецПроцедуры

Функция ПолучитьДанные()
	
КонецФункции

Процедура ОбработатьИЗагрузитьДанные(ТекстJSON, ИдентификаторИБ)
	
	ЧтениеJSON  = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	СтруктураДанных = ПрочитатьJSON(ЧтениеJSON);
	
	Для каждого ОбъектДанных Из СтруктураДанных Цикл
		
		Если ОбъектДанных.Ключ = "baseID" Тогда
			Если ОбъектДанных.Значение <> СокрЛП(ИдентификаторИБ) Тогда
				ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("При обмене с Планфикс произошла ошибка, полученный идентификатор информационной базы не соотвествует идентификатору текущей базы", 
				УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект.Метаданные().ПолноеИмя(), , "Обратитесь в службу поддержки");
				Прервать;	
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		
		СоотвествиеИменРеквизитов = ПолучитьСоответствиеИменРеквизитовПолямПланФикс();
		ИмяОбъектаМетаданных = ПолучитьИзНастроекСоответствующееИмяОбъекта(ОбъектДанных.Ключ);
		МенеджерОбъекта = Новый (ИмяОбъектаМетаданных);
		
		Для каждого ЭлементОбъект Из ОбъектДанных.Значение Цикл
			
			GUID = Новый УникальныйИдентификатор(ЭлементОбъект.extID);
			ОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(GUID);
			
			Если ОбъектСсылка.Пустая()Тогда
				ТекущийОбъект = МенеджерОбъекта.СоздатьЭлемент();
			Иначе
				ТекущийОбъект = ОбъектСсылка.ПолучитьОбъект();
			КонецЕсли; 
			
			Для каждого СовойствоОбъекта Из ЭлементОбъект Цикл
				
				ИмяРеквизита = СоотвествиеИменРеквизитов[СовойствоОбъекта.Ключ];
				Если ТекущийОбъект[ТекущийОбъект] <> СовойствоОбъекта.Значение Тогда
					ТекущийОбъект[ТекущийОбъект] = СовойствоОбъекта.Значение;
				КонецЕсли;  
			КонецЦикла; 
			
			ТекущийОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСлужебныеДанные() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	СлужебныеДанные = Новый Структура;
	СлужебныеДанные.Вставить("ВерсияПлатформы"									, СистемнаяИнформация.ВерсияПриложения);
	СлужебныеДанные.Вставить("НазваниеКонфигурации"								, Метаданные.Синоним);
	СлужебныеДанные.Вставить("ИмяКонфигурации"									, Метаданные.Имя);
	СлужебныеДанные.Вставить("ВерсияКонфигурации"								, Метаданные.Версия);
	СлужебныеДанные.Вставить("ВерсияВнешнейОбработки"	    					, СведенияОВнешнейОбработке().Версия);
	СлужебныеДанные.Вставить("ИдентификаторИБ"	    , ПолучитьУникальныйИдентификаторИБ());
	
	Возврат СлужебныеДанные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьУникальныйИдентификаторИБ
//
// Описание: Генерируем GUID для текущей информационной базы и сохраняем его в стандартном хранилище настроек
//
// Возвращаемое значение: GUID (строка)
//
Функция ПолучитьУникальныйИдентификаторИБ()
	
	КлючОбъекта = "НастройкаОбменаСПланфикс";
	КлючНастроек = "УникальныйИдентификаторИБ";
	GUID = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек);
	
	Если GUID = Неопределено Тогда
		GUID = Новый УникальныйИдентификатор();
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,КлючНастроек,GUID);
	КонецЕсли; 
 
    Возврат GUID;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСтруктуруМетаданныхДляОбмена
//
// Описание: Хранит структуру объектов метаданных текущей конфигурации(ТипОбъекта, ИмяОбъекта)
//
// Возвращаемое значение: Структура
//
Функция ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные) Экспорт
	
	СтруктураМетаданных = Новый Структура();
	
	Если СлужебныеДанные.ИмяКонфигурации = "УправлениеТорговлей" ИЛИ СлужебныеДанные.ИмяКонфигурации = "УправлениеПредприятием" Тогда
		
		СтруктураМетаданных.Вставить("Справочник", "Партнеры"); 
		
		Если ПолучитьИзНастроекСоответствующееИмяОбъекта("СправочникМенеджер.Партнеры") = Неопределено Тогда
			СохранитьВНастройкиСоответствующееИмяОбъекта("СправочникМенеджер.Партнеры", "contacts");
			СохранитьВНастройкиСоответствующееИмяОбъекта("contacts", "СправочникМенеджер.Партнеры");
		КонецЕсли; 
		
	ИначеЕсли СлужебныеДанные.ИмяКонфигурации = "УправлениеНебольшойФирмой" Тогда
		
		СтруктураМетаданных.Вставить("Справочник", "Контрагенты");
		
		Если ПолучитьИзНастроекСоответствующееИмяОбъекта("СправочникМенеджер.Контрагенты") = Неопределено Тогда
			СохранитьВНастройкиСоответствующееИмяОбъекта("СправочникМенеджер.Контрагенты", "contacts");
			СохранитьВНастройкиСоответствующееИмяОбъекта("contacts", "СправочникМенеджер.Контрагенты");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураМетаданных;
	
КонецФункции

Функция ПолучитьДанныеДляОбмена(ИмяТаблицыМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	"+ИмяТаблицыМетаданных+" КАК ТаблицаОбъекта
		|ГДЕ
		|	НЕ ТаблицаОбъекта.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСоотвествиеПолейПланфикс
//
// Описание: Возвращает соотвествие имен реквизитов 1С и полей в Планфикс
//
Функция ПолучитьСоотвествиеПолейПланфикс()
	
	СоотвествиеИмен = Новый Соответствие();
	//СоотвествиеИмен.Вставить("Наименование", "name"); //String  
	//СоотвествиеИмен.Вставить("Пол", "sex"); //Integer
	//СоотвествиеИмен.Вставить("Телефон", "workPhone"); //String
	//СоотвествиеИмен.Вставить("", "mobilePhone"); //String
	//СоотвествиеИмен.Вставить("", "homePhone"); //String
	//СоотвествиеИмен.Вставить("Адрес", "address"); //String
	//СоотвествиеИмен.Вставить("", "site"); //String
	//СоотвествиеИмен.Вставить("АдресЭлектроннойПочты", "email"); //String
	//СоотвествиеИмен.Вставить("", "skype"); //String
	//СоотвествиеИмен.Вставить("", "icq"); //String
	//СоотвествиеИмен.Вставить("", "isCompany"); //Boolean
	//СоотвествиеИмен.Вставить("", "companies"); //String
	//СоотвествиеИмен.Вставить("", "companyContacts"); //String
	СоотвествиеИмен.Вставить("ДополнительнаяИнформация", "description"); //String
	СоотвествиеИмен.Вставить("ДатаРождения", "birthDate"); //LocalDate
	
	Возврат СоотвествиеИмен;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСоответствиеИменРеквизитовПолямПланФикс
//
// Описание: Возвращает соотвествие полей в Планфикс и имен реквизитов 1С
Функция ПолучитьСоответствиеИменРеквизитовПолямПланФикс()
	
	СоотвествиеИмен = Новый Соответствие();
	СоотвествиеИмен.Вставить("name", "Наименование");   
	СоотвествиеИмен.Вставить("sex", "Пол"); //Integer
	//СоотвествиеИмен.Вставить("Телефон", "workPhone"); //String
	//СоотвествиеИмен.Вставить("", "mobilePhone"); //String
	//СоотвествиеИмен.Вставить("", "homePhone"); //String
	//СоотвествиеИмен.Вставить("Адрес", "address"); //String
	//СоотвествиеИмен.Вставить("", "site"); //String
	//СоотвествиеИмен.Вставить("АдресЭлектроннойПочты", "email"); //String
	//СоотвествиеИмен.Вставить("", "skype"); //String
	//СоотвествиеИмен.Вставить("", "icq"); //String
	//СоотвествиеИмен.Вставить("", "isCompany"); //Boolean
	//СоотвествиеИмен.Вставить("", "companies"); //String
	//СоотвествиеИмен.Вставить("", "companyContacts"); //String
	СоотвествиеИмен.Вставить("description", "ДополнительнаяИнформация"); //String
	СоотвествиеИмен.Вставить("birthDate", "ДатаРождения"); //LocalDate
	
	Возврат СоотвествиеИмен;

КонецФункции
       
Функция ПолучитьИзНастроекСоответствующееИмяОбъекта(НастройкаДляОбъекта)
	
	КлючОбъекта = "НастройкаОбменаСПланфикс";
	КлючНастроек = "Объект_"+НастройкаДляОбъекта;
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек);
	
	Возврат ЗначениеНастройки;
	
КонецФункции 

Процедура СохранитьВНастройкиСоответствующееИмяОбъекта(ЗначениеНастройки, НастройкаДляОбъекта)
	
	КлючОбъекта = "НастройкаОбменаСПланфикс";
	КлючНастроек = "Объект_"+НастройкаДляОбъекта;
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,КлючНастроек, ЗначениеНастройки);
	
КонецПроцедуры

#КонецОбласти