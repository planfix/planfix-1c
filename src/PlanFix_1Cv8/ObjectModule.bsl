///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, Планфикс
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбъявлениеПеременных
перем СлужебныеДанные;
перем СтруктураМетаданных;
#КонецОбласти

#Область СведенияОВнешнейОбработке 

// Функция заполняет структуру РегистрационныеДанные, которая имеет следующиме элементы (параметры):
//	• Наименование – краткое наименование обработки
//	• Версия - информация о версии обработки
//	• Безопасный режим – отвечает за то, должна ли обработка выполняться учитывая права пользователя.
//	• Вид – вид обработки или отчета. Возможные значения:
//		- ДополнительнаяОбработка
//		- ДополнительныйОтчет
//		- ЗаполнениеОбъекта
// 		- Отчет
//		- ПечатанаяФорма
//		- СозданиеСвязанныхОбъектов
//	• ТаблицаКоманд – таблица значений, в которой перечисляются используемые команды. Колонки таблицы значений:
//		○ Идентификатор – любая строка (индефикатор команды)
//		○ Представление – описание команды
//		○ Модификатор -  строка (используется для дополнительных печатных форм)
//		○ ПоказыватьОповещение – окно оповещение будет появляться перед началом и после окончание выполнения (для команд клиентских и серверных без формы)
//		○ Использование – режим запуска обработки:
//			 ОткрытиеФормы – откроется форма обработки
//			 ВызовКлиентскогоМетода – вызов клиентского экспортного метода  форма
//			 ВызовСерверногоМетода – вызов экспортного метода из модуля обработки
//	• Назначение
//		- "Документ.*" - все документы
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Модуль интеграции Планфикс");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "0.0.1");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Модуль обеспечивающий обмен данными между информационной базой 1С и системой Планфикс");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Открыть настройки", "ОктрытьФорму", "ОткрытиеФормы",  Ложь);
	ДобавитьКоманду(ТаблицаКоманд, "Выполнить обмен данными", "ВыполнитьОбмен", "ВызовСерверногоМетода",  Истина);
	РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
	
	Назначение = Новый Массив;
	Назначение.Добавить("Справочники.*"); 
	РегистрационныеДанные.Вставить("Назначение", Назначение);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	
	ТаблицаКоманд.Колонки.Добавить("Представление"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("Использование"			, ТипСтрока);
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение" 	, ТипБулево);
	ТаблицаКоманд.Колонки.Добавить("Модификатор"		  	, ТипСтрока);
	
	Возврат ТаблицаКоманд;
	
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление			= Представление;
	НоваяКоманда.Идентификатор			= Идентификатор;
	НоваяКоманда.Использование			= Использование;
	НоваяКоманда.ПоказыватьОповещение	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор			= Модификатор;
	
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	
	Если ИдентификаторКоманды = "ВыполнитьОбмен" Тогда
		ВыполнитьОбменДаннымиСПланфикс();
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ОбменДанными

Процедура ВыполнитьОбменДаннымиСПланфикс(ТестовыйJSON = "") Экспорт
	СлужебныеДанные = ПолучитьСлужебныеДанные();
	СтруктураМетаданных = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
	
	Если СтруктураМетаданных.Количество() = 0 Тогда
		Сообщить("Ошибка. Данная конфигурация не поддерживается", СтатусСообщения.ОченьВажное); 
	КонецЕсли; 
	
	ТекстJSON = "";
	Для каждого  СтруктураОбъекта Из СтруктураМетаданных Цикл
		РезультатВыполненияЗапроса = ПолучитьДанныеДляОбмена(СтруктураОбъекта.Значение);
		ТекстJSON = ТекстJSON + Символы.ПС + СофрмироватьJSON(РезультатВыполненияЗапроса.Выгрузить(), СтруктураОбъекта.Ключ, СлужебныеДанные.ИдентификаторИБ); 
	КонецЦикла; 
	
	Если СокрЛП(ТекстJSON) <> "" Тогда
		ОтправитьДанные(ТекстJSON);		
	КонецЕсли; 
	
	ОтветТекстJSON = ПолучитьДанные();
	
	Если ТестовыйJSON <> "" Тогда
		ОтветТекстJSON = ТестовыйJSON;
	КонецЕсли; 
	
	ОбработатьИЗагрузитьДанные(ОтветТекстJSON, СлужебныеДанные.ИдентификаторИБ);
	
КонецПроцедуры

Функция СофрмироватьJSON(ВыгрузкаРезультатаЗапроса, ИмяОбъектаПланфикс, ИдентификаторИБ) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	СоотвествиеИменПолей = ПолучитьСоотвествиеПолейПланфикс();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("baseID");
	ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ИдентификаторИБ));
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяОбъектаПланфикс);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для каждого СтрокаТЗ Из ВыгрузкаРезультатаЗапроса Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого КолонкаТЗ Из ВыгрузкаРезультатаЗапроса.Колонки Цикл
			//некоторые общие свойства определяем и заполняем явно
			ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ);
			//пропускаем все поля для которых нет соотвествия или не заполнены явно
			Если СоотвествиеИменПолей.Получить(КолонкаТЗ.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//заполняем рекурсивно вложенные таблицы значений
			Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
				ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя],КолонкаТЗ.Имя);
				Продолжить;	  
			КонецЕсли;
		КонецЦикла; 
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла; 
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть(); 
	
КонецФункции

Процедура ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, ТаблицаЗначений, ИмяТаблицы)
	
	СоотвествиеИменПолей = ПолучитьСоотвествиеПолейПланфикс();
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТаблицы);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого КолонкаТЗ Из ТаблицаЗначений.Колонки Цикл
			//некоторые общие свойства определяем и заполняем явно
			ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ);
			Если ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
				ДозаполнитьJSONДаннымиИзВложеннойТаблицыЗначенийРекурсивно(ЗаписьJSON, СтрокаТЗ[КолонкаТЗ.Имя], КолонкаТЗ.Имя);
				Продолжить;	
			КонецЕсли;
		КонецЦикла; 
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла; 
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ОпределитьИЗаполнитьОбщиеСвойстваВJSON(ЗаписьJSON, СтрокаТЗ, КолонкаТЗ)
	
	Если КолонкаТЗ.Имя = "Ссылка" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("extID");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя].УникальныйИдентификатор()));	
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "НаименованиеПолное" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> ""  Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "Пол" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("sex");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			ЗаписьJSON.ЗаписатьЗначение("1");
		ИначеЕсли	 СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ПолФизическогоЛица.Женский Тогда
			ЗаписьJSON.ЗаписатьЗначение("0");
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение("-1");
		КонецЕсли; 
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ДатаРождения" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> Дата(1, 1, 1) Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("birthDate");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;
	
	#Область УТ_КА_УП
	Если КолонкаТЗ.Имя = "ЮрФизЛицо" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			ЗаписьJSON.ЗаписатьЗначение(Истина);
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
		КонецЕсли; 
	КонецЕсли;
	
	Если КолонкаТЗ.Имя = "ДополнительнаяИнформация" И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> "" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("description");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	КонецЕсли;
	
	//В планфикс группа может быть только одна, надо подумать в будущем как тут реализовать
	
	//Если КолонкаТЗ.Имя = "Клиент" И МассивТиповКлиента.Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Клиент");
	//КонецЕсли;
	//
	//Если КолонкаТЗ.Имя = "Поставщик" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Поставщик");
	//КонецЕсли;

	//Если КолонкаТЗ.Имя = "Конкурент" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Конкурент");
	//КонецЕсли;
	#КонецОбласти
	
	#Область УНФ
	
	Если КолонкаТЗ.Имя = "ВидКонтрагента" Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("isCompany");
		Если СтрокаТЗ[КолонкаТЗ.Имя] = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
			ЗаписьJSON.ЗаписатьЗначение(Истина);
		Иначе 
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
		КонецЕсли; 
	КонецЕсли;
	
	//Если КолонкаТЗ.Имя = "Комментарий"  И СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]) <> "" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("description");
	//	ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтрокаТЗ[КолонкаТЗ.Имя]));
	//КонецЕсли;
	//
	//Если КолонкаТЗ.Имя = "Покупатель" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Клиент");
	//КонецЕсли;
	//
	//Если КолонкаТЗ.Имя = "Поставщик" Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("groupName");
	//	ЗаписьJSON.ЗаписатьЗначение("Поставщик");
	//КонецЕсли;
	
	#КонецОбласти
		
	Если КолонкаТЗ.Имя = "КонтактнаяИнформация" И ТипЗнч(СтрокаТЗ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений")  Тогда
		КонтактнаяИнформация = СтрокаТЗ[КолонкаТЗ.Имя];
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("address");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("workPhone");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("email");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("site");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли; 
		
		МассивПоиска = СтрокаТЗ[КолонкаТЗ.Имя].НайтиСтроки(Новый Структура ("Тип",Перечисления.ТипыКонтактнойИнформации.Skype));
		Если МассивПоиска.Количество() > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("skype");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(МассивПоиска[0].Представление));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьДанные(ТекстJSON)
	
КонецПроцедуры

Функция ПолучитьДанные()
	
КонецФункции

Процедура ОбработатьИЗагрузитьДанные(ТекстJSON, ИдентификаторИБ)
	
	ЧтениеJSON  = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	СтруктураДанныхJSON = ПрочитатьJSON(ЧтениеJSON);
	
	Для каждого ЭлементДанныхJSON Из СтруктураДанныхJSON Цикл
		
		Если ЭлементДанныхJSON.Ключ = "baseID" Тогда
			Если ЭлементДанныхJSON.Значение <> СокрЛП(ИдентификаторИБ) Тогда
				ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("При обмене с Планфикс произошла ошибка, полученный идентификатор информационной базы не соотвествует идентификатору текущей базы", 
				УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект.Метаданные().ПолноеИмя(), , "Обратитесь в службу поддержки");
				Прервать;	
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		
		СтруктураМетаданныхОбъекта = ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные);
		МенеджерОбъекта = Новый (СтруктураМетаданныхОбъекта[ЭлементДанныхJSON.Ключ].ИмяМенеджераОбъекта);
		
		Для каждого ОбъектJSON Из ЭлементДанныхJSON.Значение Цикл
			
			GUID = Новый УникальныйИдентификатор(ОбъектJSON.extID);
			ОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(GUID);
			
			Если Не ЗначениеЗаполнено(ОбъектСсылка.ВерсияДанных) Тогда
				ТекущийОбъект = МенеджерОбъекта.СоздатьЭлемент();
			Иначе
				ТекущийОбъект = ОбъектСсылка.ПолучитьОбъект();
			КонецЕсли; 
			
			Если СтруктураМетаданных[ЭлементДанныхJSON.Ключ].ИмяОбъекта = "Контрагенты" Тогда
				ЗаполнитьЗначениеСвойствКонтрагентов(ТекущийОбъект, ОбъектJSON);
			ИначеЕсли СтруктураМетаданных[ЭлементДанныхJSON.Ключ].ИмяОбъекта = "Партнеры" Тогда 
				ЗаполнитьЗначениеСвойствПартнеров(ТекущийОбъект, ОбъектJSON);
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

#Область УТ_КА_УП

Процедура ЗаполнитьЗначениеСвойствПартнеров(ТекущийОбъектПартнер, КонтактПланфикс)
	
	Если ТекущийОбъектПартнер.Ссылка.Пустая() Тогда
		СоздатьПартнера(ТекущийОбъектПартнер, КонтактПланфикс);
	Иначе
		ИзменитьПартнера(ТекущийОбъектПартнер, КонтактПланфикс);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьПартнера(НовыйПартнер, КонтактПланфикс)
	НовыйПартнер.ДатаРегистрации = ТекущаяДата();
	НовыйПартнер.Комментарий = "Загружен из Планфикс";
	НовыйПартнер.ПрочиеОтношения = Истина; //пока нет возможности в Планфиксе указывать несколько групп контактов, по дефолту ставим прочие отношения 
	
	Для каждого Поле Из КонтактПланфикс Цикл
		
		Если Поле.Ключ = "name" Тогда
			НовыйПартнер.Наименование = Поле.Значение;
			НовыйПартнер.НаименованиеПолное = Поле.Значение;
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			НовыйПартнер.ЮрФизЛицо = ?(КонтактПланфикс.isCompany = Истина, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо)
		ИначеЕсли Поле.Ключ = "sex" Тогда
			Если КонтактПланфикс.sex = "1" Тогда 
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактПланфикс.sex = "0" Тогда
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				НовыйПартнер.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" Тогда
			НовыйПартнер.ДатаРождения =  Дата(Поле.Значение);
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйПартнер.ДополнительнаяИнформация = Поле.Значение;
		ИначеЕсли Поле.Ключ = "groupName" Тогда
			НовыйПартнер.Клиент = (СтрНайти(Поле.Значение, "Клиент") <> 0 ИЛИ СтрНайти(Поле.Значение, "Покупатель") <> 0);
			НовыйПартнер.Поставщик = СтрНайти(Поле.Значение, "Поставщик") <> 0;
			НовыйПартнер.Конкурент = СтрНайти(Поле.Значение, "Конкурент") <> 0;
			НовыйПартнер.ПрочиеОтношения = (СтрНайти(Поле.Значение, "Подрядчик") <> 0 ИЛИ СтрНайти(Поле.Значение, "Партнер") <> 0);
		ИначеЕсли Поле.Ключ = "email" Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "workPhone"  Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			СтрокаКИ.НомерТелефона = Поле.Значение;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "address" Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "site" Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			СтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		КонецЕсли;  
		
	КонецЦикла;
	
	НовыйПартнер.Записать();
	
КонецПроцедуры

Процедура ИзменитьПартнера(Партнер, КонтактПланфикс)
	 Для каждого Поле Из КонтактПланфикс Цикл
		
		Если Поле.Ключ = "name" И Партнер.Наименование <> Поле.Значение Тогда
			Партнер.Наименование = СокрЛП(Поле.Значение);
			Партнер.НаименованиеПолное = СокрЛП(Поле.Значение);
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			Партнер.ВидКонтрагента = ?(КонтактПланфикс.isCompany = Истина, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, Перечисления.ВидыКонтрагентов.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "sex" Тогда
			Если КонтактПланфикс.sex = "1" Тогда 
				Партнер.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактПланфикс.sex = "0" Тогда
				Партнер.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				Партнер.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Партнер.ДатаРождения = Дата(Поле.Значение)Тогда
			Партнер.ДатаРождения =  Дата(СокрЛП(Поле.Значение));
		ИначеЕсли Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение); 
			КонецЕсли; 
			Партнер.АдресЭПДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "workPhone" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли; 
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				СтрокаКИ.НомерТелефона = Поле.Значение;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли; 
			Партнер.НомерТелефонаДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "site" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Партнер.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Партнер.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;  
		КонецЕсли;  
		
	КонецЦикла;
	
	Партнер.Записать();

КонецПроцедуры

#КонецОбласти

#Область УНФ

Процедура ЗаполнитьЗначениеСвойствКонтрагентов(ТекущийОбъектКонтрагент, КонтактПланфикс)
	
	Если ТекущийОбъектКонтрагент.Ссылка.Пустая() Тогда
		СоздатьКонтрагента(ТекущийОбъектКонтрагент, КонтактПланфикс);
	Иначе
		ИзменитьКонтрагента(ТекущийОбъектКонтрагент, КонтактПланфикс);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьКонтрагента(НовыйКонтрагент, КонтактПланфикс)
	НовыйКонтрагент.ДатаСоздания = ТекущаяДата();
	НовыйКонтрагент.Комментарий = "Загружен из Планфикс";
	НовыйКонтрагент.ВестиРасчетыПоДоговорам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоДокументам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоЗаказам = Истина;
	НовыйКонтрагент.ВестиУчетОплатыПоСчетам = Истина;
	НовыйКонтрагент.ВалютаРасчетовПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	НовыйКонтрагент.СпособЗачетаПредоплатыПоУмолчанию = Константы.СпособЗачетаПредоплатыПоУмолчанию.Получить();
	НовыйКонтрагент.СпособРазнесенияОплатыПоУмолчанию = Константы.СпособРазнесенияОплатыПоУмолчанию.Получить();
	НовыйКонтрагент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	НовыйКонтрагент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	НовыйКонтрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	НовыйКонтрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	НовыйКонтрагент.ПрочиеОтношения = Истина; //пока нет возможности в Планфиксе указывать несколько групп контактов, по дефолту ставим прочие отношения 
	
	Для каждого Поле Из КонтактПланфикс Цикл
		
		Если Поле.Ключ = "name" Тогда
			НовыйКонтрагент.Наименование = Поле.Значение;
			НовыйКонтрагент.НаименованиеПолное = Поле.Значение;
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			НовыйКонтрагент.ВидКонтрагента = ?(КонтактПланфикс.isCompany = Истина, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, Перечисления.ВидыКонтрагентов.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "sex" Тогда
			Если КонтактПланфикс.sex = "1" Тогда 
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактПланфикс.sex = "0" Тогда
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				НовыйКонтрагент.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" Тогда
			НовыйКонтрагент.ДатаРождения =  Дата(Поле.Значение);
		ИначеЕсли Поле.Ключ = "description" Тогда
			НовыйКонтрагент.Комментарий = "Загружен из Планфикс " + Символы.ПС +"Дополнительная информация: " + Поле.Значение;
		ИначеЕсли Поле.Ключ = "groupName" Тогда
			НовыйКонтрагент.Покупатель = (СтрНайти(Поле.Значение, "Клиент") <> 0 ИЛИ СтрНайти(Поле.Значение, "Покупатель") <> 0);
			НовыйКонтрагент.Поставщик = СтрНайти(Поле.Значение, "Поставщик") <> 0;
			НовыйКонтрагент.ПрочиеОтношения = (СтрНайти(Поле.Значение, "Подрядчик") <> 0 ИЛИ СтрНайти(Поле.Значение, "Партнер") <> 0 
												ИЛИ СтрНайти(Поле.Значение, "Конкурент") <> 0);
		ИначеЕсли Поле.Ключ = "email" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
			
			НовыйКонтрагент.АдресЭПДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "workPhone"  Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			СтрокаКИ.НомерТелефона = Поле.Значение;
			СтрокаКИ.Представление = Поле.Значение;
			
			НовыйКонтрагент.НомерТелефонаДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "address" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "site" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить(); 
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
			СтрокаКИ.Представление = Поле.Значение;
		КонецЕсли;  
		
	КонецЦикла;
	
	Если  НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		НовыйКонтрагент.ФИО = НовыйКонтрагент.Наименование;
	КонецЕсли;
	
	НовыйКонтрагент.Записать();
	
КонецПроцедуры

Процедура ИзменитьКонтрагента(Контрагент, КонтактПланфикс)
	
	Для каждого Поле Из КонтактПланфикс Цикл
		
		Если Поле.Ключ = "name" И Контрагент.Наименование <> Поле.Значение Тогда
			Контрагент.Наименование = СокрЛП(Поле.Значение);
			Контрагент.НаименованиеПолное = СокрЛП(Поле.Значение);
		ИначеЕсли Поле.Ключ = "isCompany" Тогда 
			Контрагент.ВидКонтрагента = ?(КонтактПланфикс.isCompany = Истина, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, Перечисления.ВидыКонтрагентов.ФизическоеЛицо)
		ИначеЕсли Поле.Ключ = "sex" Тогда
			Если КонтактПланфикс.sex = "1" Тогда 
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.Мужской
			ИначеЕсли	 КонтактПланфикс.sex = "0" Тогда
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.Женский
			Иначе 
				Контрагент.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
			КонецЕсли  ;
		ИначеЕсли Поле.Ключ = "birthDate" И Контрагент.ДатаРождения = Дата(Поле.Значение)Тогда
			Контрагент.ДатаРождения =  Дата(СокрЛП(Поле.Значение));
		ИначеЕсли Поле.Ключ = "email" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				СтрокаКИ.Представление = СокрЛП(Поле.Значение); 
			КонецЕсли; 
			Контрагент.АдресЭПДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "workPhone" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли; 
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				СтрокаКИ.НомерТелефона = Поле.Значение;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли; 
			Контрагент.НомерТелефонаДляПоиска = Поле.Значение;
		ИначеЕсли Поле.Ключ = "address" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли; 
		ИначеЕсли Поле.Ключ = "site" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;
		ИначеЕсли Поле.Ключ = "skype" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Skype);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента);
			Отбор.Вставить("Представление",СокрЛП(Поле.Значение));
			
			МассивИскомыхСтрок = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Если МассивИскомыхСтрок.Количество() <> 0 Тогда
				Если МассивИскомыхСтрок[0].Представление <> СокрЛП(Поле.Значение) Тогда
					МассивИскомыхСтрок[0].Представление = СокрЛП(Поле.Значение)
				КонецЕсли;  
			Иначе 
				СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить(); 
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
				СтрокаКИ.Представление = Поле.Значение;
			КонецЕсли;  
		КонецЕсли;  
		
	КонецЦикла;
	
	Контрагент.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСлужебныеДанные() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	СлужебныеДанные = Новый Структура;
	СлужебныеДанные.Вставить("ВерсияПлатформы"									, СистемнаяИнформация.ВерсияПриложения);
	СлужебныеДанные.Вставить("НазваниеКонфигурации"								, Метаданные.Синоним);
	СлужебныеДанные.Вставить("ИмяКонфигурации"									, Метаданные.Имя);
	СлужебныеДанные.Вставить("ВерсияКонфигурации"								, Метаданные.Версия);
	СлужебныеДанные.Вставить("ВерсияВнешнейОбработки"	    					, СведенияОВнешнейОбработке().Версия);
	СлужебныеДанные.Вставить("ИдентификаторИБ"	    , ПолучитьУникальныйИдентификаторИБ());
	
	Возврат СлужебныеДанные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьУникальныйИдентификаторИБ
//
// Описание: Генерируем GUID для текущей информационной базы и сохраняем его в стандартном хранилище настроек
//
// Возвращаемое значение: GUID (строка)
//
Функция ПолучитьУникальныйИдентификаторИБ()
	
	КлючОбъекта = "НастройкаОбменаСПланфикс";
	КлючНастроек = "УникальныйИдентификаторИБ";
	GUID = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек);
	
	Если GUID = Неопределено Тогда
		GUID = Новый УникальныйИдентификатор();
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,КлючНастроек,GUID);
	КонецЕсли; 
	
	Возврат GUID;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСтруктуруМетаданныхДляОбмена
//
// Описание: Возвращает структуру объектов метаданных конфигурации в зависимости от версии прикладного решения(ТипОбъекта, ИмяОбъекта)
//
// Возвращаемое значение: Структура
//
Функция ПолучитьСтруктуруМетаданныхДляОбмена(СлужебныеДанные) Экспорт
	
	СтруктураМетаданных = Новый Структура();
	
	Если СлужебныеДанные.ИмяКонфигурации = "УправлениеТорговлей" 
		ИЛИ СлужебныеДанные.ИмяКонфигурации = "УправлениеПредприятием" Тогда
		
		СтруктураМетаданных.Вставить("contacts", Новый Структура());
		СтруктураМетаданных.contacts.Вставить("ИмяОбъекта", "Партнеры");
		СтруктураМетаданных.contacts.Вставить("ТипОбъекта", "Справочник");
		СтруктураМетаданных.contacts.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.Партнеры");
		СтруктураМетаданных.contacts.Вставить("ИмяТаблицыБд", "Справочник.Партнеры");
		
	ИначеЕсли СлужебныеДанные.ИмяКонфигурации = "УправлениеНебольшойФирмой" Тогда
		
		СтруктураМетаданных.Вставить("contacts", Новый Структура());
		СтруктураМетаданных.contacts.Вставить("ИмяОбъекта", "Контрагенты");
		СтруктураМетаданных.contacts.Вставить("ТипОбъекта", "Справочник");
		СтруктураМетаданных.contacts.Вставить("ИмяМенеджераОбъекта", "СправочникМенеджер.Контрагенты");
		СтруктураМетаданных.contacts.Вставить("ИмяТаблицыБд", "Справочник.Контрагенты");
		
	КонецЕсли;
	
	Возврат СтруктураМетаданных;
	
КонецФункции

Функция ПолучитьДанныеДляОбмена(СтруктураОбъектаМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	"+СтруктураОбъектаМетаданных.ИмяТаблицыБд+" КАК ТаблицаОбъекта
	|ГДЕ
	|	НЕ ТаблицаОбъекта.ПометкаУдаления И ДопУсловие";
	
	Если Метаданные.НайтиПоПолномуИмени(СтруктураОбъектаМетаданных.ИмяТаблицыБд).ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДопУсловие", "ТаблицаОбъекта.ЭтоГруппа = Ложь");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДопУсловие", "Истина");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьСоотвествиеПолейПланфикс
//
// Описание: Возвращает соотвествие имен реквизитов 1С и полей в Планфикс
//
Функция ПолучитьСоотвествиеПолейПланфикс()
	
	СоотвествиеИмен = Новый Соответствие();
	//СоотвествиеИмен.Вставить("Наименование", "name"); //String  
	//СоотвествиеИмен.Вставить("Пол", "sex"); //Integer
	//СоотвествиеИмен.Вставить("Телефон", "workPhone"); //String
	//СоотвествиеИмен.Вставить("", "mobilePhone"); //String
	//СоотвествиеИмен.Вставить("", "homePhone"); //String
	//СоотвествиеИмен.Вставить("Адрес", "address"); //String
	//СоотвествиеИмен.Вставить("", "site"); //String
	//СоотвествиеИмен.Вставить("АдресЭлектроннойПочты", "email"); //String
	//СоотвествиеИмен.Вставить("", "skype"); //String
	//СоотвествиеИмен.Вставить("", "icq"); //String
	//СоотвествиеИмен.Вставить("", "isCompany"); //Boolean
	//СоотвествиеИмен.Вставить("", "companies"); //String
	//СоотвествиеИмен.Вставить("", "companyContacts"); //String
	СоотвествиеИмен.Вставить("ДополнительнаяИнформация", "description"); //String
	СоотвествиеИмен.Вставить("ДатаРождения", "birthDate"); //LocalDate
	
	Возврат СоотвествиеИмен;
	
КонецФункции 

//////////////////////////////////////////////////////////////////////////////////
////
//// Функция ПолучитьСоответствиеИменРеквизитовПолямПланФикс
////
//// Описание: Возвращает соотвествие полей в Планфикс и имен реквизитов 1С
//Функция ПолучитьСоответствиеИменРеквизитовПолямПланФикс()
//	
//	СоотвествиеИмен = Новый Соответствие();
//	СоотвествиеИмен.Вставить("name", "Наименование");   
//	СоотвествиеИмен.Вставить("sex", "Пол"); //Integer
//	//СоотвествиеИмен.Вставить("Телефон", "workPhone"); //String
//	//СоотвествиеИмен.Вставить("", "mobilePhone"); //String
//	//СоотвествиеИмен.Вставить("", "homePhone"); //String
//	//СоотвествиеИмен.Вставить("Адрес", "address"); //String
//	//СоотвествиеИмен.Вставить("", "site"); //String
//	//СоотвествиеИмен.Вставить("АдресЭлектроннойПочты", "email"); //String
//	//СоотвествиеИмен.Вставить("", "skype"); //String
//	//СоотвествиеИмен.Вставить("", "icq"); //String
//	//СоотвествиеИмен.Вставить("", "isCompany"); //Boolean
//	//СоотвествиеИмен.Вставить("", "companies"); //String
//	//СоотвествиеИмен.Вставить("", "companyContacts"); //String
//	СоотвествиеИмен.Вставить("description", "ДополнительнаяИнформация"); //String
//	СоотвествиеИмен.Вставить("birthDate", "ДатаРождения"); //LocalDate
//	
//	Возврат СоотвествиеИмен;

//КонецФункции

#КонецОбласти


